<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CudaFFT</name>
    </assembly>
    <members>
        <member name="T:ManagedCuda.CudaFFT.cufftResult">
            <summary>
            CUFFT API function return values 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.Success">
            <summary>
            Any CUFFT operation is successful.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan">
            <summary>
            CUFFT is passed an invalid plan handle.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed">
            <summary>
            CUFFT failed to allocate GPU memory.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidType">
            <summary>
            The user requests an unsupported type.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue">
            <summary>
            The user specifies a bad memory pointer.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InternalError">
            <summary>
            Used for all internal driver errors.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed">
            <summary>
            CUFFT failed to execute an FFT on the GPU.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed">
            <summary>
            The CUFFT library failed to initialize.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize">
            <summary>
            The user specifies an unsupported FFT size.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.UnalignedData">
            <summary>
            Input or output does not satisfy texture alignment requirements.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.IncompleteParameterList">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.InvalidDevice">
            <summary>
            Plan creation and execution are on different device
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.ParseError">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.NoWorkspace">
            <summary>
            Workspace not initialized
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.NotImplemented">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.LicenseError">
            <summary>
            License error
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftResult.NotSupported">
            <summary>
            Not supported error
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.cufftHandle">
            <summary>
            cufftHandle is a handle type used to store and access CUFFT plans.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftHandle.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.cufftHandle.Create">
            <summary>
            Creates only an opaque handle, and allocates small data structures on the host. The
            cufftMakePlan*() calls actually do the plan generation. It is recommended that
            cufftSet*() calls, such as cufftSetCompatibilityMode(), that may require a plan
            to be broken down and re-generated, should be made after cufftCreate() and before
            one of the cufftMakePlan*() calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.cufftHandle.SetWorkArea(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            SetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="workArea"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.cufftHandle.SetAutoAllocation(System.Boolean)">
            <summary>
            SetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="autoAllocate"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.cufftHandle.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="T:ManagedCuda.CudaFFT.TransformDirection">
            <summary>
            CUFFT transform directions 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.TransformDirection.Forward">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.TransformDirection.Inverse">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.cufftType">
            <summary>
            CUFFT supports the following transform types 
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.R2C">
            <summary>
            Real to Complex (interleaved)
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.C2R">
            <summary>
            Complex (interleaved) to Real
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.C2C">
            <summary>
            Complex to Complex, interleaved
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.D2Z">
            <summary>
            Double to Double-Complex
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.Z2D">
            <summary>
            Double-Complex to Double
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaFFT.cufftType.Z2Z">
            <summary>
            Double-Complex to Double-Complex
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlan1D">
            <summary>
            Creates a 1D FFT plan configuration for a specified signal size and data
            type. The <c>batch</c> input parameter tells CUFFT how many 1D
            transforms to configure.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a new 1D FFT plan (old API)
            </summary>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 1D FFT plan (old API)
            </summary>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,System.Boolean)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a new 1D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.GetSize">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate1d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.EstimateSize(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the work
            area.
            </summary>
            <param name="nx">The transform size (e.g. 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single
            precision complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.GetActualSize">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API,
            this call returns the actual size of the work area required to support the plan. Callers
            who choose to manage work area allocation within their application must use this call
            after plan generation, and after any cufftSet*() calls subsequent to plan generation, if
            those calls might alter the required work space size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.SetWorkArea(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            SetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="workArea"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.SetAutoAllocation(System.Boolean)">
            <summary>
            SetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="autoAllocate"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan1D.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.NX">
            <summary>
            The transform size (e.g., 256 for a 256-point FFT)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.Type">
            <summary>
            The transform data type (e.g., C2C for complex to complex)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.Batch">
            <summary>
            Number of transforms of size NX
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan1D.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTException">
            <summary>
            An CudaFFTException is thrown, if any wrapped call to the CUFFT-library does not return <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="serInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(ManagedCuda.CudaFFT.cufftResult)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.#ctor(ManagedCuda.CudaFFT.cufftResult,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTException.CudaFFTError">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlan2D">
            <summary>
            Creates a 2D FFT plan configuration according to specified signal sizes
            and data type. This class is the same as <see cref="T:ManagedCuda.CudaFFT.CudaFFTPlan1D"/> except that
            it takes a second size parameter, <c>ny</c>, and does not support batching.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a new 2D FFT plan (old API)
            </summary>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 2D FFT plan (old API)
            </summary>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Boolean)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a new 2D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.GetSize">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate1d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.EstimateSize(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the work
            area.
            </summary>
            <param name="nx">The transform size in the x dimension (number of rows)</param>
            <param name="ny">The transform size in the y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single
            precision complex to complex)</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.GetActualSize">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API,
            this call returns the actual size of the work area required to support the plan. Callers
            who choose to manage work area allocation within their application must use this call
            after plan generation, and after any cufftSet*() calls subsequent to plan generation, if
            those calls might alter the required work space size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.SetWorkArea(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            SetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="workArea"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.SetAutoAllocation(System.Boolean)">
            <summary>
            SetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="autoAllocate"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan2D.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.NX">
            <summary>
            The transform size in the X dimension (number of rows)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.NY">
            <summary>
            The transform size in the Y dimension (number of columns)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.Type">
            <summary>
            The transform data type (e.g., C2R for complex to real)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan2D.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlan3D">
            <summary>
            Creates a 3D FFT plan configuration according to specified signal sizes
            and data type. This class is the same as <see cref="T:ManagedCuda.CudaFFT.CudaFFTPlan2D"/> except that
            it takes a third size parameter <c>nz</c>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a new 3D FFT plan (old API)
            </summary>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 3D FFT plan (old API)
            </summary>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Boolean)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a new 3D FFT plan (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.GetSize">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate1d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.EstimateSize(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the work
            area.
            </summary>
            <param name="nx">The transform size in the x dimension</param>
            <param name="ny">The transform size in the y dimension</param>
            <param name="nz">The transform size in the z dimension</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single
            precision complex to complex)</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.GetActualSize">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API,
            this call returns the actual size of the work area required to support the plan. Callers
            who choose to manage work area allocation within their application must use this call
            after plan generation, and after any cufftSet*() calls subsequent to plan generation, if
            those calls might alter the required work space size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.SetWorkArea(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            SetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="workArea"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.SetAutoAllocation(System.Boolean)">
            <summary>
            SetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="autoAllocate"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlan3D.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.NX">
            <summary>
            The transform size in the X dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.NY">
            <summary>
            The transform size in the Y dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.NZ">
            <summary>
            The transform size in the Z dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.Type">
            <summary>
            The transform data type (e.g., R2C for real to complex)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlan3D.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlanMany">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.<para/>
            Input parameters <c>inembed</c>, <c>istride</c>, and <c>idist</c> and output
            parameters <c>onembed</c>, <c>ostride</c>, and <c>odist</c> will allow setup of noncontiguous
            input data in a future version (Beta status in version 4.0). Note that for CUFFT 3.0,
            these parameters are ignored and the layout of batched data must be
            side‐by‐side and not interleaved.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (old API)
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (old API)
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (old API)
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (old API)
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.GetSize">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate1d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.EstimateSize(System.Int32,System.Int32[],System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the work
            area.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.GetActualSize">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API,
            this call returns the actual size of the work area required to support the plan. Callers
            who choose to manage work area allocation within their application must use this call
            after plan generation, and after any cufftSet*() calls subsequent to plan generation, if
            those calls might alter the required work space size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.SetWorkArea(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            SetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="workArea"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.SetAutoAllocation(System.Boolean)">
            <summary>
            SetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="autoAllocate"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Rank">
            <summary>
            Dimensionality of the transform (1, 2, or 3)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.N">
            <summary>
            An array of size rank, describing the size of each dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Batch">
            <summary>
            Batch size for this transform
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Type">
            <summary>
            Transform data type (e.g., C2C, as per other CUFFT calls)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Inembed">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Istride">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Idist">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Onembed">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Ostride">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Odist">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany.Handle">
            <summary>
            Handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTNativeMethods">
            <summary>
            C# wrapper for the NVIDIA CUFFT API (--> cufft.h)
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan1d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a 1D FFT plan configuration for a specified signal size and data
            type. The <c>batch</c> input parameter tells CUFFT how many 1D
            transforms to configure.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="nx">The transform size (e.g., 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., C2C for complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan2d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a 2D FFT plan configuration according to specified signal sizes
            and data type. This function is the same as <see cref="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan1d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)"/> except that
            it takes a second size parameter, <c>ny</c>, and does not support batching.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="nx">The transform size in the X dimension (number of rows)</param>
            <param name="ny">The transform size in the Y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., C2R for complex to real)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan3d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a 3D FFT plan configuration according to specified signal sizes
            and data type. This function is the same as <see cref="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlan2d(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType)"/> except that
            it takes a third size parameter <c>nz</c>.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="nx">The transform size in the X dimension</param>
            <param name="ny">The transform size in the Y dimension</param>
            <param name="nz">The transform size in the Z dimension</param>
            <param name="type">The transform data type (e.g., R2C for real to complex)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftPlanMany(ManagedCuda.CudaFFT.cufftHandle@,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.<para/>
            Input parameters <c>inembed</c>, <c>istride</c>, and <c>idist</c> and output
            parameters <c>onembed</c>, <c>ostride</c>, and <c>odist</c> will allow setup of noncontiguous
            input data in a future version (Beta status in version 4.0). Note that for CUFFT 3.0,
            these parameters are ignored and the layout of batched data must be
            side‐by‐side and not interleaved.
            </summary>
            <param name="plan">Pointer to a <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of the input data in memory</param>
            <param name="istride">Defines the distance between two successive input elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two consecutive batches in the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of the output data in memory</param>
            <param name="ostride">Defines the distance between two successive output elements in the output array in the least significant (i.e., innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two consecutive batches in the output data</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="batch">Batch size for this transform</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidType"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftMakePlan1d(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Following a call to cufftCreate() makes a 1D FFT plan configuration for a specified
            signal size and data type. The batch input parameter tells CUFFT how many 1D 
            transforms to configure.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="nx">The transform size (e.g. 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single precision complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="workSize"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftMakePlan2d(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Following a call to cufftCreate() makes a 2D FFT plan configuration according to specified signal sizes and data type.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="nx">The transform size in the x dimension (number of rows)</param>
            <param name="ny">The transform size in the y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2R for single precision complex to real)</param>
            <param name="workSize"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftMakePlan3d(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Following a call to cufftCreate() makes a 3D FFT plan configuration according to
            specified signal sizes and data type. This function is the same as cufftPlan2d() except
            that it takes a third size parameter nz.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="nx">The transform size in the x dimension</param>
            <param name="ny">The transform size in the y dimension</param>
            <param name="nz">The transform size in the z dimension</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex)</param>
            <param name="workSize"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftMakePlanMany(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Following a call to cufftCreate() makes a FFT plan configuration of dimension rank,
            with sizes specified in the array n. The batch input parameter tells CUFFT how many
            transforms to configure. With this function, batched plans of 1, 2, or 3 dimensions may
            be created.<para/>
            The cufftPlanMany() API supports more complicated input and output data layouts
            via the advanced data layout parameters: inembed, istride, idist, onembed,
            ostride, and odist.<para/>
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of
            the input data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="istride">Indicates the distance between two successive input
            elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two
            consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of
            the output data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="ostride">Indicates the distance between two successive output
            elements in the output array in the least significant (i.e.,
            innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two
            consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single
            precision real to complex)</param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftMakePlanMany64(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Following a call to cufftCreate() makes a FFT plan configuration of dimension rank,
            with sizes specified in the array n. The batch input parameter tells CUFFT how many
            transforms to configure. With this function, batched plans of 1, 2, or 3 dimensions may
            be created.<para/>
            The cufftPlanMany() API supports more complicated input and output data layouts
            via the advanced data layout parameters: inembed, istride, idist, onembed,
            ostride, and odist.<para/>
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of
            the input data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="istride">Indicates the distance between two successive input
            elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two
            consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of
            the output data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="ostride">Indicates the distance between two successive output
            elements in the output array in the least significant (i.e.,
            innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two
            consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single
            precision real to complex)</param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftEstimate1d(System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the work
            area.
            </summary>
            <param name="nx">The transform size (e.g. 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single
            precision complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftEstimate2d(System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the workarea.
            </summary>
            <param name="nx">The transform size in the x dimension (number of rows)</param>
            <param name="ny">The transform size in the y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2R for single
            precision complex to real)</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftEstimate3d(System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the workarea.
            </summary>
            <param name="nx">The transform size in the x dimension</param>
            <param name="ny">The transform size in the y dimension</param>
            <param name="nz">The transform size in the z dimension</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex)</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftEstimateMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            During plan execution, CUFFT requires a work area for temporary storage of
            intermediate results. This call returns an estimate for the size of the work area required,
            given the specified parameters, and assuming default plan settings. Note that changing
            some plan settings, such as compatibility mode, may alter the size required for the work
            area.<para/>
            The cufftPlanMany() API supports more complicated input and output data layouts
            via the advanced data layout parameters: inembed, istride, idist, onembed,
            ostride, and odist.<para/>
            All arrays are assumed to be in CPU memory.
            </summary>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of
            the input data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="istride">Indicates the distance between two successive input
            elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two
            consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of
            the output data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="ostride">Indicates the distance between two successive output
            elements in the output array in the least significant (i.e.,
            innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two
            consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single
            precision real to complex)</param>
            <param name="batch">Batch size for this transform</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftCreate(ManagedCuda.CudaFFT.cufftHandle@)">
            <summary>
            Creates only an opaque handle, and allocates small data structures on the host. The
            cufftMakePlan*() calls actually do the plan generation. It is recommended that
            cufftSet*() calls, such as cufftSetCompatibilityMode(), that may require a plan
            to be broken down and re-generated, should be made after cufftCreate() and before
            one of the cufftMakePlan*() calls.
            </summary>
            <param name="cufftHandle">Pointer to a cufftHandle object</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.AllocFailed"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidSize"/>, 
            </returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftGetSize1d(ManagedCuda.CudaFFT.cufftHandle,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate1d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size (e.g. 256 for a 256-point FFT)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2C for single
            precision complex to complex)</param>
            <param name="batch">Number of transforms of size nx</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftGetSize2d(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate2d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the x dimension (number of rows)</param>
            <param name="ny">The transform size in the y dimension (number of columns)</param>
            <param name="type">The transform data type (e.g., CUFFT_C2R for single
            precision complex to real)</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftGetSize3d(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate3d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="nx">The transform size in the x dimension</param>
            <param name="ny">The transform size in the y dimension</param>
            <param name="nz">The transform size in the z dimension</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single precision real to complex)</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftGetSizeMany(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ManagedCuda.CudaFFT.cufftType,System.Int32,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimateSizeMany(), given the specified parameters, and taking into account
            any plan settings that may have been made.<para/>
            The batch input parameter tells CUFFT how many transforms to configure. With this
            function, batched plans of 1, 2, or 3 dimensions may be created.<para/>
            The cufftPlanMany() API supports more complicated input and output data layouts
            via the advanced data layout parameters: inembed, istride, idist, onembed,
            ostride, and odist.<para/>
            All arrays are assumed to be in CPU memory
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of
            the input data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="istride">Indicates the distance between two successive input
            elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two
            consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of
            the output data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="ostride">Indicates the distance between two successive output
            elements in the output array in the least significant (i.e.,
            innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two
            consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single
            precision real to complex)</param>
            <param name="batch">Batch size for this transform</param>
            <param name="workArea">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftGetSizeMany64(ManagedCuda.CudaFFT.cufftHandle,System.Int64,System.Int64[],System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimateSizeMany(), given the specified parameters, and taking into account
            any plan settings that may have been made.<para/>
            The batch input parameter tells CUFFT how many transforms to configure. With this
            function, batched plans of 1, 2, or 3 dimensions may be created.<para/>
            The cufftPlanMany() API supports more complicated input and output data layouts
            via the advanced data layout parameters: inembed, istride, idist, onembed,
            ostride, and odist.<para/>
            All arrays are assumed to be in CPU memory
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">Array of size rank, describing the size of each dimension</param>
            <param name="inembed">Pointer of size rank that indicates the storage dimensions of
            the input data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="istride">Indicates the distance between two successive input
            elements in the least significant (i.e., innermost) dimension</param>
            <param name="idist">Indicates the distance between the first element of two
            consecutive signals in a batch of the input data</param>
            <param name="onembed">Pointer of size rank that indicates the storage dimensions of
            the output data in memory. If set to NULL all other advanced
            data layout parameters are ignored.</param>
            <param name="ostride">Indicates the distance between two successive output
            elements in the output array in the least significant (i.e.,
            innermost) dimension</param>
            <param name="odist">Indicates the distance between the first element of two
            consecutive signals in a batch of the output data</param>
            <param name="type">The transform data type (e.g., CUFFT_R2C for single
            precision real to complex)</param>
            <param name="batch">Batch size for this transform</param>
            <param name="workArea">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftGetSize(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API,
            this call returns the actual size of the work area required to support the plan. Callers
            who choose to manage work area allocation within their application must use this call
            after plan generation, and after any cufftSet*() calls subsequent to plan generation, if
            those calls might alter the required work space size.
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="workSize">Pointer to the size of the work space</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftSetWorkArea(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            cufftSetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="workArea">Pointer to workArea</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftSetAutoAllocation(ManagedCuda.CudaFFT.cufftHandle,System.Int32)">
            <summary>
            cufftSetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="plan">cufftHandle object</param>
            <param name="autoAllocate">Boolean to indicate whether to allocate work area.</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftDestroy(ManagedCuda.CudaFFT.cufftHandle)">
            <summary>
            Frees all GPU resources associated with a CUFFT plan and destroys the
            internal plan data structure. This function should be called once a plan
            is no longer needed to avoid wasting GPU memory.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecC2C(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFFT single‐precision complex‐to‐complex transform
            plan as specified by direction. CUFFT uses as input data the GPU
            memory pointed to by the idata parameter. This function stores the
            Fourier coefficients in the odata array. If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuFloatComplex: Pointer to the single-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuFloatComplex: Pointer to the single-precision complex output data (in GPU memory)</param>
            <param name="direction">The transform direction: Forward or Inverse</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InternalError"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecR2C(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            executes a CUFFT single‐precision real‐to‐complex (implicitly
            forward) transform plan. CUFFT uses as input data the GPU memory
            pointed to by the <c>idata</c> parameter. This function stores the nonredundant
            Fourier coefficients in the <c>odata</c> array. If <c>idata</c> and <c>odata</c>
            are the same, this method does an in‐place transform (See “CUFFT
            Transform Types” on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuFloatReal: Pointer to the single-precision real input data (in GPU memory) to transform</param>
            <param name="odata">cuFloatComplex: Pointer to the single-precision complex output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecC2R(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFFT single‐precision complex‐to‐real (implicitly inverse)
            transform plan. CUFFT uses as input data the GPU memory pointed to
            by the idata parameter. The input array holds only the nonredundant
            complex Fourier coefficients. This function stores the real
            output values in the odata array. If idata and odata are the same, this
            method does an in‐place transform. (See “CUFFT Transform Types”
            on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuFloatComplex: Pointer to the single-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuFloatReal: Pointer to the single-precision real output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecZ2Z(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFFT double‐precision complex‐to‐complex transform
            plan as specified by direction. CUFFT uses as input data the GPU
            memory pointed to by the <c>idata</c> parameter. This function stores the
            Fourier coefficients in the <c>odata</c> array. If <c>idata</c> and <c>odata</c> are the
            same, this method does an in‐place transform.
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuDoubleComplex: Pointer to the double-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuDoubleComplex: Pointer to the double-precision complex output data (in GPU memory)</param>
            <param name="direction">The transform direction: Forward or Inverse</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecD2Z(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFFT double‐precision real‐to‐complex (implicitly
            forward) transform plan. CUFFT uses as input data the GPU memory
            pointed to by the <c>idata</c> parameter. This function stores the nonredundant
            Fourier coefficients in the <c>odata</c> array. If <c>idata</c> and <c>odata</c>
            are the same, this method does an in‐place transform (See “CUFFT
            Transform Types” on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuDoubleReal: Pointer to the double-precision real input data (in GPU memory) to transform</param>
            <param name="odata">cuDoubleComplex: Pointer to the double-precision complex output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftExecZ2D(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFFT double‐precision complex‐to‐real (implicitly
            inverse) transform plan. CUFFT uses as input data the GPU memory
            pointed to by the <c>idata</c> parameter. The input array holds only the
            non‐redundant complex Fourier coefficients. This function stores the
            real output values in the <c>odata</c> array. If <c>idata</c> and <c>odata</c> are the same,
            this method does an in‐place transform. (See “CUFFT Transform
            Types” on page 4 for details on real data FFTs.)
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="idata">cuDoubleComplex: Pointer to the double-precision complex input data (in GPU memory) to transform</param>
            <param name="odata">cuDoubleReal: Pointer to the double-precision real output data (in GPU memory)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.SetupFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, 
            <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidValue"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.ExecFailed"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTNativeMethods.cufftSetStream(ManagedCuda.CudaFFT.cufftHandle,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to cufftSetStream().
            </summary>
            <param name="plan">The <see cref="T:ManagedCuda.CudaFFT.cufftHandle"/> object of the plan to be destroyed.</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <returns>cufftResult Error Codes: <see cref="F:ManagedCuda.CudaFFT.cufftResult.InvalidPlan"/>, <see cref="F:ManagedCuda.CudaFFT.cufftResult.Success"/></returns>
        </member>
        <member name="T:ManagedCuda.CudaFFT.CudaFFTPlanMany64">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created.<para/>
            Input parameters <c>inembed</c>, <c>istride</c>, and <c>idist</c> and output
            parameters <c>onembed</c>, <c>ostride</c>, and <c>odist</c> will allow setup of noncontiguous
            input data in a future version (Beta status in version 4.0). Note that for CUFFT 3.0,
            these parameters are ignored and the layout of batched data must be
            side‐by‐side and not interleaved.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.BasicTypes.CUstream,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.#ctor(ManagedCuda.CudaFFT.cufftHandle,System.Int32,System.Int64[],System.Int64,ManagedCuda.CudaFFT.cufftType,System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ManagedCuda.BasicTypes.CUstream,ManagedCuda.BasicTypes.SizeT@,System.Boolean)">
            <summary>
            Creates a FFT plan configuration of dimension rank, with sizes
            specified in the array <c>n</c>. The <c>batch</c> input parameter tells CUFFT how
            many transforms to configure in parallel. With this function, batched
            plans of any dimension may be created. (new API)
            </summary>
            <param name="handle">cufftHandle object</param>
            <param name="rank">Dimensionality of the transform (1, 2, or 3)</param>
            <param name="n">An array of size rank, describing the size of each dimension</param>
            <param name="batch">Batch size for this transform</param>
            <param name="type">Transform data type (e.g., C2C, as per other CUFFT calls)</param>
            <param name="inembed">See CUFFT Manual</param>
            <param name="istride">See CUFFT Manual</param>
            <param name="idist">See CUFFT Manual</param>
            <param name="onembed">See CUFFT Manual</param>
            <param name="ostride">See CUFFT Manual</param>
            <param name="odist">See CUFFT Manual</param>
            <param name="stream">A valid CUDA stream created with cudaStreamCreate() (or 0 for the default stream)</param>
            <param name="size"></param>
            <param name="autoAllocate">indicates that the caller intends to allocate and manage
            work areas for plans that have been generated.</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.GetSize">
            <summary>
            This call gives a more accurate estimate of the work area size required for a plan than
            cufftEstimate1d(), given the specified parameters, and taking into account any plan
            settings that may have been made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.GetActualSize">
            <summary>
            Once plan generation has been done, either with the original API or the extensible API,
            this call returns the actual size of the work area required to support the plan. Callers
            who choose to manage work area allocation within their application must use this call
            after plan generation, and after any cufftSet*() calls subsequent to plan generation, if
            those calls might alter the required work space size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.SetWorkArea(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            SetWorkArea() overrides the work area pointer associated with a plan.
            If the work area was auto-allocated, CUFFT frees the auto-allocated space. The
            cufftExecute*() calls assume that the work area pointer is valid and that it points to
            a contiguous region in device memory that does not overlap with any other work area. If
            this is not the case, results are indeterminate.
            </summary>
            <param name="workArea"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.SetAutoAllocation(System.Boolean)">
            <summary>
            SetAutoAllocation() indicates that the caller intends to allocate and manage
            work areas for plans that have been generated. CUFFT default behavior is to allocate
            the work area at plan generation time. If cufftSetAutoAllocation() has been called
            with autoAllocate set to "false" prior to one of the cufftMakePlan*() calls, CUFFT
            does not allocate the work area. This is the preferred sequence for callers wishing to
            manage work area allocation.
            </summary>
            <param name="autoAllocate"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.CudaFFT.TransformDirection)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.
            </summary>
            <param name="iodata"></param>
            <param name="direction">Only unsed for transformations where direction is not implicitly given by type</param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Exec(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            If idata and odata are the
            same, this method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="idata"></param>
            <param name="odata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Exec(ManagedCuda.BasicTypes.CUdeviceptr)">
            <summary>
            Executes a CUFTT transorm as defined by the cufftType.
            This method does an in‐place transform.<para/>
            This method is only valid for transform types where transorm direction is implicitly 
            given by the type (i.e. not C2C and not Z2Z)
            </summary>
            <param name="iodata"></param>
        </member>
        <member name="M:ManagedCuda.CudaFFT.CudaFFTPlanMany64.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Associates a CUDA stream with a CUFFT plan. All kernel launches
            made during plan execution are now done through the associated
            stream, enabling overlap with activity in other streams (for example,
            data copying). The association remains until the plan is destroyed or
            the stream is changed with another call to SetStream().
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Rank">
            <summary>
            Dimensionality of the transform (1, 2, or 3)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.N">
            <summary>
            An array of size rank, describing the size of each dimension
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Batch">
            <summary>
            Batch size for this transform
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Type">
            <summary>
            Transform data type (e.g., C2C, as per other CUFFT calls)
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Inembed">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Istride">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Idist">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Onembed">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Ostride">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Odist">
            <summary>
            See CUFFT Manual
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaFFT.CudaFFTPlanMany64.Handle">
            <summary>
            Handle
            </summary>
        </member>
    </members>
</doc>
