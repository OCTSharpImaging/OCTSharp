<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Alea</name></assembly>
<members>
<member name="P:Alea.Settings.Resource(Alea.SettingElements.ResourceElement)">
 <summary>
 Configures resource settings. The XML element is <c>resource</c>.
 </summary> 
</member>
<member name="P:Alea.Settings.License(Alea.SettingElements.LicenseElement)">
 <summary>
 Configures license system, such as the license repository path.
 The XML element is <c>license</c>.
 </summary>
</member>
<member name="P:Alea.Settings.JITCompile(Alea.SettingElements.JITCompileElement)">
 <summary>
 Configures JIT compiling. The XML element is <c>jitCompile</c>.
 </summary>
</member>
<member name="P:Alea.Settings.Diagnostics(Alea.SettingElements.DiagnosticsElement)">
 <summary>
 Configures diagnostics settings. The XML element is <c>diagnostics</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CURAND(Alea.SettingElements.CULibElement)">
 <summary>
 Configures cuRAND library; e.g. the path to find the NVIDIA cuRAND library.
 The XML element is <c>cuRAND</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CUDNN(Alea.SettingElements.CULibElement)">
 <summary>
 Configures cuDNN library; e.g. the path to find the NVIDIA cuDNN library.
 The XML element is <c>cuDNN</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CUDADriver(Alea.SettingElements.CUDADriverElement)">
 <summary>
 Configures CUDA driver. Use this setting if you use a non-standard path for your
 CUDA driver dll installation. The XML element is <c>cudaDriver</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CUBLAS(Alea.SettingElements.CULibElement)">
 <summary>
 Configures cuBLAS library; e.g. the path to find the NVIDIA cuBlas library.
 The XML element is <c>cuBLAS</c>.
 </summary>
</member>
<member name="P:Alea.Settings.Resource">
 <summary>
 Configures resource settings. The XML element is <c>resource</c>.
 </summary> 
</member>
<member name="P:Alea.Settings.License">
 <summary>
 Configures license system, such as the license repository path.
 The XML element is <c>license</c>.
 </summary>
</member>
<member name="P:Alea.Settings.JITCompile">
 <summary>
 Configures JIT compiling. The XML element is <c>jitCompile</c>.
 </summary>
</member>
<member name="P:Alea.Settings.Instance">
<summary>
Gets the singleton instance of Settings.
</summary>
</member>
<member name="P:Alea.Settings.Diagnostics">
 <summary>
 Configures diagnostics settings. The XML element is <c>diagnostics</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CURAND">
 <summary>
 Configures cuRAND library; e.g. the path to find the NVIDIA cuRAND library.
 The XML element is <c>cuRAND</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CUDNN">
 <summary>
 Configures cuDNN library; e.g. the path to find the NVIDIA cuDNN library.
 The XML element is <c>cuDNN</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CUDADriver">
 <summary>
 Configures CUDA driver. Use this setting if you use a non-standard path for your
 CUDA driver dll installation. The XML element is <c>cudaDriver</c>.
 </summary>
</member>
<member name="P:Alea.Settings.CUBLAS">
 <summary>
 Configures cuBLAS library; e.g. the path to find the NVIDIA cuBlas library.
 The XML element is <c>cuBLAS</c>.
 </summary>
</member>
<member name="T:Alea.Settings">
 <summary>
 Configure Alea GPU through .NET configuration system.
 </summary>
</member>
<member name="P:Alea.PlatformUtil.ProcessBitness">
<summary>
 Gets current process bitness.
</summary>
</member>
<member name="P:Alea.PlatformUtil.OperatingSystem">
<summary>
 Gets current operating system.
</summary>
</member>
<member name="P:Alea.PlatformUtil.NewLine">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.PlatformUtil.MachineArchitecture">
<summary>
 Gets current host machine architecture.
</summary>
</member>
<member name="P:Alea.PlatformUtil.Instance">
<summary>
 Gets the singleton instance of platform utility.
</summary>
</member>
<member name="P:Alea.PlatformUtil.CTNativeDirectory">
<summary>
 Gets the directory for JIT compile natives.
</summary>
</member>
<member name="P:Alea.PlatformUtil.CTLibDeviceDirectory">
<summary>
 Gets the directory for JIT compile LibDevice bitcode libraries.
</summary>
</member>
<member name="M:Alea.PlatformUtil.GetModulePdbFileInfo(System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.PlatformUtil">
<summary>
 Utility type that provides information about the current process.
</summary>
</member>
<member name="T:Alea.MachineArchitecture">
<summary>
 Represents host machine architecture.
</summary>
</member>
<member name="P:Alea.OperatingSystem._Current">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.OperatingSystem">
<summary>
 Represents operating system.
</summary>
</member>
<member name="T:Alea.AddressSize.Address64">
<summary>
 64bit.
</summary>
</member>
<member name="T:Alea.AddressSize.Address32">
<summary>
 32bit.
</summary>
</member>
<member name="P:Alea.AddressSize._Current">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.AddressSize.Size">
<summary>
 Size in bytes.
</summary>
</member>
<member name="P:Alea.AddressSize.Bits">
<summary>
 Size in bits.
</summary>
</member>
<member name="T:Alea.AddressSize">
<summary>
 Address size. 32bit or 64bit.
</summary>
</member>
<member name="M:Alea.Events.remove_PTXCode(Microsoft.FSharp.Control.FSharpHandler{System.Byte[]})">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.Events.remove_Message(System.EventHandler{Alea.Message})">
<summary>
 The logging message event.
</summary>
</member>
<member name="M:Alea.Events.remove_JITCompiled(Alea.JITCompiledEventHandler)">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.Events.PTXCode">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.Events.Message">
<summary>
 The logging message event.
</summary>
</member>
<member name="P:Alea.Events.JITCompiled">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.Events.Instance">
<summary>
 Gets the singleton instance of the events collection.
</summary>
</member>
<member name="M:Alea.Events.add_PTXCode(Microsoft.FSharp.Control.FSharpHandler{System.Byte[]})">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.Events.add_Message(System.EventHandler{Alea.Message})">
<summary>
 The logging message event.
</summary>
</member>
<member name="M:Alea.Events.add_JITCompiled(Alea.JITCompiledEventHandler)">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.Events">
<summary>
 A collection of events that can be monitored.
</summary>
</member>
<member name="T:Alea.DefaultMonitor">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.Message">
<summary>
 A type representing log messages.
</summary>
</member>
<member name="T:Alea.MessageImportance">
<summary>
 Importance level of messages for logging.
</summary>
</member>
<member name="T:Alea.LicenseUtil">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.TargetGPU">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.UInt64AndFloat">
 <summary>A union of a <c>uint64</c> and a <c>float</c>, 8 byte layout.</summary>
</member>
<member name="T:Alea.UInt32AndFloat32">
 <summary>A union of a <c>uint32</c> and a <c>float32</c>, 4 byte layout.</summary>
</member>
<member name="T:Alea.double2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.double1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.float4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.float3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.float2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.float1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.ulong2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.ulong1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.long2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.long1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uint4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uint3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uint2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uint1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.int4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.int3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.int2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.int1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.ushort4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.ushort3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.ushort2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.ushort1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.short4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.short3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.short2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.short1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uchar4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uchar3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uchar2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.uchar1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.char4">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.char3">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.char2">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="T:Alea.char1">
 <summary>
 Built-in vector struct with special alignment. 
 For more details, please refer to this <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#vector-types">documentation</see>.
 </summary>
</member>
<member name="F:Alea.dim3.z">
 <summary>Dimension <c>z</c>.</summary>
</member>
<member name="F:Alea.dim3.y">
 <summary>Dimension <c>y</c>.</summary>
</member>
<member name="F:Alea.dim3.x">
 <summary>Dimension <c>x</c>.</summary>
</member>
<member name="P:Alea.dim3.Size">
 <summary>A host function for the size of this <c>dim3</c> object, given by <c>x * y * z</c>.</summary>
</member>
<member name="M:Alea.dim3.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>Build <c>dim3(x, y, z)</c>.</summary>
</member>
<member name="M:Alea.dim3.#ctor(System.Int32,System.Int32)">
 <summary>Build <c>dim3(x, y, 1)</c>.</summary>
</member>
<member name="M:Alea.dim3.#ctor(System.Int32)">
 <summary>Build <c>dim3(x, 1, 1)</c>.</summary>
</member>
<member name="T:Alea.dim3">
 <summary>
 A triple integer struct used to represent a three-dimensional size, such as <c>blockDim</c> and <c>gridDim</c>.
 </summary>
</member>
<member name="P:Alea.SymbolTable`1.Scopes">
<summary>
 The scopes dictionary used within this symbol table
</summary>
</member>
<member name="M:Alea.SymbolTable`1._IncreaseScope">
 <summary>Redefines the <c>scopes</c> dictionary to be the concatenation of a new empty dictionary with the current value of <c>scopes</c>.</summary>
</member>
<member name="M:Alea.SymbolTable`1._DecreaseScope">
 <summary>Redefines the <c>scopes</c> dictionary by removing the head dictionary in the list.</summary>
</member>
<member name="M:Alea.SymbolTable`1.TryGetSymbol(System.String)">
 <summary>Attempts to find the symbol in the scopes dictionary using <c>name</c> as the key.</summary>
</member>
<member name="M:Alea.SymbolTable`1.HasSymbol(System.String)">
 <summary>Returns <c>true</c> if the scopes dictionary contains the key <c>name</c>.</summary>
</member>
<member name="M:Alea.SymbolTable`1.Dump">
<summary>
 Outputs the current state of the symbol table.
</summary>
</member>
<member name="T:Alea.SymbolTable`1">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.VariableType">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.JITOptions">
<summary>
 Loading options.
</summary>
</member>
<member name="P:Alea.LinkOptions.fma">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.LinkOptions.prec_div">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.LinkOptions.prec_sqrt">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.LinkOptions.ftz">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.LinkOptions.arch">
<summary>
 Target device architecture.
</summary>
</member>
<member name="P:Alea.LinkOptions.opt">
<summary>
 Linkage optimization configuration.
</summary>
</member>
<member name="P:Alea.LinkOptions.generate_line_info">
<summary>
 NVVM linking option for generating line information.
</summary>
</member>
<member name="P:Alea.LinkOptions.g">
<summary>
 NVVM linking option &apos;-g&apos;, for debugging linking.
</summary>
</member>
<member name="P:Alea.LinkOptions.OptionStrings">
<summary>
 Returns an array of linker option strings based on the values of this record&apos;s fields.
</summary>
</member>
<member name="T:Alea.LinkOptions">
<summary>
 Linking options.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkageFMA">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkagePrecDiv">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkagePrecSqrt">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkageFTZ">
<summary>
 NVVM linking option.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkageOpt">
<summary>
 NVVM linking option for optimization level.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkageGenerateLineInfo">
<summary>
 NVVM linking option for generating line information.
</summary>
</member>
<member name="P:Alea.CompileOptions.LinkageG">
<summary>
 NVVM linking option &apos;-g&apos;, for debugging linking.
</summary>
</member>
<member name="P:Alea.CompileOptions.LibDeviceMode">
 <summary>Specify how to use LibDevice. <c>Auto</c> is recommended.</summary>
</member>
<member name="P:Alea.CompileOptions.DiagnosticInfo">
<summary>
 The level of diagnostic information that should be generated.
</summary>
</member>
<member name="P:Alea.CompileOptions.StickToMinimalArch">
<summary>
 Tells the worker to use the minimal arch to load instead of the worker&apos;s arch.
</summary>
</member>
<member name="P:Alea.CompileOptions.MinimalArch">
<summary>
 minimal GPU arch.
</summary>
</member>
<member name="P:Alea.CompileOptions.AddressSize">
<summary>
 Address size for the GPU code.
</summary>
</member>
<member name="P:Alea.CompileOptions.ModuleName">
<summary>
 The module name. If a module is used as library, it _must_ be assigned with a module name.
</summary>
</member>
<member name="P:Alea.CompileOptions.ProfilingConfig">
<summary>
 Creates a profiling-level configuration using the address size of the current process.
</summary>
</member>
<member name="P:Alea.CompileOptions.OptimizedConfig">
<summary>
 Creates an optimized-level configuration using the address size of the current process.
</summary>
</member>
<member name="P:Alea.CompileOptions.NameSeperator">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.CompileOptions.HasModuleName">
<summary>
 Indicates if the module name has been set explicitly.
</summary>
</member>
<member name="P:Alea.CompileOptions.ExtensionKeyIRBitCodeTransform">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CompileOptions.ExtensionKeyCustomCallBuilder">
<summary>
[omit]
</summary>
</member>
<member name="P:Alea.CompileOptions.DiagnosticConfig">
<summary>
 Creates a diagnostic-level configuration using the address size of the current process.
</summary>
</member>
<member name="M:Alea.CompileOptions.Verify">
<summary>
 Verify current options.
</summary>
</member>
<member name="M:Alea.CompileOptions.ToProfilingConfig">
<summary>
 Returns new options specialized for obtaining profiling information.
</summary>
</member>
<member name="M:Alea.CompileOptions.ToFastMathConfig">
<summary>
 Returns new options with CUDA Fast Math turned on.
</summary>
</member>
<member name="M:Alea.CompileOptions.ToDiagnosticConfig">
<summary>
 Returns new options specialized for obtaining diagnostic information. This configuration
 is used for debugging.
</summary>
</member>
<member name="M:Alea.CompileOptions.SetStickToMinimalArch(System.Boolean)">
 <summary>Returns new options with the specified <c>StickToMinmalArch</c> setting.</summary>
</member>
<member name="M:Alea.CompileOptions.SetModuleName(System.String)">
<summary>
 Returns new options with the specified module name.
</summary>
</member>
<member name="M:Alea.CompileOptions.SetMinimalArch(Alea.DeviceArch)">
<summary>
 Returns new options with the specified minimal GPU arch.
</summary>
</member>
<member name="M:Alea.CompileOptions.SetAddressSize(Alea.AddressSize)">
<summary>
 Returns new options with the specified GPU address size.
</summary>
</member>
<member name="M:Alea.CompileOptions.InstallExtensions(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}})">
<summary>
 Install a set of compiler extensions.
</summary>
</member>
<member name="M:Alea.CompileOptions.InstallExtension(System.Tuple{System.String,System.Object})">
<summary>
 Install compiler extension.
</summary>
</member>
<member name="M:Alea.CompileOptions.CreateProfilingConfig(Alea.AddressSize)">
<summary>
 Create a profiling-level configuration using the specified GPU address size.
</summary>
</member>
<member name="M:Alea.CompileOptions.CreateOptimizedConfig(Alea.AddressSize)">
<summary>
 Creates an optimize-level configuration using the specified GPU address size.
</summary>
</member>
<member name="M:Alea.CompileOptions.CreateDiagnosticConfig(Alea.AddressSize)">
<summary>
 Creates a diagnostic-level configuration using the specified GPU address size.
</summary>
</member>
<member name="T:Alea.CompileOptions">
<summary>
 A record used for the specification of various compilation options.
</summary>
</member>
<member name="T:Alea.DiagnosticInfo.NoInfo">
<summary>
 Used in optimized configuration; instructs the compiler to provide no extra information about the source code.
</summary>
</member>
<member name="T:Alea.DiagnosticInfo.LineInfo">
<summary>
 Used in profiling configuration; instructs the compiler to provide line information, a subset of debugging information.
</summary>
</member>
<member name="T:Alea.DiagnosticInfo.DebugInfo">
<summary>
 Used in debug configuration; instructs the compiler to provide all debugging information.
</summary>
</member>
<member name="P:Alea.DiagnosticInfo.NeedLineInfo">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.DiagnosticInfo.NeedDebugInfo">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DiagnosticInfo">
 <summary>
 Used within <c>CompileOptions</c>; provides different modes for diagnostic feedback.
 </summary>
</member>
<member name="T:Alea.JITCacheMode.CA">
<summary>
 Compile with L1 cache enabled.
</summary>
</member>
<member name="T:Alea.JITCacheMode.CG">
<summary>
 Compile with L1 cache disabled.
</summary>
</member>
<member name="T:Alea.JITCacheMode">
<summary>
 CUDA JIT compiling cache mode.
</summary>
</member>
<member name="T:Alea.LibDeviceMode">
<summary>
 LibDevice mode configuration.
</summary>
</member>
<member name="T:Alea.LinkageOpt">
<summary>
 Linkage optimization configuration.
</summary>
</member>
<member name="P:Alea.DeviceArch.WarpThreads">
<summary>
 The number of threads per warp i.e. 32
</summary>
</member>
<member name="P:Alea.DeviceArch.Number">
<summary>
 major * 100 + minor * 10; e.g., 3.5 is represented as 350
</summary>
</member>
<member name="P:Alea.DeviceArch.Minor">
<summary>
 The minor version number of the compute capability e.g., 5 of 3.5
</summary>
</member>
<member name="P:Alea.DeviceArch.Major">
<summary>
 The major version number of the compute capability e.g., 3 of 3.5
</summary>
</member>
<member name="P:Alea.DeviceArch.LogWarpThreads">
<summary>
 Log base 2 of the number of threads per warp i.e. log(32) = 5
</summary>
</member>
<member name="T:Alea.DeviceArch">
<summary>
 A type used to represent information related to a particular cuda compute capability.
</summary>
</member>
<member name="F:Alea.SharedMemConfig.EightBytesBankSize">
<summary>
 Set shared memory bank width to eight bytes.
</summary>
</member>
<member name="F:Alea.SharedMemConfig.FourBytesBankSize">
<summary>
 Set shared memory bank width to four bytes. 
</summary>
</member>
<member name="F:Alea.SharedMemConfig.DefaultBankSize">
<summary>
 Set shared memory bank width to default.
</summary>
</member>
<member name="T:Alea.SharedMemConfig">
<summary>
 Shared memory configuration.
</summary>
</member>
<member name="F:Alea.CacheConfig.PreferEqual">
<summary>
 Prefer equal sized L1 cache and shared memory.
</summary>
</member>
<member name="F:Alea.CacheConfig.PreferL1">
<summary>
 Prefer larger L1 cache and smaller shared memory.
</summary>
</member>
<member name="F:Alea.CacheConfig.PreferShared">
<summary>
 Prefer larger shared memory and smaller L1 cache.
</summary>
</member>
<member name="F:Alea.CacheConfig.PreferNone">
<summary>
 No preference for shared memory or L1.
</summary>
</member>
<member name="T:Alea.CacheConfig">
<summary>
 GPU cache configuration.
</summary>
</member>
<member name="T:Alea.LinkError.Exception">
<summary>
 General error reported by general exception.
</summary>
</member>
<member name="T:Alea.LinkError.Error">
<summary>
 Error with the NVVM result, message, and log.
</summary>
</member>
<member name="T:Alea.LinkError">
<summary>
Linking error union.
</summary>
</member>
<member name="T:Alea.LinkWarning">
<summary>
Linking warning union.
</summary>
</member>
<member name="T:Alea.CompileWarning.SourceInfoUnavailable">
<summary>
 Cannot access source code information; the reason is attached.
</summary>
</member>
<member name="T:Alea.CompileWarning">
<summary>
 A union of various compilation warnings.
</summary>
</member>
<member name="T:Alea.SourceLocation.Quotation">
<summary>
 Source location by quotation location.
</summary>
</member>
<member name="T:Alea.SourceLocation.Description">
<summary>
 Source location by description.
</summary>
</member>
<member name="T:Alea.SourceLocation.NotAvailable">
<summary>
 Source location is not available.
</summary>
</member>
<member name="T:Alea.SourceLocation">
<summary>
 Source location.
</summary>
</member>
<member name="P:Alea.QuotationSourceLocation.FileName">
<summary>
 Returns the name of the source file.
</summary>
</member>
<member name="M:Alea.QuotationSourceLocation.TryGet(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Try to get the source location from an expression.
</summary>
</member>
<member name="T:Alea.QuotationSourceLocation">
<summary>
 Quotation source location.
</summary>
</member>
<member name="T:Alea.FloatingPointKind.Double">
<summary>
 Double precision floating point number.
</summary>
</member>
<member name="T:Alea.FloatingPointKind.Single">
<summary>
 Single precision floating point number.
</summary>
</member>
<member name="T:Alea.FloatingPointKind">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.TypeQualifier.Volatile">
<summary>
 Create volatile qualifier.
</summary>
</member>
<member name="P:Alea.TypeQualifier.Mutable">
<summary>
 Create mutable qualifier.
</summary>
</member>
<member name="P:Alea.TypeQualifier.Description">
 <summary>
 Returns <c>const</c> or <c>volatile</c> depending on mutability and volatility.
 </summary>
</member>
<member name="P:Alea.TypeQualifier.Const">
<summary>
 Create const qualifier.
</summary>
</member>
<member name="T:Alea.TypeQualifier">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.AddressSpace.Local">
<summary>
 Local space.
</summary>
</member>
<member name="T:Alea.AddressSpace.Constant">
<summary>
 Constant space.
</summary>
</member>
<member name="T:Alea.AddressSpace.Shared">
<summary>
 Shared space.
</summary>
</member>
<member name="T:Alea.AddressSpace.Global">
<summary>
 Global space.
</summary>
</member>
<member name="T:Alea.AddressSpace.Generic">
<summary>
 Generic space.
</summary>
</member>
<member name="T:Alea.AddressSpace.Code">
<summary>
 Code space.
</summary>
</member>
<member name="P:Alea.AddressSpace.UInt">
<summary>
 The NVVM unsigned integer number for this address space.
</summary>
</member>
<member name="P:Alea.AddressSpace.Int">
<summary>
 The NVVM integer number for this address space.
</summary>
</member>
<member name="P:Alea.AddressSpace.Description">
<summary>
 Description of this address space.
</summary>
</member>
<member name="M:Alea.AddressSpace.OfUInt32(System.UInt32)">
<summary>
 Convert an unsigned integer to address space.
</summary>
</member>
<member name="T:Alea.AddressSpace">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.MatrixStorageOrder">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DisposableObject">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DeviceFunctionAttribute">
<summary>
 Attribute for device functions.
</summary>
</member>
<member name="T:Alea.PackedAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.AlignAttribute">
<summary>
Attribute used to specify alignment.  You can add this to a struct in order to explicitly declare an alignment.
Valid alignments are: 1, 2, 4, 8 and 16. The specified alignment must be equal to, or greater than the type&apos;s
natural alignment.
</summary>
</member>
<member name="T:Alea.UnionAttribute">
<summary>
 An attribute which can be added to a struct having a 0-offset for all fields; the struct will then be usable within kernels and behave like a union.
</summary>
</member>
<member name="T:Alea.KnownTypesAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.NamespaceDoc">
 <summary>
 Provides types and functions for AleaGPU compiler.
 </summary>
</member>
<member name="T:Alea.IRModuleBuildingContext">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.ModuleInfo">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.IRFunctionBuildingContext">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DIScope">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.IRResourceBuildingContext">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.NameBuilder">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.NameSchema">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.__shared__.Variable``1(``0)">
 <summary>
 Define a variable on shared memory.
 </summary>
 <typeparam name="T">The type of the variable.</typeparam>
 <param name="initValue">The init value of this variable.</param>
 <returns>A variable on shared memory represented by a F# ref type.</returns>
</member>
<member name="M:Alea.__shared__.Variable``1">
 <summary>
 Define a variable on shared memory.
 </summary>
 <typeparam name="T">The type of the variable.</typeparam>
 <returns>A variable on shared memory represented by a F# ref type.</returns>
</member>
<member name="M:Alea.__shared__.ExternArray``1(System.Int32)">
 <summary>
 Declare an array on shared memory allocated externally.
 </summary>
 <typeparam name="T">The element type of the array.</typeparam>
 <param name="alignment">The alignment of this memory, must be a kernel compile-time constant.</param>
 <returns>A array object points to the external shared memory.</returns>
 <remarks>
 The extern shared memory is allocated at kernel launching time, specified by
 the launching parameter.
 </remarks>        
</member>
<member name="M:Alea.__shared__.ExternArray``1">
 <summary>
 Declare an array on shared memory allocated externally.
 </summary>
 <typeparam name="T">The element type of the array.</typeparam>
 <returns>A array object points to the external shared memory.</returns>
 <remarks>
 The extern shared memory is allocated at kernel launching time, specified by
 the launching parameter.
 </remarks>        
</member>
<member name="M:Alea.__shared__.Array2D``1(System.Int32,System.Int32)">
 <summary>
 Define a 2D array on shared memory. The storage order is row major.
 </summary>
 <param name="rows">Rows of the array, must be a kernel compile-time constant.</param>
 <param name="cols">Columns of the array, must be a kernel compile-time constant.</param>
 <typeparam name="T">The element type of the array</typeparam>
 <returns>A compile-time array on shared memory.</returns>
</member>
<member name="M:Alea.__shared__.Array``1(System.Int32,System.Int32)">
 <summary>
 Define an array on shared memory.
 </summary>
 <param name="length">The length of the array, must be a kernel compile-time constant.</param>
 <param name="alignment">The alignment of the array, must be a kernel compile-time constant.</param>
 <typeparam name="T">The element type of the array</typeparam>
 <returns>A compile-time array on shared memory.</returns>
</member>
<member name="M:Alea.__shared__.Array``1(System.Int32)">
 <summary>
 Define an array on shared memory.
 </summary>
 <param name="length">The length of the array, must be a kernel compile-time constant.</param>
 <typeparam name="T">The element type of the array</typeparam>
 <returns>A compile-time array on shared memory.</returns>
</member>
<member name="T:Alea.__shared__">
 <summary>
 Provides methods to manage shared memory in kernel.
 </summary>
</member>
<member name="M:Alea.__local__.Variable``1(``0)">
 <summary>
 Define a variable on kernel local memory.
 </summary>
 <param name="initValue">The initial value of this variable.</param>
 <typeparam name="T">The type of the variable.</typeparam>
 <returns>A variable on kernel local memory represented by a F# ref type.</returns>
</member>
<member name="M:Alea.__local__.Variable``1">
 <summary>
 Define a variable on kernel local memory.
 </summary>
 <typeparam name="T">The type of the variable.</typeparam>
 <returns>A variable on kernel local memory represented by a F# ref type.</returns>
</member>
<member name="M:Alea.__local__.Array2D``1(System.Int32,System.Int32)">
 <summary>
 Define a 2D array on kernel local memory. The storage order is row major.
 </summary>
 <param name="rows">Rows of the array, must be a kernel compile-time constant.</param>
 <param name="cols">Columns of the array, must be a kernel compile-time constant.</param>
 <typeparam name="T">The element type of the array.</typeparam>
 <returns>A compile-time 2D array on kernel local memory</returns>
</member>
<member name="M:Alea.__local__.Array``1(System.Int32,System.Int32)">
 <summary>
 Define an array on kernel local memory with speccified alignment.
 </summary>
 <param name="length">The length of the array, must be a kernel compile-time constant.</param>
 <param name="alignment">The alignment of the array, must be a kernel compile-time constant.</param>
 <typeparam name="T">The element type of the array.</typeparam>
 <returns>A compile-time array on kernel local memory</returns>
</member>
<member name="M:Alea.__local__.Array``1(System.Int32)">
 <summary>
 Define an array on kernel local memory.
 </summary>
 <param name="length">The length of the array, must be a kernel compile-time constant.</param>
 <typeparam name="T">The element type of the array.</typeparam>
 <returns>A compile-time array on kernel local memory</returns>
</member>
<member name="T:Alea.__local__">
 <summary>
 Provides methods to manage local memory in kernel.
 </summary>
</member>
<member name="P:Alea.volatile_deviceptr`1.Item(System.Int32,`0)">
 <summary>
 Sets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.op_Subtraction(Alea.volatile_deviceptr{`0},Alea.volatile_deviceptr{`0})">
<summary>
Returns the difference between two pointers.
</summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.op_Subtraction(Alea.volatile_deviceptr{`0},System.Int32)">
 <summary>
 Decreases pointer index by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.op_Addition(Alea.volatile_deviceptr{`0},System.Int32)">
 <summary>
 Advances pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="P:Alea.volatile_deviceptr`1.Item(System.Int32)">
 <summary>
 Gets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.Set(System.Int32,`0)">
 <summary>
 Sets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.Ref(System.Int32)">
 <summary>
 Gets an F# <c><![CDATA[Ref<'T>]]></c> object by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.Ptr(System.Int32)">
 <summary>
 Advances pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.LongSet(System.Int64,`0)">
 <summary>
 Sets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.LongRef(System.Int64)">
 <summary>
 Gets an F# <c><![CDATA[Ref<'T>]]></c> object by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.LongPtr(System.Int64)">
 <summary>
 Advances pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.LongGet(System.Int64)">
 <summary>
 Gets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.volatile_deviceptr`1.Get(System.Int32)">
 <summary>
 Gets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="T:Alea.volatile_deviceptr`1">
 <summary>
 A struct representing a volatile device pointer.
 </summary>
 <typeparam name="T">The pointee type</typeparam>
</member>
<member name="P:Alea.deviceptr`1.Item(System.Int32,`0)">
 <summary>
 Sets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.op_Subtraction(Alea.deviceptr{`0},Alea.deviceptr{`0})">
<summary>
Returns the difference between two pointers.
</summary>
</member>
<member name="M:Alea.deviceptr`1.op_Subtraction(Alea.deviceptr{`0},System.Int32)">
 <summary>
 Decreases pointer index by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.op_Addition(Alea.deviceptr{`0},System.Int32)">
 <summary>
 Advances pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="P:Alea.deviceptr`1.Item(System.Int32)">
 <summary>
 Gets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.VolatileSet(`0)">
<summary>
Sets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.VolatileSet(System.Int32,`0)">
<summary>
Sets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.VolatileLongSet(System.Int64,`0)">
<summary>
Sets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.VolatileLongGet(System.Int64)">
<summary>
Gets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.VolatileGet(System.Int32)">
<summary>
Gets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.VolatileDereference">
<summary>
Gets data by turning this pointer into a volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.Volatile">
<summary>
Returns a new pointer with same value but qualified as volatile pointer.
</summary>
</member>
<member name="M:Alea.deviceptr`1.Set(System.Int32,`0)">
 <summary>
 Sets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.Reinterpret``1">
 <summary>
 Reinterprets pointer to another pointee type <c>'U</c>.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.Ref(System.Int32)">
 <summary>
 Gets an F# <c><![CDATA[Ref<'T>]]></c> object by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.Ptr(System.Int32)">
 <summary>
 Advances pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.LongSet(System.Int64,`0)">
 <summary>
 Sets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.LongRef(System.Int64)">
 <summary>
 Gets an F# <c><![CDATA[Ref<'T>]]></c> object by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.LongPtr(System.Int64)">
 <summary>
 Advances pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.LongGet(System.Int64)">
 <summary>
 Gets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.deviceptr`1.Get(System.Int32)">
 <summary>
 Gets pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="T:Alea.deviceptr`1">
 <summary>
 A struct representing a device pointer.
 </summary>
 <typeparam name="T">The pointee type</typeparam>
</member>
<member name="P:Alea.gridDim.z">
 <summary>Gets the <c>z</c> dimension of grid.</summary>
</member>
<member name="P:Alea.gridDim.y">
 <summary>Gets the <c>y</c> dimension of grid.</summary>
</member>
<member name="P:Alea.gridDim.x">
 <summary>Gets the <c>x</c> dimension of grid.</summary>
</member>
<member name="T:Alea.gridDim">
<summary>
Built-in property of grid dimension. Can only be called from within a kernel.
</summary>
</member>
<member name="P:Alea.blockIdx.z">
 <summary>Gets the <c>z</c> index of current block.</summary>
</member>
<member name="P:Alea.blockIdx.y">
 <summary>Gets the <c>y</c> index of current block.</summary>
</member>
<member name="P:Alea.blockIdx.x">
 <summary>Gets the <c>x</c> index of current block.</summary>
</member>
<member name="T:Alea.blockIdx">
<summary>
Built-in property of block index. Can only be called from within a kernel.
</summary>
</member>
<member name="P:Alea.blockDim.z">
 <summary>Gets the <c>z</c> dimension of block.</summary>
</member>
<member name="P:Alea.blockDim.y">
 <summary>Gets the <c>y</c> dimension of block.</summary>
</member>
<member name="P:Alea.blockDim.x">
 <summary>Gets the <c>x</c> dimension of block.</summary>
</member>
<member name="T:Alea.blockDim">
<summary>
Built-in property of block dimension. Can only be called from within a kernel.
</summary>
</member>
<member name="P:Alea.threadIdx.z">
 <summary>Gets the <c>z</c> index of current thread.</summary>
</member>
<member name="P:Alea.threadIdx.y">
 <summary>Gets the <c>y</c> index of current thread.</summary>
</member>
<member name="P:Alea.threadIdx.x">
 <summary>Gets the <c>x</c> index of current thread.</summary>
</member>
<member name="T:Alea.threadIdx">
<summary>
Built-in property of thread index. Can only be called from within a kernel.
</summary>
</member>
<member name="P:Alea.FunctionSymbol`1.Invoke">
<summary>
 Invoke the device function in a kernel quotation.
</summary>
</member>
<member name="T:Alea.FunctionSymbol`1">
<summary>
 A typed kernel compile time symbol for a device function.
</summary>
</member>
<member name="P:Alea.Compiler.DefaultCompileOptions(Alea.CompileOptions)">
<summary>
 Gets the default compilation options using the bitness of the current process as the address size.
</summary>
</member>
<member name="P:Alea.Compiler.DefaultCompileOptions">
<summary>
 Gets the default compilation options using the bitness of the current process as the address size.
</summary>
</member>
<member name="M:Alea.Compiler.Link``1(Alea.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.IRModule},Alea.LinkOptions)">
<summary>
 Links an IR module and libraries (a list of IR modules) to a PTX module using the specified linking options.
</summary>
</member>
<member name="M:Alea.Compiler.Link``1(Alea.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.IRModule},Alea.DeviceArch)">
<summary>
 Links an IR module and _libraries_ (a list of IR modules) to a PTX module using the specified device arch.
</summary>
</member>
<member name="M:Alea.Compiler.Link``1(Alea.IRModule{``0},Microsoft.FSharp.Collections.FSharpList{Alea.IRModule})">
<summary>
 Links an IR module and _libraries_ (a list of IR modules) to a PTX module.
</summary>
</member>
<member name="M:Alea.Compiler.Link``1(Alea.IRModule{``0},Alea.LinkOptions)">
<summary>
 Links an IR module to a PTX module using the specified linking options.
</summary>
</member>
<member name="M:Alea.Compiler.Link``1(Alea.IRModule{``0},Alea.DeviceArch)">
<summary>
 Links an IR module to a PTX module using the specified device arch.
</summary>
</member>
<member name="M:Alea.Compiler.Link``1(Alea.IRModule{``0})">
<summary>
 Links an IR module to a PTX module; the linking options are generated using the compilation options of the IR module.
</summary>
</member>
<member name="M:Alea.Compiler.DefineKernel``1(Microsoft.FSharp.Quotations.FSharpExpr{``0},System.String)">
<summary>
 A work flow statement used to define a kernel function.
</summary>
</member>
<member name="M:Alea.Compiler.DefineKernel``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A work flow statement used to define a kernel function.
</summary>
</member>
<member name="M:Alea.Compiler.DefineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0},System.Boolean)">
<summary>
 A wor kflow statement used to define a device function.
</summary>
</member>
<member name="M:Alea.Compiler.DefineFunction``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 A work flow statement used to define a device function.
</summary>
</member>
<member name="M:Alea.Compiler.DefineConstantVariable``1(``0)">
<summary>
 A work flow statement used to define a constant variable.
</summary>
</member>
<member name="M:Alea.Compiler.DefineConstantVariable``1">
<summary>
 A work flow statement used to define a constant variable.
</summary>
</member>
<member name="M:Alea.Compiler.DefineConstantArray``1(System.Int32)">
<summary>
 A work flow statement used to define a constant array.
</summary>
</member>
<member name="M:Alea.Compiler.Compile``1(Alea.Template{``0},Alea.CompileOptions)">
<summary>
 Compiles the template using the specified compilation options.
</summary>
</member>
<member name="M:Alea.Compiler.Compile``1(Alea.Template{``0})">
<summary>
 Compiles the template using the default compilation options for release.
</summary>
</member>
<member name="T:Alea.Compiler">
<summary>
 A utility type provides the compiling and linking service(s) via its static methods.
</summary>
</member>
<member name="T:Alea.LinkResult`1.Failure">
<summary>
 Linking has failed; the linking error is attached.
</summary>
</member>
<member name="T:Alea.LinkResult`1.Success">
<summary>
 Linking has succeeded; the <c><![CDATA[PTXModule<'T>]]></c> and logs are attached.
</summary>
</member>
<member name="P:Alea.LinkResult`1.Succeeded">
<summary>
 Returns true if this linking succeeded; false otherwise
</summary>
</member>
<member name="P:Alea.LinkResult`1.PTXModule">
<summary>
 Get the resulting <c><![CDATA[PTXModule<'T>]]></c> from this property if the linking succeeded
</summary>
</member>
<member name="P:Alea.LinkResult`1.Log">
<summary>
 Get the log for this linking if one was generated.
</summary>
</member>
<member name="P:Alea.LinkResult`1.HasLog">
<summary>
 Returns true if the linking generated a log.
</summary>
</member>
<member name="P:Alea.LinkResult`1.HasError">
<summary>
 Returns true if the linking had an error.
</summary>
</member>
<member name="P:Alea.LinkResult`1.Failed">
<summary>
 Returns true if this linking failed; false otherwise
</summary>
</member>
<member name="P:Alea.LinkResult`1.Error">
<summary>
 Get the error with this property if the linking failed.
</summary>
</member>
<member name="T:Alea.LinkResult`1">
<summary>
 Linking result of <c><![CDATA[IRModule<'T>]]></c>.
</summary>
</member>
<member name="T:Alea.CompileResult`1.Failure">
<summary>
Compilation failed; the source location, compile error, and exception are attached.
</summary>
</member>
<member name="T:Alea.CompileResult`1.Success">
<summary>
Compilation succeeded; the <c><![CDATA[IRModule<'T>]]></c>, compiler warnings, and the source locations of the compiler warnings are attached.
</summary>
</member>
<member name="P:Alea.CompileResult`1.Warnings">
<summary>
Get the compilation warnings.
</summary>
</member>
<member name="P:Alea.CompileResult`1.Succeeded">
<summary>
Returns true if the compilation has succeeded; false otherwise.
</summary>
</member>
<member name="P:Alea.CompileResult`1.IRModule">
<summary>
Get the resulting <c>IRModule</c> of a successful compilation.
</summary>
</member>
<member name="P:Alea.CompileResult`1.HasWarning">
<summary>
Returns true if there are any compilation warnings.
</summary>
</member>
<member name="P:Alea.CompileResult`1.HasError">
<summary>
Returns true if there are any compilation errors.
</summary>
</member>
<member name="P:Alea.CompileResult`1.Failed">
<summary>
Returns true if the compilation has failed; false otherwise.
</summary>
</member>
<member name="P:Alea.CompileResult`1.Error">
<summary>
Get the source location and error from a failed compilation; returns a tuple of type <c>SourceLocation * CompileError</c>. 
</summary>
</member>
<member name="T:Alea.CompileResult`1">
<summary>
A union representing the compilation result of a `Template&lt;&apos;T&gt;`.
</summary>
</member>
<member name="M:Alea.BuilderRegistry.Register(System.Collections.Generic.IEnumerable{Alea.CustomBuilder})">
<summary>
Register a list of custom builders.
</summary>
</member>
<member name="M:Alea.BuilderRegistry.Initialize">
<summary>
Make sure the registry is started and basic builders are registered.
</summary>
</member>
<member name="T:Alea.BuilderRegistry">
<summary>
Builder registry, used to register new builders.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomNewObjectBuilder">
<summary>
Custom new object expression builder by a <c>ConstructorInfo</c> as key and a <c>ICustomNewObjectBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomPropertySetBuilder">
<summary>
Custom property set expression builder by a <c>PropertyInfo</c> as key and a <c>ICustomPropertySetBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomPropertyGetBuilder">
<summary>
Custom property get expression builder by a <c>PropertyInfo</c> as key and a <c>ICustomPropertyGetBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomFieldSetBuilder">
<summary>
Custom field set expression builder by a <c>FieldInfo</c> as key and a <c>ICustomFieldSetBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomFieldGetBuilder">
<summary>
Custom field get expression builder by a <c>FieldInfo</c> as key and a <c>ICustomFieldGetBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomCallBuilder">
<summary>
Custom call expression builder by a <c>MethodInfo</c> as key and a <c>ICustomCallBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomConstantBuilder">
<summary>
Custom constant expression builder by a <c>Type</c> as key and a <c>ICustomConstantBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder.CustomTypeBuilder">
<summary>
Custom type builder by a <c>Type</c> as key and a <c>ICustomTypeBuilder</c>.
</summary>
</member>
<member name="T:Alea.CustomBuilder">
<summary>
A union of different custom builders; used with the builder registry.
</summary>
</member>
<member name="T:Alea.Template`1">
 <summary>
 A template represents a resource defined in the module.
 </summary>
 <typeparam name="T">The resource type</typeparam>
</member>
<member name="P:Alea.PTXModule`1.Entry">
<summary>
 The entry point.
</summary>
</member>
<member name="T:Alea.PTXModule`1">
 <summary>
 Typed PTX module.
 </summary>
 <typeparam name="T">The type of the entry point of this module.</typeparam>
</member>
<member name="P:Alea.PTXModule.LinkOptions">
<summary>
 The linking options that are used to generate this module.
</summary>
</member>
<member name="P:Alea.PTXModule.CompileOptions">
<summary>
 The compiling options that are used to generate this module.
</summary>
</member>
<member name="P:Alea.PTXModule.Bitcode">
<summary>
 The bitcode of this module.
</summary>
</member>
<member name="M:Alea.PTXModule.Dump">
<summary>
 Dump this module.
</summary>
</member>
<member name="T:Alea.PTXModule">
<summary>
 Untyped PTX Module.
</summary>
</member>
<member name="P:Alea.IRModule`1.Untype">
<summary>
 Casts this object into untyped module.
</summary>
</member>
<member name="P:Alea.IRModule`1.Entry">
<summary>
 The entry point.
</summary>
</member>
<member name="T:Alea.IRModule`1">
 <summary>
 Typed IR module.
 </summary>
 <typeparam name="T">The type of the entry point of this module.</typeparam>
</member>
<member name="P:Alea.IRModule.CompileOptions">
<summary>
 The compiling options that are used to generate this module.
</summary>
</member>
<member name="P:Alea.IRModule.Bitcode">
<summary>
 The bitcode of this module.
</summary>
</member>
<member name="M:Alea.IRModule.Dump">
<summary>
 Dump this module.
</summary>
</member>
<member name="M:Alea.IRModule.#ctor(Alea.ModuleInfo,Alea.CompileOptions,System.Byte[])">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.IRModule">
 <summary>
 Untyped IR module.
 </summary>
</member>
<member name="M:Alea.MarshalerRegistry.Register(System.Collections.Generic.IEnumerable{Alea.CustomMarshaler})">
<summary>
Register a list of custom builders 
</summary>
</member>
<member name="M:Alea.MarshalerRegistry.Initialize">
<summary>
Make sure the registry is started and basic builders are registered.
</summary>
</member>
<member name="T:Alea.MarshalerRegistry">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.CustomMarshaler.CustomOfUnmanagedMarshaler">
<summary>
 Custom of unmanaged marshaler by a &lt;c&gt;Type&lt;/c&gt; as key and a &lt;c&gt;ICustomOfUnmanagedMarshaler&lt;/c&gt;.
</summary>
</member>
<member name="T:Alea.CustomMarshaler.CustomToUnmanagedMarshaler">
<summary>
 Custom to unmanaged marshaler by a &lt;c&gt;Type&lt;/c&gt; as key and a &lt;c&gt;ICustomToUnmanagedMarshaler&lt;/c&gt;.
</summary>
</member>
<member name="P:Alea.Gpu.PrintBufferSize(System.IntPtr)">
<summary>
 Set or get the print buffer size.
</summary>
</member>
<member name="P:Alea.Gpu.PrintBufferSize">
<summary>
 Set or get the print buffer size.
</summary>
</member>
<member name="P:Alea.Gpu.Device">
<summary>
 Return the device object.
</summary>
</member>
<member name="P:Alea.Gpu.DefaultCompileOptions">
<summary>
 The default compilation options for this worker.
</summary>
</member>
<member name="P:Alea.Gpu.Default">
 <summary>
 Get the GPU instance on default GPU device. The default GPU device is defined
 as the most powerful (by means of GPU architecture and CUDA cores) consumer GPU,
 if there is no consumer GPU found, then returns the most powerful GPU.
 </summary>
</member>
<member name="P:Alea.Gpu.Context">
<summary>
 Returns the context object.
</summary>
</member>
<member name="M:Alea.Gpu.Synchronize">
<summary>
 Synchronize the underlying thread on its CUDA context.
</summary>
</member>
<member name="M:Alea.Gpu.SizeOf``1">
 <summary>
 Get the size of a type.
 </summary>
 <remarks>
 The size of a type in GPU might be different than in .NET. Blittable types has same size.
 </remarks>
</member>
<member name="M:Alea.Gpu.Shutdown">
 <summary>
 Dispose all GPU instances, force a system cleanup.
 </summary>
</member>
<member name="M:Alea.Gpu.Run``1(Alea.IGpuWorkflow{``0})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.Gpu.Run``1(Alea.IGpuWorkflow{``0},Alea.SessionOptions)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.Gpu.ProfilerStop">
 <summary>
 Stop regional profiling on this GPU. Used together with profiler.
 </summary>
</member>
<member name="M:Alea.Gpu.ProfilerStart">
 <summary>
 Start regional profiling on this GPU. Used together with profiler.
 </summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.Template{Alea.Entry{``0}},Alea.CompileOptions,Microsoft.FSharp.Collections.FSharpList{Alea.IRModule})">
<summary>
Load a disposable program from template and libraries with specified compiling options.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.Template{Alea.Entry{``0}},Microsoft.FSharp.Collections.FSharpList{Alea.IRModule})">
<summary>
Load a disposable program from template and libraries.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.Template{Alea.Entry{``0}},Alea.CompileOptions)">
<summary>
Load a disposable program from a template using the specified compiling options.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.Template{Alea.Entry{``0}})">
<summary>
Load a disposable program from a template.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.IRModule{Alea.Entry{``0}},Microsoft.FSharp.Collections.FSharpList{Alea.IRModule})">
<summary>
Load a disposable program from an IR module and libraries.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.IRModule{Alea.Entry{``0}})">
<summary>
Load a disposable program from an IR module.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.PTXModule{Alea.Entry{``0}})">
<summary>
Load a disposable program from a PTX module.
</summary>
</member>
<member name="M:Alea.Gpu.LoadProgram``1(Alea.PTXModule{Alea.Entry{``0}},Alea.JITOptions)">
<summary>
Load a disposable program from a PTX module using the specified JIT compiling options.
</summary>
</member>
<member name="M:Alea.Gpu.Load(System.Reflection.MethodInfo)">
 <summary>
 JIT compile and load a kernel.
 </summary>
 <param name="kernelMethodInfo">The method info of the kernel.</param>
</member>
<member name="M:Alea.Gpu.Load(System.Reflection.MethodInfo,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Collections.FSharpList{System.Object})">
 <summary>
 JIT compile and load a kernel.
 </summary>
 <param name="kernelMethodInfo">The method info of the kernel.</param>
 <param name="instanceOpt">Instance of the method, if it is an instance method.</param>
 <param name="arguments">The arguments for this kernel invokation.</param>
</member>
<member name="M:Alea.Gpu.GetOrLoad(System.Reflection.MethodInfo)">
 <summary>
 JIT compile and load a kernel.
 </summary>
 <param name="kernelMethodInfo">The method info of the kernel.</param>
</member>
<member name="M:Alea.Gpu.GetOrLoad(System.Reflection.MethodInfo,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Collections.FSharpList{System.Object})">
 <summary>
 JIT compile and load a kernel.
 </summary>
 <param name="kernelMethodInfo">The method info of the kernel.</param>
 <param name="instanceOpt">Instance of the method, if it is an instance method.</param>
 <param name="arguments">The arguments for this kernel invokation.</param>
</member>
<member name="M:Alea.Gpu.Get(Alea.Device)">
 <summary>
 Get a GPU instance.
 </summary>
 <param name="device">The device object of the GPU device.</param>
</member>
<member name="M:Alea.Gpu.Get(System.Int32)">
 <summary>
 Get a GPU instance.
 </summary>
 <param name="deviceId">The deviceId of the GPU device.</param>
</member>
<member name="M:Alea.Gpu.FreeAllImplicitMemory(System.Boolean)">
 <summary>
 Free all implicit tracked memory.
 </summary>
 <param name="waitForGC">Flag to force a GC collection and wait it to be finished.</param>
</member>
<member name="M:Alea.Gpu.EvalFunc``1(System.Func{``0})">
 <summary>
 Evaluate a <c>Func</c> delegate using this worker's thread.
 </summary>
</member>
<member name="M:Alea.Gpu.EvalAction(System.Action)">
 <summary>
 Evaluate an <c>Action</c> delegate using this worker's thread.
 </summary>
</member>
<member name="M:Alea.Gpu.Eval``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Evaluate a value using this worker&apos;s thread.
</summary>
</member>
<member name="M:Alea.Gpu.EntryOf``1(Alea.Template{Alea.Entry{``0}})">
 <summary>
 Get the entry point of a GPU module template. The template will be JIT compiled and loaded
 and cached.
 </summary>
 <param name="template">The GPU module template to be loaded.</param>
</member>
<member name="M:Alea.Gpu.CreateStream">
 <summary>
 Create a CUDA stream object from this GPU instance.
 </summary>
</member>
<member name="M:Alea.Gpu.CreateEvent">
 <summary>
 Create a CUDA event object from this GPU instance.
 </summary>
</member>
<member name="M:Alea.Gpu.Copy``1(System.Array,System.Int64,Alea.Gpu,Alea.deviceptr{``0},System.Int64)">
 <summary>
 Copy memory from array to pointer.
 </summary>
 <param name="src">The source array.</param>
 <param name="srcOffset">The index of the first element to be copied in the source array.</param>
 <param name="dstGpu">The GPU which the destination pointer belongs to.</param>
 <param name="dst">The destination pointer.</param>
 <param name="length">The number of element to be copied.</param>
</member>
<member name="M:Alea.Gpu.Copy``1(Alea.Gpu,Alea.deviceptr{``0},Alea.Gpu,Alea.deviceptr{``0},System.Int64)">
 <summary>
 Copy memory from pointer to pointer.
 </summary>
 <param name="srcGpu">The GPU which the source pointer belongs to.</param>
 <param name="src">The source pointer.</param>
 <param name="dstGpu">The GPU which the destination pointer belongs to.</param>
 <param name="dst">The destination pointer.</param>
 <param name="length">The number of element to be copied.</param>
</member>
<member name="M:Alea.Gpu.Constant``1(``0)">
 <summary>
 Create a constant object to wrap a compile-time constant value.
 This is useful in C# meta-programming.
 </summary>
 <param name="value"></param>
</member>
<member name="M:Alea.Gpu.AllocateUnified``1(``0[])">
 <summary>
 Allocate Unified GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocateUnified``1(System.Int32)">
 <summary>
 Allocate Unified GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocateUnified``1(System.Int64)">
 <summary>
 Allocate Unified GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocateUnified``1(System.IntPtr)">
 <summary>
 Allocate Unified GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocatePinned``1(``0[])">
 <summary>
 Allocate host page-locked memory and copy host data to it.
 </summary>
 <param name="array">The initial values.</param>
 <typeparam name="T">The element type.</typeparam>
 <remarks>
 Host page-locked memory is fast to be transfered to GPU since its address is locked.
 </remarks>
</member>
<member name="M:Alea.Gpu.AllocatePinned``1(System.Int32)">
 <summary>
 Allocate host page-locked memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
 <remarks>
 Host page-locked memory is fast to be transfered to GPU since its address is locked.
 </remarks>
</member>
<member name="M:Alea.Gpu.AllocatePinned``1(System.Int64)">
 <summary>
 Allocate host page-locked memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
 <remarks>
 Host page-locked memory is fast to be transfered to GPU since its address is locked.
 </remarks>
</member>
<member name="M:Alea.Gpu.AllocatePinned``1(System.IntPtr)">
 <summary>
 Allocate host page-locked memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
 <remarks>
 Host page-locked memory is fast to be transfered to GPU since its address is locked.
 </remarks>
</member>
<member name="M:Alea.Gpu.AllocateDevice``1(``0[])">
 <summary>
 Allocate GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocateDevice``1(System.Int32)">
 <summary>
 Allocate GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocateDevice``1(System.Int64)">
 <summary>
 Allocate GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AllocateDevice``1(System.IntPtr)">
 <summary>
 Allocate GPU memory.
 </summary>
 <param name="length">The number of elements.</param>
 <typeparam name="T">The element type.</typeparam>
</member>
<member name="M:Alea.Gpu.AlignOf``1">
 <summary>
 Get the alignment of a type.
 </summary>
 <remarks>
 The alignment of a type in GPU might be different than in .NET.
 </remarks>
</member>
<member name="T:Alea.Gpu">
 <summary>
 Gpu instance represents a GPU device. It wraps a GPU context, on which you
 can create streams, events, and do memory copy. To get a GPU instance, use
 static <c>Get</c> method.
 </summary>
</member>
<member name="P:Alea.Program`1.Run">
<summary>
 This is the entry point of your program.
</summary>
</member>
<member name="T:Alea.Program`1">
 <summary>
 Typed runtime program, inherited from untyped <c>Program</c>.
 </summary>
</member>
<member name="P:Alea.Entry`1.Main">
 <summary>
 Returns a function of type <c><![CDATA[Program -> 'T]]></c>.
 </summary>
</member>
<member name="M:Alea.Entry`1.Apply(Alea.Program)">
<summary>
 Applies the function returned by the Main property to the specified program.
</summary>
</member>
<member name="T:Alea.Entry`1">
 <summary>
 A host resource for a template. A template must return this kind of host resource to enable it
 to be loaded into a program.
 </summary>
</member>
<member name="P:Alea.Program.Handle">
<summary>
 CUDA native handle of this program.
</summary>
</member>
<member name="P:Alea.Program.Context">
<summary>
 The context that created this stream.
</summary>
</member>
<member name="T:Alea.Program">
 <summary>
 Untyped program runtime. A program is a runtime representation of <c>PTXModule</c>, it holds all
 runtime resources, and implements <c>IDisposable</c> interface.
 </summary>
 <remarks>
 An instance of a <c>Program</c> type:

<list type="bullet">
  <item>
    <description>represents a JIT compiled module</description>
  </item>
  <item>
    <description>has a host entry point function</description>
  </item>
  <item>
    <description>is loaded by a worker</description>
  </item>
  <item>
    <description>has untyped and generic versions</description>
  </item>
</list>

 After loading a program, the generated program will be cast to its untyped version and then fed to the template's entry
 point host function as the first argument.
</remarks>
</member>
<member name="P:Alea.Kernel.Symbol">
<summary>
 The kernel compile time symbol of this kernel function.
</summary>
</member>
<member name="P:Alea.Kernel.Handle">
<summary>
 CUDA native handle of this kernel function.
</summary>
</member>
<member name="M:Alea.Kernel.LaunchRaw(Alea.LaunchParam,Microsoft.FSharp.Core.FSharpOption{System.Object},Microsoft.FSharp.Collections.FSharpList{System.Object})">
 <summary>
 A raw launching method by sending parameters as <c>obj list</c>.
 </summary>
</member>
<member name="T:Alea.Kernel">
 <summary>
 Untyped kernel runtime. This type implements the <c>IDisposable</c> interface to hold an unmanaged buffer for
 parameters allowing you to control its lifetime via calling its <c>Dispose()</c> method and/or using the <c>use</c> keyword.
 </summary>
</member>
<member name="P:Alea.LaunchParam.StreamHandle">
 <summary>
 CUDA native handle of the stream, <c>0n</c> represents the default stream.
 </summary>
</member>
<member name="P:Alea.LaunchParam.Stream">
 <summary>
 On which stream the launching will be applied. <c>None</c> represents the default stream.
 </summary>
</member>
<member name="P:Alea.LaunchParam.SharedMemorySize">
<summary>
 Dynamic shared memory size in bytes.
</summary>
</member>
<member name="P:Alea.LaunchParam.IsDefaultStream">
<summary>
 Indicate if it is launched in the default stream.
</summary>
</member>
<member name="P:Alea.LaunchParam.GridDim">
<summary>
 Grid dimensions.
</summary>
</member>
<member name="P:Alea.LaunchParam.BlockDim">
<summary>
 Block dimensions.
</summary>
</member>
<member name="M:Alea.LaunchParam.WithStream(Alea.Stream)">
 <summary>
Creates a new <c>LaunchParam</c> with specified stream.
 </summary>
</member>
<member name="M:Alea.LaunchParam.WithSharedMemorySize(System.Int32)">
 <summary>
Creates a new <c>LaunchParam</c> with specified dynamic shared memory size.
 </summary>
</member>
<member name="M:Alea.LaunchParam.#ctor(System.Int32,System.Int32,System.Int32,Alea.Stream)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory, and a specified stream.
</summary>
</member>
<member name="M:Alea.LaunchParam.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory.
</summary>
</member>
<member name="M:Alea.LaunchParam.#ctor(System.Int32,System.Int32)">
<summary>
 Create launching parameters with only specified grid and block dimensions.
</summary>
</member>
<member name="M:Alea.LaunchParam.#ctor(Alea.dim3,Alea.dim3,System.Int32,Alea.Stream)">
<summary>
 Create launching parameters with specified grid and block dimensions, and a dynamic allocated shared memory, and a specified stream.
</summary>
</member>
<member name="M:Alea.LaunchParam.#ctor(Alea.dim3,Alea.dim3,System.Int32)">
<summary>
 Create launching parameters using the provided grid and block dimensions, and a dynamically allocated shared memory.
</summary>
</member>
<member name="M:Alea.LaunchParam.#ctor(Alea.dim3,Alea.dim3)">
<summary>
 Create launching parameters using the provided grid and block dimensions.
</summary>
</member>
<member name="T:Alea.LaunchParam">
<summary>
 Kernel launching parameters.
</summary>
</member>
<member name="P:Alea.GlobalArray`1.Ptr">
<summary>
The device pointer of this global array.
</summary>
</member>
<member name="T:Alea.GlobalArray`1">
 <summary>
 Typed runtime resource of global array. Inherited from untyped <c>GlobalArray</c>.
 </summary>
</member>
<member name="P:Alea.GlobalArray.Symbol">
<summary>
 The resource of this array
</summary>
</member>
<member name="P:Alea.GlobalArray.Length">
<summary>
 The length of this array
</summary>
</member>
<member name="P:Alea.GlobalArray.Handle">
<summary>
The CUDA native handle of this global array.
</summary>
</member>
<member name="T:Alea.GlobalArray">
<summary>
 Untyped runtime resource of global array. Also called symbol in CUDA context.
</summary>
</member>
<member name="P:Alea.GlobalVariable`1.Ptr">
<summary>
The device pointer of this global variable.
</summary>
</member>
<member name="T:Alea.GlobalVariable`1">
 <summary>
 Typed runtime resource of global variable. Inherited from untyped <c>GlobalVariable</c>.
 </summary>
</member>
<member name="P:Alea.GlobalVariable.Symbol">
<summary>
The resource of this variable
</summary>
</member>
<member name="P:Alea.GlobalVariable.Handle">
<summary>
The CUDA native handle of this global variable.
</summary>
</member>
<member name="T:Alea.GlobalVariable">
<summary>
 Untyped runtime entity of global variable. Also called symbol in CUDA context.
</summary>
</member>
<member name="T:Alea.Entity">
 <summary>
 Base type for all runtime entities extracted from a program.
 </summary>
</member>
<member name="M:Alea.Event.Synchronize">
<summary>
 Synchronize event.
</summary>
</member>
<member name="M:Alea.Event.Record">
<summary>
 Record event on stream 0n.
</summary>
</member>
<member name="M:Alea.Event.Record(Alea.Stream)">
<summary>
 Record event.
</summary>
</member>
<member name="M:Alea.Event.ElapsedMilliseconds(Alea.Event,Alea.Event)">
<summary>
 Get the elapsed time, in milliseconds, between two events.
</summary>
</member>
<member name="T:Alea.Event">
 <summary>
 A wrapper for a CUDA event object. This type implements the <c>IDisposable</c> interface.
 </summary>
</member>
<member name="M:Alea.Stream.Synchronize">
<summary>
Synchronize this stream.
</summary>
</member>
<member name="T:Alea.Stream">
 <summary>   
 A wrapper for a CUDA stream object. This type implements the <c>IDisposable</c> interface.
 </summary>
</member>
<member name="T:Alea.MemoryLayout.LayoutND">
<summary>
N-dimensional memory layout where pitch equals the number of bytes to advance to next dimension.
</summary>
</member>
<member name="T:Alea.MemoryLayout.Layout2D">
<summary>
Two dimensional memory layout of a &lt;c&gt;height&lt;/c&gt; rows and &lt;c&gt;width&lt;/c&gt; columns where pitch equals the number of bytes to advance to next row.
</summary>
</member>
<member name="T:Alea.Context">
 <summary>
 Represents a CUDA context for a given CUDA device.
 </summary>
</member>
<member name="P:Alea.Device.Type">
<summary>
The device type, if known
</summary>
</member>
<member name="P:Alea.Device.TotalMemory">
<summary>
Total device memory size.
</summary>
</member>
<member name="P:Alea.Device.Properties">
<summary>
Properties of this device.
</summary>
</member>
<member name="P:Alea.Device.Name">
<summary>
The device name.
</summary>
</member>
<member name="P:Alea.Device.Id">
<summary>
The zero-based integer id of this device in the system.
</summary>
</member>
<member name="P:Alea.Device.Devices">
<summary>
Array of all valid devices    
</summary>
</member>
<member name="P:Alea.Device.Default">
<summary>
Get the default device.
</summary>
</member>
<member name="P:Alea.Device.Cores">
<summary>
Total number of cuda cores.
</summary>
</member>
<member name="P:Alea.Device.Attributes">
<summary>
Attributes of this device.
</summary>
</member>
<member name="P:Alea.Device.Arch">
<summary>
The device architecture (a.k.a. the compute capability).
</summary>
</member>
<member name="M:Alea.Device.PrintAll">
<summary>
Print out information of all valid devices on this host.
</summary>
</member>
<member name="M:Alea.Device.Print">
<summary>
Print out information of this device.
</summary>
</member>
<member name="M:Alea.Device.Get(System.Int32)">
<summary>
Get the device of the given id.
</summary>
</member>
<member name="T:Alea.Device">
<summary>
 Represents a CUDA-capable device.
</summary>
</member>
<member name="T:Alea.DeviceAttributes">
<summary>
 Device attributes.
</summary>
</member>
<member name="T:Alea.DeviceProperties">
<summary>
 Device properties.
</summary>
</member>
<member name="P:Alea.Driver.Version">
<summary>
 Gets the version number of the installed CUDA driver.
</summary>
</member>
<member name="T:Alea.Driver">
<summary>
 Utilities to get information about the installed CUDA driver.
</summary>
</member>
<member name="F:Alea.Pitched2DPtr`1.pitchInElements">
<summary>
 Pitch in number of elements per row
</summary>
</member>
<member name="P:Alea.Pitched2DPtr`1.Item(System.Int32,System.Int32,`0)">
 <summary>
Set pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="P:Alea.Pitched2DPtr`1.Item(System.Int32,System.Int32)">
 <summary>
Get pointee value by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.Pitched2DPtr`1.Set(System.Int32,System.Int32,`0)">
 <summary>
 Set pointee value by advancing pointer by <c>row*pitch + col</c> elements.
 </summary>
</member>
<member name="M:Alea.Pitched2DPtr`1.Ref(System.Int32,System.Int32)">
 <summary>
Gets an F# <c><![CDATA[Ref<'T>]]></c> object by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.Pitched2DPtr`1.LongSet(System.Int64,System.Int64,`0)">
 <summary>
 Set pointee value by advancing pointer by <c>row*pitch + col</c> elements.
 </summary>
</member>
<member name="M:Alea.Pitched2DPtr`1.LongRef(System.Int64,System.Int64)">
 <summary>
 Gets an F# <c><![CDATA[Ref<'T>]]></c> object by advancing pointer by <c>idx</c> elements.
 </summary>
</member>
<member name="M:Alea.Pitched2DPtr`1.LongGet(System.Int64,System.Int64)">
 <summary>
 Get pointee value by advancing pointer by <c>row*pitch + col</c> elements. 
 </summary>
</member>
<member name="M:Alea.Pitched2DPtr`1.Get(System.Int32,System.Int32)">
 <summary>
 Get pointee value by advancing pointer by <c>row*pitch + col</c> elements. 
 </summary>
</member>
<member name="T:Alea.Pitched2DPtr`1">
 <summary>
 Pointer to two-dimensional CUDA pitched memory.
 </summary>
</member>
<member name="P:Alea.RealTraits.Real64">
<summary>
 Generate traits for double precision number.
</summary>
</member>
<member name="P:Alea.RealTraits.Real32">
<summary>
 Generate traits for single precision number.
</summary>
</member>
<member name="T:Alea.RealTraits">
<summary>
 Real traits factory.
</summary>
</member>
<member name="T:Alea.RealTraits`1">
<summary>
 Various converters and properties of a real type (single or double).
</summary>
</member>
<member name="T:Alea.RealTraitsAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DiscriminatedUnionAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.RecordAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.RecordExcludedFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.RecordEmbeddedArrayFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DeviceStructAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.ClassAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.ClassEmbeddedArrayFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.ClassFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.StructPointerPropertyAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.StructEmbeddedArrayPropertyAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.StructEmbeddedArrayItemAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.StructEmbeddedArrayFieldAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.Internal.FSharp.NativeInterop.PinnedArray2`1.of_array2D(`0[0:,0:])">
<summary>
 For native interop. Pin the given object
</summary>
</member>
<member name="M:Alea.Internal.FSharp.NativeInterop.PinnedArray2`1.of_array2(`0[0:,0:])">
<summary>
 For native interop. Pin the given object
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.PinnedArray2`1">
<summary>
 [omit]
 Represents a pinned handle to a structure with an underlying 2D array, i.e. an underlying NativeArray2.
 Used when interfacing with native code math libraries such as LAPACK.
</summary>
</member>
<member name="M:Alea.Internal.FSharp.NativeInterop.PinnedArray`1.of_array(`0[])">
<summary>
 For native interop. Pin the given object
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.PinnedArray`1">
<summary>
 [omit]
 Represents a pinned handle to a structure with an underlying 1D array, i.e. an underlying NativeArray.
 Used when interfacing with native code math libraries such as LAPACK.
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.FortranMatrix`1.Item(System.Int32,System.Int32,`0)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.FortranMatrix`1.NativeTranspose">
<summary>
 View a FortranMatrix as a CMatrix.  Doesn&apos;t actually allocate
 a new matirx - just gives a different label to the same bits, and swaps the
 row/column count information associated with the bits.
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.FortranMatrix`1.Item(System.Int32,System.Int32)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.FortranMatrix`1">
<summary>
 [omit]
 This type wraps a pointer to a blob of unmanaged memory assumed to contain
 a Fortran-style column major two-dimensional matrix of items compatible with the (presumably blittable) 
 type &apos;T. The blob of memory must be allocated and managed externally, 
 e.g. by a computation routine written in C.

 All operations on this type are marked inlined
 because the code used to implement the operations is not verifiable.  

 Any code that uses these operations will be unverifiable and may 
 cause memory corruption if not used with extreme care.
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.CMatrix`1">
<summary>
 [omit]
 See NativeArray2
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.Item(System.Int32,System.Int32,`0)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.Ptr">
<summary>
 Pointer to the C-style row major two-dimensional array 
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.NumRows">
<summary>
 Get the number of rows of the native array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.NumCols">
<summary>
 Get the number of columns of the native array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.NativeTranspose">
<summary>
 View a CMatrix as a FortranMatrix.  Doesn&apos;t actually allocate
 a new matirx - just gives a different label to the same bits, and swaps the
 row/column count information associated with the bits.
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.Item(System.Int32,System.Int32)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="M:Alea.Internal.FSharp.NativeInterop.NativeArray2`1.#ctor(`0*,System.Int32,System.Int32)">
<summary>
 Creates a C-style row major two-dimensional array from a native pointer, the number of rows and the number of columns.  
 Nothing is actually copied.
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.NativeArray2`1">
<summary>
 [omit]
 This type wraps a pointer to a blob of unmanaged memory assumed to contain
 a C-style row major two-dimensional matrix of items compatible with the (presumably blittable) 
 type &apos;T. The blob of memory must be allocated and managed externally, 
 e.g. by a computation routine written in C.

 All operations on this type are marked inlined
 because the code used to implement the operations is not verifiable.  

 Any code that uses these operations will be unverifiable and may 
 cause memory corruption if not used with extreme care.
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray`1.Item(System.Int32,`0)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray`1.Ptr">
<summary>
 Pointer to the C-style one-dimensional array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray`1.Length">
<summary>
 Length of the C-style one-dimensional array
</summary>
</member>
<member name="P:Alea.Internal.FSharp.NativeInterop.NativeArray`1.Item(System.Int32)">
<summary>
 Get or set an entry in the array
</summary>
</member>
<member name="M:Alea.Internal.FSharp.NativeInterop.NativeArray`1.#ctor(`0*,System.Int32)">
<summary>
 Creates a C-style one dimensional array from a native pointer and the length of the array
 Nothing is actually copied.
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.NativeArray`1">
<summary>
 [omit]
 This type wraps a pointer to a blob of unmanaged memory assumed to contain
 a C-style one-dimensional array of items compatible with the (presumably blittable) 
 type &apos;T.  The blob of memory must be allocated and managed externally, 
 e.g. by a computation routine written in C.

 All operations on this type are marked inlined
 because the code used to implement the operations is not verifiable.  

 Any code that uses these operations will be unverifiable and may 
 cause memory corruption if not used with extreme care.
</summary>
</member>
<member name="M:Alea.Internal.FSharp.NativeInterop.RefModule.pin``2(Microsoft.FSharp.Core.FSharpRef{``0},Microsoft.FSharp.Core.FSharpFunc{``0*,``1})">
<summary>
 Pin the given ref for the duration of a single call to the given function.  A native pointer to
 the contents of the ref is passed to the given function.  Cleanup the GCHandle associated with the 
 pin when the function completes, even if an exception is raised.
</summary>
</member>
<member name="T:Alea.Internal.FSharp.NativeInterop.RefModule">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.Internal.FSharp.Core.FuncConvertExtensions">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.groupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``1,``2},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{System.Collections.Generic.IEnumerable{``1},``3}})">
<summary>
 This join operator implements the LINQ GroupJoin operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpFunc{``0,``2},Microsoft.FSharp.Core.FSharpFunc{``1,``2},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``3}})">
<summary>
 This join operator corresponds to the LINQ Join operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.groupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Join operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.maxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Max operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
 It differs in return type from &lt;c&gt;Seq.maxBy&lt;/c&gt;
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.minBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Min operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
 It differs in return type from &lt;c&gt;Seq.minBy&lt;/c&gt;
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Contains operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Alea.Internal.FSharp.Linq.QueryModule.query``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to a LINQ expression tree
 making use of IQueryable operators and then executing expression tree

 Exceptions: &lt;c&gt;InvalidArgumentException&lt;/c&gt; will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="T:Alea.Internal.FSharp.Linq.QueryModule">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.SettingElements.MonitorElement.Name(System.String)">
 <summary>
 Element attribute <c>name</c> for setting the name of the monitor. 
 </summary>
 <remarks>
 The default value is <c>none</c>:
 <list type="bullet">
 <item>
     <term><c>none</c></term>
     <description>Do nothing about messages.</description>
 </item>
 <item>
     <term><c>default</c></term>
     <description>This monitor will print out the high importance message to <c>stderr</c>.</description>
 </item>
 </list>
 </remarks>
</member>
<member name="P:Alea.SettingElements.MonitorElement.Name">
 <summary>
 Element attribute <c>name</c> for setting the name of the monitor. 
 </summary>
 <remarks>
 The default value is <c>none</c>:
 <list type="bullet">
 <item>
     <term><c>none</c></term>
     <description>Do nothing about messages.</description>
 </item>
 <item>
     <term><c>default</c></term>
     <description>This monitor will print out the high importance message to <c>stderr</c>.</description>
 </item>
 </list>
 </remarks>
</member>
<member name="T:Alea.SettingElements.MonitorElement">
 <summary>
 Configures a default event monitor.
 </summary>
</member>
<member name="P:Alea.SettingElements.LicenseElement.RepositoryPath(System.String)">
 <summary>
 Element attribute <c>repositoryPath</c> for setting the path for license repository.
 </summary>
</member>
<member name="P:Alea.SettingElements.LicenseElement.RepositoryPath">
 <summary>
 Element attribute <c>repositoryPath</c> for setting the path for license repository.
 </summary>
</member>
<member name="T:Alea.SettingElements.LicenseElement">
<summary>
 Configures properties for license system.
</summary>
</member>
<member name="P:Alea.SettingElements.CULibElement.Version(System.String)">
 <summary>
 Specify the version of this library, e.g. <c>7.5</c>.
 </summary>

 <remarks>
 If the value is empty string, on Windows, a default version will be
 choosen, such as <c>cublas 7.5</c>; on Posix system, library with no version
 will be choosen. The default value is empty string.
 </remarks>
</member>
<member name="P:Alea.SettingElements.CULibElement.Path(System.String)">
 <summary>
 Element attribute <c>path</c> to set path for NVIDIA CUDA library.
 </summary>

 <remarks>
 If the value is empty string, Alea GPU will search the library
 in system path. The default value is empty string.
 </remarks>
</member>
<member name="P:Alea.SettingElements.CULibElement.Version">
 <summary>
 Specify the version of this library, e.g. <c>7.5</c>.
 </summary>

 <remarks>
 If the value is empty string, on Windows, a default version will be
 choosen, such as <c>cublas 7.5</c>; on Posix system, library with no version
 will be choosen. The default value is empty string.
 </remarks>
</member>
<member name="P:Alea.SettingElements.CULibElement.Path">
 <summary>
 Element attribute <c>path</c> to set path for NVIDIA CUDA library.
 </summary>

 <remarks>
 If the value is empty string, Alea GPU will search the library
 in system path. The default value is empty string.
 </remarks>
</member>
<member name="T:Alea.SettingElements.CULibElement">
 <summary>
 Allows to set the path of the NVIDIA CUDA libraries explicitly.
 </summary>
</member>
<member name="P:Alea.SettingElements.JITCompileElement.Level(System.String)">
 <summary>
 Element attribute <c>level</c> to set the default JIT compiling level.
 </summary>

 <remarks>
 The default value is <c>Optimized</c>. Valid values are following:

 <list type="bullet">
 <item>
   <term><c>Diagnostic</c></term>
   <description>for debugging</description> 
 </item>
 <item>
   <term><c>Profiling</c></term>
   <description>for source code correlation profiling</description> 
 </item>
 <item>
   <term><c>Optimized</c></term>
   <description>for optimized compiling</description> 
 </item>
 </list> 

 </remarks>
</member>
<member name="P:Alea.SettingElements.JITCompileElement.Level">
 <summary>
 Element attribute <c>level</c> to set the default JIT compiling level.
 </summary>

 <remarks>
 The default value is <c>Optimized</c>. Valid values are following:

 <list type="bullet">
 <item>
   <term><c>Diagnostic</c></term>
   <description>for debugging</description> 
 </item>
 <item>
   <term><c>Profiling</c></term>
   <description>for source code correlation profiling</description> 
 </item>
 <item>
   <term><c>Optimized</c></term>
   <description>for optimized compiling</description> 
 </item>
 </list> 

 </remarks>
</member>
<member name="T:Alea.SettingElements.JITCompileElement">
<summary>
 Configures the default behavior for JIT compiling.
</summary>
</member>
<member name="P:Alea.SettingElements.CUDADriverElement.DefaultPath(System.String)">
 <summary>
 Element attribute <c>defaultPath</c> to set the default path that Alea GPU
 uses to search for your CUDA driver.
 </summary>

 <remarks>
 You can use some variables in configuring this:

 <list type="bullet">
 <item>
   <term><c>@base</c></term>
   <description>will be replaced by <c>AppDomain.CurrentDomain.BaseDirectory</c>.</description> 
 </item>
 <item>
   <term><c>@cwd</c></term>
   <description>will be replaced by current working directory.</description> 
 </item>
 </list> 
 
  The default value is empty string.
 </remarks>
</member>
<member name="P:Alea.SettingElements.CUDADriverElement.DefaultName(System.String)">
 <summary>
 Element attribute <c>defaultName</c> to set the default CUDA driver name.
 </summary>

 <remarks>
 By default, it has different names according to your operating system:

 <list type="bullet">
 <item>
   <term>Windows</term>
   <description><c>nvcuda.dll</c></description> 
 </item>
 <item>
   <term>Linux</term>
   <description><c>libcuda.so</c></description> 
 </item>
 <item>
   <term>MacOS</term>
   <description><c>libcuda.dylib</c></description> 
 </item>
 </list> 

 </remarks>
</member>
<member name="P:Alea.SettingElements.CUDADriverElement.DefaultPath">
 <summary>
 Element attribute <c>defaultPath</c> to set the default path that Alea GPU
 uses to search for your CUDA driver.
 </summary>

 <remarks>
 You can use some variables in configuring this:

 <list type="bullet">
 <item>
   <term><c>@base</c></term>
   <description>will be replaced by <c>AppDomain.CurrentDomain.BaseDirectory</c>.</description> 
 </item>
 <item>
   <term><c>@cwd</c></term>
   <description>will be replaced by current working directory.</description> 
 </item>
 </list> 
 
  The default value is empty string.
 </remarks>
</member>
<member name="P:Alea.SettingElements.CUDADriverElement.DefaultName">
 <summary>
 Element attribute <c>defaultName</c> to set the default CUDA driver name.
 </summary>

 <remarks>
 By default, it has different names according to your operating system:

 <list type="bullet">
 <item>
   <term>Windows</term>
   <description><c>nvcuda.dll</c></description> 
 </item>
 <item>
   <term>Linux</term>
   <description><c>libcuda.so</c></description> 
 </item>
 <item>
   <term>MacOS</term>
   <description><c>libcuda.dylib</c></description> 
 </item>
 </list> 

 </remarks>
</member>
<member name="T:Alea.SettingElements.CUDADriverElement">
<summary>
Alea GPU uses the CUDA driver installed on your system. When there is 
non-standard installation or the CUDA driver can not be found in your path,
you need to set this so that Alea GPU can find your CUDA driver.
</summary>
</member>
<member name="P:Alea.SettingElements.ResourceElement.Path(System.String)">
 <summary>
 Element attribute <c>path</c> to set the directory path where Alea GPU will
 try to find the libraries or natives.
 If the libraries or natives are not found in this path, Alea GPU will
 try to find the resource assemblies, and extract libraries or natives
 under this folder.
 </summary>

 <remarks>
 You can use some variables in configuring this:

 <list type="bullet">
 <item>
   <term><c>@base</c></term>
   <description>will be replaced by <c>AppDomain.CurrentDomain.BaseDirectory</c>.</description> 
 </item>
 <item>
   <term><c>@cwd</c></term>
   <description>will be replaced by current working directory.</description> 
 </item>
 </list> 
 
 The default value is <c>@base</c>.
 </remarks>
</member>
<member name="P:Alea.SettingElements.ResourceElement.AssemblyPath(System.String)">
 <summary>
 Element attribute <c>assemblyPath</c> to set the folder that contains resource assemblies.
 When Alea GPU cannot find native resources for JIT compiling, it will 
 try to extract those native resources from resource assemblies.
 </summary>

 <remarks>
 You can use some variables in configuring this:

 <list type="bullet">
 <item>
   <term><c>@base</c></term>
   <description>will be replaced by <c>AppDomain.CurrentDomain.BaseDirectory</c>.</description> 
 </item>
 <item>
   <term><c>@cwd</c></term>
   <description>will be replaced by current working directory.</description> 
 </item>
 </list> 
 
 The default value is <c>@base</c>.
 </remarks>
</member>
<member name="P:Alea.SettingElements.ResourceElement.Path">
 <summary>
 Element attribute <c>path</c> to set the directory path where Alea GPU will
 try to find the libraries or natives.
 If the libraries or natives are not found in this path, Alea GPU will
 try to find the resource assemblies, and extract libraries or natives
 under this folder.
 </summary>

 <remarks>
 You can use some variables in configuring this:

 <list type="bullet">
 <item>
   <term><c>@base</c></term>
   <description>will be replaced by <c>AppDomain.CurrentDomain.BaseDirectory</c>.</description> 
 </item>
 <item>
   <term><c>@cwd</c></term>
   <description>will be replaced by current working directory.</description> 
 </item>
 </list> 
 
 The default value is <c>@base</c>.
 </remarks>
</member>
<member name="P:Alea.SettingElements.ResourceElement.AssemblyPath">
 <summary>
 Element attribute <c>assemblyPath</c> to set the folder that contains resource assemblies.
 When Alea GPU cannot find native resources for JIT compiling, it will 
 try to extract those native resources from resource assemblies.
 </summary>

 <remarks>
 You can use some variables in configuring this:

 <list type="bullet">
 <item>
   <term><c>@base</c></term>
   <description>will be replaced by <c>AppDomain.CurrentDomain.BaseDirectory</c>.</description> 
 </item>
 <item>
   <term><c>@cwd</c></term>
   <description>will be replaced by current working directory.</description> 
 </item>
 </list> 
 
 The default value is <c>@base</c>.
 </remarks>
</member>
<member name="T:Alea.SettingElements.ResourceElement">
 <summary>
 Configures resources. There are resources needed for
 JIT compiling such as GPU bitcode libraries and native compilers. If you
 need JIT compiling, you must make sure these resources are properly set.
 </summary>
</member>
<member name="T:Alea.SettingElements.DiagnosticsElement">
<summary>
Configures diagnostic settings. This is used internally.
</summary>
</member>
<member name="T:Alea.SettingElements">
<summary>
This module contains configuration element types for settings.
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMDIBuilderRef">
<summary>
 P/Invoke alias type `nativeint -&gt; LLVMDIBuilderRef`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMAtomicRMWBinOp">
<summary>
 P/Invoke alias type `__LLVMAtomicRMWBinOp__ -&gt; LLVMAtomicRMWBinOp`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMAtomicRMWBinOp__">
<summary>
 P/Invoke enum type `__LLVMAtomicRMWBinOp__` (11 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMAtomicOrdering">
<summary>
 P/Invoke alias type `__LLVMAtomicOrdering__ -&gt; LLVMAtomicOrdering`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMAtomicOrdering__">
<summary>
 P/Invoke enum type `__LLVMAtomicOrdering__` (7 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMThreadLocalMode">
<summary>
 P/Invoke alias type `__LLVMThreadLocalMode__ -&gt; LLVMThreadLocalMode`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMThreadLocalMode__">
<summary>
 P/Invoke enum type `__LLVMThreadLocalMode__` (5 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMLandingPadClauseTy">
<summary>
 P/Invoke alias type `__LLVMLandingPadClauseTy__ -&gt; LLVMLandingPadClauseTy`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMLandingPadClauseTy__">
<summary>
 P/Invoke enum type `__LLVMLandingPadClauseTy__` (2 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMRealPredicate">
<summary>
 P/Invoke alias type `__LLVMRealPredicate__ -&gt; LLVMRealPredicate`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMRealPredicate__">
<summary>
 P/Invoke enum type `__LLVMRealPredicate__` (16 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMIntPredicate">
<summary>
 P/Invoke alias type `__LLVMIntPredicate__ -&gt; LLVMIntPredicate`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMIntPredicate__">
<summary>
 P/Invoke enum type `__LLVMIntPredicate__` (10 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMCallConv">
<summary>
 P/Invoke alias type `__LLVMCallConv__ -&gt; LLVMCallConv`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMCallConv__">
<summary>
 P/Invoke enum type `__LLVMCallConv__` (7 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMVisibility">
<summary>
 P/Invoke alias type `__LLVMVisibility__ -&gt; LLVMVisibility`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMVisibility__">
<summary>
 P/Invoke enum type `__LLVMVisibility__` (3 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMLinkage">
<summary>
 P/Invoke alias type `__LLVMLinkage__ -&gt; LLVMLinkage`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMLinkage__">
<summary>
 P/Invoke enum type `__LLVMLinkage__` (17 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMTypeKind">
<summary>
 P/Invoke alias type `__LLVMTypeKind__ -&gt; LLVMTypeKind`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMTypeKind__">
<summary>
 P/Invoke enum type `__LLVMTypeKind__` (16 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMOpcode">
<summary>
 P/Invoke alias type `__LLVMOpcode__ -&gt; LLVMOpcode`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMOpcode__">
<summary>
 P/Invoke enum type `__LLVMOpcode__` (59 enumerators).
</summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMAttribute">
<summary>
 P/Invoke alias type `__LLVMAttribute__ -&gt; LLVMAttribute`.
</summary>
</member>
<member name="T:Alea.LLVMInterop.__LLVMAttribute__">
 <summary>
 P/Invoke enum type <c><![CDATA[__LLVMAttribute__]]></c> (26 enumerators).
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMUseRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMUseRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMPassRegistryRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMPassRegistryRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMPassManagerRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMPassManagerRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMMemoryBufferRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMMemoryBufferRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMModuleProviderRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMModuleProviderRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMBuilderRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMBuilderRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMBasicBlockRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMBasicBlockRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMValueRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMValueRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMTypeRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMTypeRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMModuleRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMModuleRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMContextRef">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> LLVMContextRef]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.LLVMBool">
 <summary>
 P/Invoke alias type <c><![CDATA[int -> LLVMBool]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.size_t">
 <summary>
 P/Invoke alias type <c><![CDATA[nativeint -> size_t]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.uint8_t">
 <summary>
 P/Invoke alias type <c><![CDATA[uint8 -> uint8_t]]></c>.
 </summary>
</member>
<member name="T:Alea.LLVMInterop.uint64_t">
 <summary>
 P/Invoke alias type <c><![CDATA[uint64 -> uint64_t]]></c>.
 </summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderNVVMCreateGlobalVariable(System.IntPtr,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderNVVMCreateGlobalVariable@LLVMDIBuilderNVVMCreateGlobalVariable`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderNVVMCreateGlobalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateMemberType(System.IntPtr,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateMemberType@LLVMDIBuilderCreateMemberType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateMemberType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateStructType(System.IntPtr,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.UInt64,System.UInt64,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateStructType@LLVMDIBuilderCreateStructType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateStructType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateQualifiedType(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateQualifiedType@LLVMDIBuilderCreateQualifiedType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateQualifiedType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateReferenceType(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateReferenceType@LLVMDIBuilderCreateReferenceType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateReferenceType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderGetOrCreateSubrange(System.IntPtr,System.UInt64,System.UInt64)">
<summary>
 P/Invoke function for `LLVMDIBuilderGetOrCreateSubrange@LLVMDIBuilderGetOrCreateSubrange`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderGetOrCreateSubrange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateArrayType(System.IntPtr,System.UInt64,System.UInt64,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateArrayType@LLVMDIBuilderCreateArrayType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateArrayType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateLexicalBlock(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateLexicalBlock@LLVMDIBuilderCreateLexicalBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateLexicalBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderInsertDeclareBeforeInstruction(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderInsertDeclareBeforeInstruction@LLVMDIBuilderInsertDeclareBeforeInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderInsertDeclareBeforeInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderInsertDeclareAtEndOfBasickBlock(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderInsertDeclareAtEndOfBasickBlock@LLVMDIBuilderInsertDeclareAtEndOfBasickBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderInsertDeclareAtEndOfBasickBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateStaticVariable(System.IntPtr,System.IntPtr,System.String,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateStaticVariable@LLVMDIBuilderCreateStaticVariable`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateStaticVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateGlobalVariable(System.IntPtr,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateGlobalVariable@LLVMDIBuilderCreateGlobalVariable`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateGlobalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateLocalVariable(System.IntPtr,System.UInt32,System.IntPtr,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateLocalVariable@LLVMDIBuilderCreateLocalVariable`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateLocalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateFunction(System.IntPtr,System.IntPtr,System.String,System.String,System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateFunction@LLVMDIBuilderCreateFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateSubroutineType(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateSubroutineType@LLVMDIBuilderCreateSubroutineType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateSubroutineType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderGetOrCreateArray(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderGetOrCreateArray@LLVMDIBuilderGetOrCreateArray`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderGetOrCreateArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreatePointerType(System.IntPtr,System.IntPtr,System.UInt64,System.UInt64)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreatePointerType@LLVMDIBuilderCreatePointerType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreatePointerType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateBasicType(System.IntPtr,System.String,System.UInt64,System.UInt64,System.UInt32)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateBasicType@LLVMDIBuilderCreateBasicType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateBasicType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateFile(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateFile@LLVMDIBuilderCreateFile`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreateCompileUnit(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreateCompileUnit@LLVMDIBuilderCreateCompileUnit`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreateCompileUnit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderDispose(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderDispose@LLVMDIBuilderDispose`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderDispose'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDIBuilderCreate(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDIBuilderCreate@LLVMDIBuilderCreate`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDIBuilderCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddReturnAttr(System.IntPtr,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddReturnAttr@LLVMAddReturnAttr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddReturnAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAllocaInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAllocaInst@LLVMIsAllocaInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAllocaInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetAllocaAlign(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetAllocaAlign@LLVMGetAllocaAlign`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetAllocaAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetAllocaAlign(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetAllocaAlign@LLVMSetAllocaAlign`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetAllocaAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetStoreAlign(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetStoreAlign@LLVMGetStoreAlign`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetStoreAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetStoreAlign(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetStoreAlign@LLVMSetStoreAlign`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetStoreAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLoadAlign(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLoadAlign@LLVMGetLoadAlign`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLoadAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetLoadAlign(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetLoadAlign@LLVMSetLoadAlign`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetLoadAlign'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMWriteBitcodeToFileHandle(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMWriteBitcodeToFileHandle@LLVMWriteBitcodeToFileHandle`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMWriteBitcodeToFileHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMWriteBitcodeToFD(System.IntPtr,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `LLVMWriteBitcodeToFD@LLVMWriteBitcodeToFD`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMWriteBitcodeToFD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMWriteBitcodeToFile(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMWriteBitcodeToFile@LLVMWriteBitcodeToFile`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMWriteBitcodeToFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsMultithreaded">
<summary>
 P/Invoke function for `LLVMIsMultithreaded@LLVMIsMultithreaded`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsMultithreaded'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMStopMultithreaded">
<summary>
 P/Invoke function for `LLVMStopMultithreaded@LLVMStopMultithreaded`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMStopMultithreaded'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMStartMultithreaded">
<summary>
 P/Invoke function for `LLVMStartMultithreaded@LLVMStartMultithreaded`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMStartMultithreaded'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDisposePassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposePassManager@LLVMDisposePassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDisposePassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMFinalizeFunctionPassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMFinalizeFunctionPassManager@LLVMFinalizeFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMFinalizeFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMRunFunctionPassManager(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMRunFunctionPassManager@LLVMRunFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMRunFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInitializeFunctionPassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInitializeFunctionPassManager@LLVMInitializeFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInitializeFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMRunPassManager(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMRunPassManager@LLVMRunPassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMRunPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateFunctionPassManager(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateFunctionPassManager@LLVMCreateFunctionPassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateFunctionPassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateFunctionPassManagerForModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateFunctionPassManagerForModule@LLVMCreateFunctionPassManagerForModule`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateFunctionPassManagerForModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreatePassManager">
<summary>
 P/Invoke function for `LLVMCreatePassManager@LLVMCreatePassManager`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreatePassManager'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetGlobalPassRegistry">
<summary>
 P/Invoke function for `LLVMGetGlobalPassRegistry@LLVMGetGlobalPassRegistry`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetGlobalPassRegistry'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDisposeMemoryBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeMemoryBuffer@LLVMDisposeMemoryBuffer`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDisposeMemoryBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetBufferSize(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBufferSize@LLVMGetBufferSize`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetBufferSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetBufferStart(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBufferStart@LLVMGetBufferStart`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetBufferStart'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRangeCopy(System.String,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithMemoryRangeCopy@LLVMCreateMemoryBufferWithMemoryRangeCopy`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRangeCopy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRange(System.String,System.IntPtr,System.String,System.Int32)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithMemoryRange@LLVMCreateMemoryBufferWithMemoryRange`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateMemoryBufferWithMemoryRange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateMemoryBufferWithSTDIN(System.IntPtr*,System.SByte**)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithSTDIN@LLVMCreateMemoryBufferWithSTDIN`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateMemoryBufferWithSTDIN'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateMemoryBufferWithContentsOfFile(System.String,System.IntPtr*,System.SByte**)">
<summary>
 P/Invoke function for `LLVMCreateMemoryBufferWithContentsOfFile@LLVMCreateMemoryBufferWithContentsOfFile`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateMemoryBufferWithContentsOfFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDisposeModuleProvider(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeModuleProvider@LLVMDisposeModuleProvider`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDisposeModuleProvider'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateModuleProviderForExistingModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateModuleProviderForExistingModule@LLVMCreateModuleProviderForExistingModule`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateModuleProviderForExistingModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAtomicRMW(System.IntPtr,Alea.LLVMInterop.__LLVMAtomicRMWBinOp__,System.IntPtr,System.IntPtr,Alea.LLVMInterop.__LLVMAtomicOrdering__,System.Int32)">
<summary>
 P/Invoke function for `LLVMBuildAtomicRMW@LLVMBuildAtomicRMW`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAtomicRMW'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildPtrDiff(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPtrDiff@LLVMBuildPtrDiff`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildPtrDiff'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildIsNotNull(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIsNotNull@LLVMBuildIsNotNull`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildIsNotNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildIsNull(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIsNull@LLVMBuildIsNull`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildIsNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildInsertValue(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInsertValue@LLVMBuildInsertValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildInsertValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildExtractValue(System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildExtractValue@LLVMBuildExtractValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildExtractValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildShuffleVector(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildShuffleVector@LLVMBuildShuffleVector`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildShuffleVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildInsertElement(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInsertElement@LLVMBuildInsertElement`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildInsertElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildExtractElement(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildExtractElement@LLVMBuildExtractElement`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildExtractElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildVAArg(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildVAArg@LLVMBuildVAArg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildVAArg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSelect(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSelect@LLVMBuildSelect`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSelect'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildCall(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildCall@LLVMBuildCall`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildCall'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildPhi(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPhi@LLVMBuildPhi`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildPhi'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFCmp(System.IntPtr,Alea.LLVMInterop.__LLVMRealPredicate__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFCmp@LLVMBuildFCmp`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFCmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildICmp(System.IntPtr,Alea.LLVMInterop.__LLVMIntPredicate__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildICmp@LLVMBuildICmp`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildICmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFPCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPCast@LLVMBuildFPCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFPCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildIntCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIntCast@LLVMBuildIntCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildIntCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildPointerCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPointerCast@LLVMBuildPointerCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildPointerCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildCast(System.IntPtr,Alea.LLVMInterop.__LLVMOpcode__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildCast@LLVMBuildCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildTruncOrBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildTruncOrBitCast@LLVMBuildTruncOrBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildTruncOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSExtOrBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSExtOrBitCast@LLVMBuildSExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildZExtOrBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildZExtOrBitCast@LLVMBuildZExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildZExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAddrSpaceCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAddrSpaceCast@LLVMBuildAddrSpaceCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAddrSpaceCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildBitCast(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildBitCast@LLVMBuildBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildIntToPtr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildIntToPtr@LLVMBuildIntToPtr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildIntToPtr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildPtrToInt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildPtrToInt@LLVMBuildPtrToInt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildPtrToInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFPExt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPExt@LLVMBuildFPExt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFPExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFPTrunc(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPTrunc@LLVMBuildFPTrunc`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFPTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSIToFP(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSIToFP@LLVMBuildSIToFP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildUIToFP(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildUIToFP@LLVMBuildUIToFP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildUIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFPToSI(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPToSI@LLVMBuildFPToSI`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFPToSI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFPToUI(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFPToUI@LLVMBuildFPToUI`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFPToUI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSExt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSExt@LLVMBuildSExt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildZExt(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildZExt@LLVMBuildZExt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildZExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildTrunc(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildTrunc@LLVMBuildTrunc`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetVolatile(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetVolatile@LLVMSetVolatile`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetVolatile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetVolatile(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetVolatile@LLVMGetVolatile`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetVolatile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildGlobalStringPtr(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMBuildGlobalStringPtr@LLVMBuildGlobalStringPtr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildGlobalStringPtr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildGlobalString(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMBuildGlobalString@LLVMBuildGlobalString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildGlobalString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildStructGEP(System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildStructGEP@LLVMBuildStructGEP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildStructGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildInBoundsGEP(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInBoundsGEP@LLVMBuildInBoundsGEP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildInBoundsGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildGEP(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildGEP@LLVMBuildGEP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildStore(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildStore@LLVMBuildStore`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildStore'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildLoad(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildLoad@LLVMBuildLoad`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildLoad'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFree(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildFree@LLVMBuildFree`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFree'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildArrayAlloca(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildArrayAlloca@LLVMBuildArrayAlloca`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildArrayAlloca'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAlloca(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAlloca@LLVMBuildAlloca`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAlloca'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildArrayMalloc(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildArrayMalloc@LLVMBuildArrayMalloc`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildArrayMalloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildMalloc(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildMalloc@LLVMBuildMalloc`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildMalloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNot(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNot@LLVMBuildNot`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFNeg@LLVMBuildFNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNUWNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWNeg@LLVMBuildNUWNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNUWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNSWNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWNeg@LLVMBuildNSWNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNSWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNeg(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNeg@LLVMBuildNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildBinOp(System.IntPtr,Alea.LLVMInterop.__LLVMOpcode__,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildBinOp@LLVMBuildBinOp`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildBinOp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildXor(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildXor@LLVMBuildXor`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildXor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildOr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildOr@LLVMBuildOr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildOr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAnd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAnd@LLVMBuildAnd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAnd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAShr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAShr@LLVMBuildAShr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildLShr(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildLShr@LLVMBuildLShr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildLShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildShl(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildShl@LLVMBuildShl`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildShl'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFRem(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFRem@LLVMBuildFRem`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSRem(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSRem@LLVMBuildSRem`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildURem(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildURem@LLVMBuildURem`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildURem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFDiv@LLVMBuildFDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildExactSDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildExactSDiv@LLVMBuildExactSDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildExactSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSDiv@LLVMBuildSDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildUDiv(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildUDiv@LLVMBuildUDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildUDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFMul@LLVMBuildFMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNUWMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWMul@LLVMBuildNUWMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNUWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNSWMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWMul@LLVMBuildNSWMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNSWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildMul(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildMul@LLVMBuildMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFSub@LLVMBuildFSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNUWSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWSub@LLVMBuildNUWSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNUWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNSWSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWSub@LLVMBuildNSWSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNSWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSub(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildSub@LLVMBuildSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildFAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildFAdd@LLVMBuildFAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildFAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNUWAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNUWAdd@LLVMBuildNUWAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNUWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildNSWAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildNSWAdd@LLVMBuildNSWAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildNSWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAdd(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildAdd@LLVMBuildAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetCleanup(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetCleanup@LLVMSetCleanup`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetCleanup'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddClause(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddClause@LLVMAddClause`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddClause'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddDestination(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddDestination@LLVMAddDestination`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddDestination'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddCase(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddCase@LLVMAddCase`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddCase'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildUnreachable(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildUnreachable@LLVMBuildUnreachable`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildUnreachable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildResume(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildResume@LLVMBuildResume`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildResume'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildLandingPad(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,System.String)">
<summary>
 P/Invoke function for `LLVMBuildLandingPad@LLVMBuildLandingPad`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildLandingPad'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildInvoke(System.IntPtr,System.IntPtr,System.IntPtr*,System.UInt32,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMBuildInvoke@LLVMBuildInvoke`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildInvoke'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildIndirectBr(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMBuildIndirectBr@LLVMBuildIndirectBr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildIndirectBr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildSwitch(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMBuildSwitch@LLVMBuildSwitch`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildSwitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildCondBr(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildCondBr@LLVMBuildCondBr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildCondBr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildBr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildBr@LLVMBuildBr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildBr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildAggregateRet(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMBuildAggregateRet@LLVMBuildAggregateRet`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildAggregateRet'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildRet(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildRet@LLVMBuildRet`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildRet'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBuildRetVoid(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBuildRetVoid@LLVMBuildRetVoid`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBuildRetVoid'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetInstDebugLocation(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetInstDebugLocation@LLVMSetInstDebugLocation`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetInstDebugLocation'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetCurrentDebugLocation(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetCurrentDebugLocation@LLVMGetCurrentDebugLocation`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetCurrentDebugLocation'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetCurrentDebugLocation(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetCurrentDebugLocation@LLVMSetCurrentDebugLocation`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetCurrentDebugLocation'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDisposeBuilder(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeBuilder@LLVMDisposeBuilder`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDisposeBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInsertIntoBuilderWithName(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMInsertIntoBuilderWithName@LLVMInsertIntoBuilderWithName`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInsertIntoBuilderWithName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInsertIntoBuilder(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInsertIntoBuilder@LLVMInsertIntoBuilder`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInsertIntoBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMClearInsertionPosition(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMClearInsertionPosition@LLVMClearInsertionPosition`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMClearInsertionPosition'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetInsertBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInsertBlock@LLVMGetInsertBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetInsertBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPositionBuilderAtEnd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPositionBuilderAtEnd@LLVMPositionBuilderAtEnd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPositionBuilderAtEnd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPositionBuilderBefore(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPositionBuilderBefore@LLVMPositionBuilderBefore`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPositionBuilderBefore'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPositionBuilder(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPositionBuilder@LLVMPositionBuilder`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPositionBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateBuilder">
<summary>
 P/Invoke function for `LLVMCreateBuilder@LLVMCreateBuilder`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateBuilder'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateBuilderInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCreateBuilderInContext@LLVMCreateBuilderInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateBuilderInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetIncomingBlock(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetIncomingBlock@LLVMGetIncomingBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetIncomingBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetIncomingValue(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetIncomingValue@LLVMGetIncomingValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetIncomingValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCountIncoming(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountIncoming@LLVMCountIncoming`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCountIncoming'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddIncoming(System.IntPtr,System.IntPtr*,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMAddIncoming@LLVMAddIncoming`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddIncoming'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetSwitchDefaultDest(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetSwitchDefaultDest@LLVMGetSwitchDefaultDest`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetSwitchDefaultDest'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetTailCall(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetTailCall@LLVMSetTailCall`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetTailCall'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsTailCall(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsTailCall@LLVMIsTailCall`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsTailCall'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetInstrParamAlignment(System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetInstrParamAlignment@LLVMSetInstrParamAlignment`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetInstrParamAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMRemoveInstrAttribute(System.IntPtr,System.UInt32,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMRemoveInstrAttribute@LLVMRemoveInstrAttribute`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMRemoveInstrAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddInstrAttribute(System.IntPtr,System.UInt32,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddInstrAttribute@LLVMAddInstrAttribute`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddInstrAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetInstructionCallConv(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInstructionCallConv@LLVMGetInstructionCallConv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetInstructionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetInstructionCallConv(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetInstructionCallConv@LLVMSetInstructionCallConv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetInstructionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetICmpPredicate(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetICmpPredicate@LLVMGetICmpPredicate`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetICmpPredicate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetInstructionOpcode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInstructionOpcode@LLVMGetInstructionOpcode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetInstructionOpcode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInstructionEraseFromParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInstructionEraseFromParent@LLVMInstructionEraseFromParent`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInstructionEraseFromParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetPreviousInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousInstruction@LLVMGetPreviousInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetPreviousInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNextInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextInstruction@LLVMGetNextInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNextInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetInstructionParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInstructionParent@LLVMGetInstructionParent`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetInstructionParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetMetadata(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetMetadata@LLVMSetMetadata`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetMetadata'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetMetadata(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetMetadata@LLVMGetMetadata`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetMetadata'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMHasMetadata(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMHasMetadata@LLVMHasMetadata`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMHasMetadata'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLastInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastInstruction@LLVMGetLastInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLastInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFirstInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstInstruction@LLVMGetFirstInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFirstInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMMoveBasicBlockAfter(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMMoveBasicBlockAfter@LLVMMoveBasicBlockAfter`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMMoveBasicBlockAfter'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMMoveBasicBlockBefore(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMMoveBasicBlockBefore@LLVMMoveBasicBlockBefore`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMMoveBasicBlockBefore'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMRemoveBasicBlockFromParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMRemoveBasicBlockFromParent@LLVMRemoveBasicBlockFromParent`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMRemoveBasicBlockFromParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDeleteBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDeleteBasicBlock@LLVMDeleteBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDeleteBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInsertBasicBlock(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMInsertBasicBlock@LLVMInsertBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInsertBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInsertBasicBlockInContext(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMInsertBasicBlockInContext@LLVMInsertBasicBlockInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInsertBasicBlockInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAppendBasicBlock(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAppendBasicBlock@LLVMAppendBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAppendBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAppendBasicBlockInContext(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAppendBasicBlockInContext@LLVMAppendBasicBlockInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAppendBasicBlockInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetEntryBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetEntryBasicBlock@LLVMGetEntryBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetEntryBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetPreviousBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousBasicBlock@LLVMGetPreviousBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetPreviousBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNextBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextBasicBlock@LLVMGetNextBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNextBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLastBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastBasicBlock@LLVMGetLastBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLastBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFirstBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstBasicBlock@LLVMGetFirstBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFirstBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetBasicBlocks(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetBasicBlocks@LLVMGetBasicBlocks`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetBasicBlocks'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCountBasicBlocks(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountBasicBlocks@LLVMCountBasicBlocks`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCountBasicBlocks'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetBasicBlockTerminator(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBasicBlockTerminator@LLVMGetBasicBlockTerminator`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetBasicBlockTerminator'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetBasicBlockParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetBasicBlockParent@LLVMGetBasicBlockParent`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetBasicBlockParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMValueAsBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMValueAsBasicBlock@LLVMValueAsBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMValueAsBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMValueIsBasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMValueIsBasicBlock@LLVMValueIsBasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMValueIsBasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBasicBlockAsValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBasicBlockAsValue@LLVMBasicBlockAsValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBasicBlockAsValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetMDNodeOperands(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetMDNodeOperands@LLVMGetMDNodeOperands`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetMDNodeOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetMDNodeNumOperands(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetMDNodeNumOperands@LLVMGetMDNodeNumOperands`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetMDNodeNumOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetMDString(System.IntPtr,System.UInt32*)">
<summary>
 P/Invoke function for `LLVMGetMDString@LLVMGetMDString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetMDString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMMDNode(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDNode@LLVMMDNode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMMDNode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMMDNodeInContext(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDNodeInContext@LLVMMDNodeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMMDNodeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMMDString(System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDString@LLVMMDString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMMDString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMMDStringInContext(System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMMDStringInContext@LLVMMDStringInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMMDStringInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetParamAlignment(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetParamAlignment@LLVMSetParamAlignment`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetParamAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetAttribute(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetAttribute@LLVMGetAttribute`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMRemoveAttribute(System.IntPtr,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMRemoveAttribute@LLVMRemoveAttribute`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMRemoveAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddAttribute(System.IntPtr,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddAttribute@LLVMAddAttribute`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetPreviousParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousParam@LLVMGetPreviousParam`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetPreviousParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNextParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextParam@LLVMGetNextParam`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNextParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLastParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastParam@LLVMGetLastParam`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLastParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFirstParam(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstParam@LLVMGetFirstParam`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFirstParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetParamParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetParamParent@LLVMGetParamParent`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetParamParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetParam(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetParam@LLVMGetParam`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetParam'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetParams(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetParams@LLVMGetParams`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetParams'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCountParams(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountParams@LLVMCountParams`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCountParams'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMRemoveFunctionAttr(System.IntPtr,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMRemoveFunctionAttr@LLVMRemoveFunctionAttr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMRemoveFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFunctionAttr(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFunctionAttr@LLVMGetFunctionAttr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddTargetDependentFunctionAttr(System.IntPtr,System.String,System.String)">
<summary>
 P/Invoke function for `LLVMAddTargetDependentFunctionAttr@LLVMAddTargetDependentFunctionAttr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddTargetDependentFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddFunctionAttr(System.IntPtr,Alea.LLVMInterop.__LLVMAttribute__)">
<summary>
 P/Invoke function for `LLVMAddFunctionAttr@LLVMAddFunctionAttr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddFunctionAttr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetGC(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetGC@LLVMSetGC`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetGC'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetGC(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetGC@LLVMGetGC`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetGC'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetFunctionCallConv(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetFunctionCallConv@LLVMSetFunctionCallConv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetFunctionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFunctionCallConv(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFunctionCallConv@LLVMGetFunctionCallConv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFunctionCallConv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetIntrinsicID(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetIntrinsicID@LLVMGetIntrinsicID`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetIntrinsicID'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDeleteFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDeleteFunction@LLVMDeleteFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDeleteFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddAlias(System.IntPtr,System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAddAlias@LLVMAddAlias`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddAlias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetExternallyInitialized(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetExternallyInitialized@LLVMSetExternallyInitialized`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetExternallyInitialized'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsExternallyInitialized(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsExternallyInitialized@LLVMIsExternallyInitialized`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsExternallyInitialized'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetThreadLocalMode(System.IntPtr,Alea.LLVMInterop.__LLVMThreadLocalMode__)">
<summary>
 P/Invoke function for `LLVMSetThreadLocalMode@LLVMSetThreadLocalMode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetThreadLocalMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetThreadLocalMode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetThreadLocalMode@LLVMGetThreadLocalMode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetThreadLocalMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetGlobalConstant(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetGlobalConstant@LLVMSetGlobalConstant`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetGlobalConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsGlobalConstant(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsGlobalConstant@LLVMIsGlobalConstant`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsGlobalConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetThreadLocal(System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMSetThreadLocal@LLVMSetThreadLocal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetThreadLocal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsThreadLocal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsThreadLocal@LLVMIsThreadLocal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsThreadLocal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetInitializer(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetInitializer@LLVMSetInitializer`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetInitializer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetInitializer(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetInitializer@LLVMGetInitializer`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetInitializer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDeleteGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDeleteGlobal@LLVMDeleteGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDeleteGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetPreviousGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousGlobal@LLVMGetPreviousGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetPreviousGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNextGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextGlobal@LLVMGetNextGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNextGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLastGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastGlobal@LLVMGetLastGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLastGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFirstGlobal(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstGlobal@LLVMGetFirstGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFirstGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNamedGlobal(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetNamedGlobal@LLVMGetNamedGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNamedGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddGlobalInAddressSpace(System.IntPtr,System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMAddGlobalInAddressSpace@LLVMAddGlobalInAddressSpace`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddGlobalInAddressSpace'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddGlobal(System.IntPtr,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMAddGlobal@LLVMAddGlobal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetAlignment(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMSetAlignment@LLVMSetAlignment`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetAlignment(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetAlignment@LLVMGetAlignment`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetAlignment'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetVisibility(System.IntPtr,Alea.LLVMInterop.__LLVMVisibility__)">
<summary>
 P/Invoke function for `LLVMSetVisibility@LLVMSetVisibility`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetVisibility'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetVisibility(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetVisibility@LLVMGetVisibility`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetVisibility'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetSection(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetSection@LLVMSetSection`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetSection'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetSection(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetSection@LLVMGetSection`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetSection'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetLinkage(System.IntPtr,Alea.LLVMInterop.__LLVMLinkage__)">
<summary>
 P/Invoke function for `LLVMSetLinkage@LLVMSetLinkage`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetLinkage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLinkage(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLinkage@LLVMGetLinkage`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLinkage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsDeclaration(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsDeclaration@LLVMIsDeclaration`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsDeclaration'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetGlobalParent(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetGlobalParent@LLVMGetGlobalParent`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetGlobalParent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMBlockAddress(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMBlockAddress@LLVMBlockAddress`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMBlockAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstInlineAsm(System.IntPtr,System.String,System.String,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstInlineAsm@LLVMConstInlineAsm`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstInlineAsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstInsertValue(System.IntPtr,System.IntPtr,System.UInt32*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstInsertValue@LLVMConstInsertValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstInsertValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstExtractValue(System.IntPtr,System.UInt32*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstExtractValue@LLVMConstExtractValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstExtractValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstShuffleVector(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstShuffleVector@LLVMConstShuffleVector`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstShuffleVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstInsertElement(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstInsertElement@LLVMConstInsertElement`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstInsertElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstExtractElement(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstExtractElement@LLVMConstExtractElement`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstExtractElement'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSelect(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSelect@LLVMConstSelect`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSelect'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFPCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPCast@LLVMConstFPCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFPCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntCast(System.IntPtr,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstIntCast@LLVMConstIntCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstPointerCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstPointerCast@LLVMConstPointerCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstPointerCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstTruncOrBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstTruncOrBitCast@LLVMConstTruncOrBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstTruncOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSExtOrBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSExtOrBitCast@LLVMConstSExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstZExtOrBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstZExtOrBitCast@LLVMConstZExtOrBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstZExtOrBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstAddrSpaceCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAddrSpaceCast@LLVMConstAddrSpaceCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstAddrSpaceCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstBitCast(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstBitCast@LLVMConstBitCast`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstBitCast'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntToPtr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstIntToPtr@LLVMConstIntToPtr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntToPtr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstPtrToInt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstPtrToInt@LLVMConstPtrToInt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstPtrToInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFPToSI(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPToSI@LLVMConstFPToSI`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFPToSI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFPToUI(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPToUI@LLVMConstFPToUI`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFPToUI'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSIToFP(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSIToFP@LLVMConstSIToFP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstUIToFP(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstUIToFP@LLVMConstUIToFP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstUIToFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFPExt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPExt@LLVMConstFPExt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFPExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFPTrunc(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFPTrunc@LLVMConstFPTrunc`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFPTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstZExt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstZExt@LLVMConstZExt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstZExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSExt(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSExt@LLVMConstSExt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSExt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstTrunc(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstTrunc@LLVMConstTrunc`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstTrunc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstInBoundsGEP(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstInBoundsGEP@LLVMConstInBoundsGEP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstInBoundsGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstGEP(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstGEP@LLVMConstGEP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstGEP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstAShr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAShr@LLVMConstAShr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstAShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstLShr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstLShr@LLVMConstLShr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstLShr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstShl(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstShl@LLVMConstShl`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstShl'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFCmp(Alea.LLVMInterop.__LLVMRealPredicate__,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFCmp@LLVMConstFCmp`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFCmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstICmp(Alea.LLVMInterop.__LLVMIntPredicate__,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstICmp@LLVMConstICmp`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstICmp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstXor(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstXor@LLVMConstXor`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstXor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstOr(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstOr@LLVMConstOr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstOr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstAnd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAnd@LLVMConstAnd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstAnd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFRem(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFRem@LLVMConstFRem`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSRem(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSRem@LLVMConstSRem`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSRem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstURem(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstURem@LLVMConstURem`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstURem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFDiv@LLVMConstFDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstExactSDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstExactSDiv@LLVMConstExactSDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstExactSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSDiv@LLVMConstSDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstUDiv(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstUDiv@LLVMConstUDiv`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstUDiv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFMul@LLVMConstFMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNUWMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWMul@LLVMConstNUWMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNUWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNSWMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWMul@LLVMConstNSWMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNSWMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstMul(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstMul@LLVMConstMul`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstMul'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFSub@LLVMConstFSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNUWSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWSub@LLVMConstNUWSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNUWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNSWSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWSub@LLVMConstNSWSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNSWSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstSub(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstSub@LLVMConstSub`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstSub'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFAdd@LLVMConstFAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNUWAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWAdd@LLVMConstNUWAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNUWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNSWAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWAdd@LLVMConstNSWAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNSWAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstAdd(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAdd@LLVMConstAdd`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstAdd'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNot(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNot@LLVMConstNot`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNot'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstFNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstFNeg@LLVMConstFNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstFNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNUWNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNUWNeg@LLVMConstNUWNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNUWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNSWNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNSWNeg@LLVMConstNSWNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNSWNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNeg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNeg@LLVMConstNeg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNeg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSizeOf(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSizeOf@LLVMSizeOf`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSizeOf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAlignOf(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAlignOf@LLVMAlignOf`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAlignOf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetConstOpcode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetConstOpcode@LLVMGetConstOpcode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetConstOpcode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstVector(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstVector@LLVMConstVector`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNamedStruct(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstNamedStruct@LLVMConstNamedStruct`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNamedStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstArray(System.IntPtr,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstArray@LLVMConstArray`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstStruct(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstStruct@LLVMConstStruct`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstStructInContext(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstStructInContext@LLVMConstStructInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstStructInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstString(System.String,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstString@LLVMConstString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstStringInContext(System.IntPtr,System.String,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstStringInContext@LLVMConstStringInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstStringInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntGetSExtValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstIntGetSExtValue@LLVMConstIntGetSExtValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntGetSExtValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntGetZExtValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstIntGetZExtValue@LLVMConstIntGetZExtValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntGetZExtValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstRealOfStringAndSize(System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMConstRealOfStringAndSize@LLVMConstRealOfStringAndSize`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstRealOfStringAndSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstRealOfString(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMConstRealOfString@LLVMConstRealOfString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstRealOfString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstReal(System.IntPtr,System.Double)">
<summary>
 P/Invoke function for `LLVMConstReal@LLVMConstReal`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstReal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntOfStringAndSize(System.IntPtr,System.String,System.UInt32,System.Byte)">
<summary>
 P/Invoke function for `LLVMConstIntOfStringAndSize@LLVMConstIntOfStringAndSize`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntOfStringAndSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntOfString(System.IntPtr,System.String,System.Byte)">
<summary>
 P/Invoke function for `LLVMConstIntOfString@LLVMConstIntOfString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntOfString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstIntOfArbitraryPrecision(System.IntPtr,System.UInt32,System.UInt64[])">
<summary>
 P/Invoke function for `LLVMConstIntOfArbitraryPrecision@LLVMConstIntOfArbitraryPrecision`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstIntOfArbitraryPrecision'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstInt(System.IntPtr,System.UInt64,System.Int32)">
<summary>
 P/Invoke function for `LLVMConstInt@LLVMConstInt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstPointerNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstPointerNull@LLVMConstPointerNull`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstPointerNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsNull@LLVMIsNull`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetUndef(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetUndef@LLVMGetUndef`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetUndef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstAllOnes(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstAllOnes@LLVMConstAllOnes`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstAllOnes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMConstNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMConstNull@LLVMConstNull`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMConstNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNumOperands(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNumOperands@LLVMGetNumOperands`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNumOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetOperand(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMSetOperand@LLVMSetOperand`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetOperand'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetOperand(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetOperand@LLVMGetOperand`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetOperand'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetUsedValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetUsedValue@LLVMGetUsedValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetUsedValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetUser(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetUser@LLVMGetUser`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetUser'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNextUse(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextUse@LLVMGetNextUse`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNextUse'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFirstUse(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstUse@LLVMGetFirstUse`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFirstUse'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAVAArgInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAVAArgInst@LLVMIsAVAArgInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAVAArgInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsALoadInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsALoadInst@LLVMIsALoadInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsALoadInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAExtractValueInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAExtractValueInst@LLVMIsAExtractValueInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAExtractValueInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAZExtInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAZExtInst@LLVMIsAZExtInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAZExtInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAUIToFPInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUIToFPInst@LLVMIsAUIToFPInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAUIToFPInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsATruncInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsATruncInst@LLVMIsATruncInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsATruncInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsASIToFPInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASIToFPInst@LLVMIsASIToFPInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsASIToFPInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsASExtInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASExtInst@LLVMIsASExtInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsASExtInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAPtrToIntInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAPtrToIntInst@LLVMIsAPtrToIntInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAPtrToIntInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAIntToPtrInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAIntToPtrInst@LLVMIsAIntToPtrInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAIntToPtrInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAFPTruncInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPTruncInst@LLVMIsAFPTruncInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAFPTruncInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAFPToUIInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPToUIInst@LLVMIsAFPToUIInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAFPToUIInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAFPToSIInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPToSIInst@LLVMIsAFPToSIInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAFPToSIInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAFPExtInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFPExtInst@LLVMIsAFPExtInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAFPExtInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsABitCastInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABitCastInst@LLVMIsABitCastInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsABitCastInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAAddrSpaceCastInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAAddrSpaceCastInst@LLVMIsAAddrSpaceCastInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAAddrSpaceCastInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsACastInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsACastInst@LLVMIsACastInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsACastInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAAllocaInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAAllocaInst@LLVMIsAAllocaInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAAllocaInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAUnaryInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUnaryInstruction@LLVMIsAUnaryInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAUnaryInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAResumeInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAResumeInst@LLVMIsAResumeInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAResumeInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAUnreachableInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUnreachableInst@LLVMIsAUnreachableInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAUnreachableInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsASwitchInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASwitchInst@LLVMIsASwitchInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsASwitchInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAReturnInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAReturnInst@LLVMIsAReturnInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAReturnInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAInvokeInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInvokeInst@LLVMIsAInvokeInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAInvokeInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAIndirectBrInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAIndirectBrInst@LLVMIsAIndirectBrInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAIndirectBrInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsABranchInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABranchInst@LLVMIsABranchInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsABranchInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsATerminatorInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsATerminatorInst@LLVMIsATerminatorInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsATerminatorInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAStoreInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAStoreInst@LLVMIsAStoreInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAStoreInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAShuffleVectorInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAShuffleVectorInst@LLVMIsAShuffleVectorInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAShuffleVectorInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsASelectInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsASelectInst@LLVMIsASelectInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsASelectInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAPHINode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAPHINode@LLVMIsAPHINode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAPHINode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsALandingPadInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsALandingPadInst@LLVMIsALandingPadInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsALandingPadInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAInsertValueInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInsertValueInst@LLVMIsAInsertValueInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAInsertValueInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAInsertElementInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInsertElementInst@LLVMIsAInsertElementInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAInsertElementInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAGetElementPtrInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGetElementPtrInst@LLVMIsAGetElementPtrInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAGetElementPtrInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAExtractElementInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAExtractElementInst@LLVMIsAExtractElementInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAExtractElementInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAICmpInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAICmpInst@LLVMIsAICmpInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAICmpInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAFCmpInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFCmpInst@LLVMIsAFCmpInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAFCmpInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsACmpInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsACmpInst@LLVMIsACmpInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsACmpInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAMemSetInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemSetInst@LLVMIsAMemSetInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAMemSetInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAMemMoveInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemMoveInst@LLVMIsAMemMoveInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAMemMoveInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAMemCpyInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemCpyInst@LLVMIsAMemCpyInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAMemCpyInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAMemIntrinsic(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMemIntrinsic@LLVMIsAMemIntrinsic`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAMemIntrinsic'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsADbgDeclareInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsADbgDeclareInst@LLVMIsADbgDeclareInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsADbgDeclareInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsADbgInfoIntrinsic(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsADbgInfoIntrinsic@LLVMIsADbgInfoIntrinsic`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsADbgInfoIntrinsic'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAIntrinsicInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAIntrinsicInst@LLVMIsAIntrinsicInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAIntrinsicInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsACallInst(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsACallInst@LLVMIsACallInst`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsACallInst'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsABinaryOperator(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABinaryOperator@LLVMIsABinaryOperator`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsABinaryOperator'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAInstruction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInstruction@LLVMIsAInstruction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAInstruction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAUndefValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUndefValue@LLVMIsAUndefValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAUndefValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAGlobalVariable(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGlobalVariable@LLVMIsAGlobalVariable`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAGlobalVariable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAGlobalAlias(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGlobalAlias@LLVMIsAGlobalAlias`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAGlobalAlias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAFunction@LLVMIsAFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAGlobalValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAGlobalValue@LLVMIsAGlobalValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAGlobalValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantVector(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantVector@LLVMIsAConstantVector`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantStruct(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantStruct@LLVMIsAConstantStruct`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantPointerNull(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantPointerNull@LLVMIsAConstantPointerNull`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantPointerNull'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantInt(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantInt@LLVMIsAConstantInt`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantInt'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantFP(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantFP@LLVMIsAConstantFP`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantFP'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantExpr(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantExpr@LLVMIsAConstantExpr`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantExpr'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantDataVector(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantDataVector@LLVMIsAConstantDataVector`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantDataVector'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantDataArray(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantDataArray@LLVMIsAConstantDataArray`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantDataArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantDataSequential(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantDataSequential@LLVMIsAConstantDataSequential`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantDataSequential'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantArray(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantArray@LLVMIsAConstantArray`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstantAggregateZero(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstantAggregateZero@LLVMIsAConstantAggregateZero`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstantAggregateZero'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsABlockAddress(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABlockAddress@LLVMIsABlockAddress`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsABlockAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAConstant(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAConstant@LLVMIsAConstant`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAUser(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAUser@LLVMIsAUser`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAUser'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAMDString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMDString@LLVMIsAMDString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAMDString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAMDNode(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAMDNode@LLVMIsAMDNode`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAMDNode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAInlineAsm(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAInlineAsm@LLVMIsAInlineAsm`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAInlineAsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsABasicBlock(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsABasicBlock@LLVMIsABasicBlock`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsABasicBlock'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsAArgument(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsAArgument@LLVMIsAArgument`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsAArgument'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsUndef(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsUndef@LLVMIsUndef`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsUndef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsConstant(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsConstant@LLVMIsConstant`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsConstant'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMReplaceAllUsesWith(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMReplaceAllUsesWith@LLVMReplaceAllUsesWith`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMReplaceAllUsesWith'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPrintValueToString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPrintValueToString@LLVMPrintValueToString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPrintValueToString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDumpValue(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDumpValue@LLVMDumpValue`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDumpValue'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetValueName(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetValueName@LLVMSetValueName`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetValueName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetValueName(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetValueName@LLVMGetValueName`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetValueName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMTypeOf(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMTypeOf@LLVMTypeOf`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMTypeOf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMX86MMXType">
<summary>
 P/Invoke function for `LLVMX86MMXType@LLVMX86MMXType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMX86MMXType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMLabelType">
<summary>
 P/Invoke function for `LLVMLabelType@LLVMLabelType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMLabelType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMVoidType">
<summary>
 P/Invoke function for `LLVMVoidType@LLVMVoidType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMVoidType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMX86MMXTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMX86MMXTypeInContext@LLVMX86MMXTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMX86MMXTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMLabelTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMLabelTypeInContext@LLVMLabelTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMLabelTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMVoidTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMVoidTypeInContext@LLVMVoidTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMVoidTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetVectorSize(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetVectorSize@LLVMGetVectorSize`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetVectorSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMVectorType(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMVectorType@LLVMVectorType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMVectorType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetPointerAddressSpace(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPointerAddressSpace@LLVMGetPointerAddressSpace`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetPointerAddressSpace'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPointerType(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMPointerType@LLVMPointerType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPointerType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetArrayLength(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetArrayLength@LLVMGetArrayLength`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetArrayLength'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMArrayType(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMArrayType@LLVMArrayType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMArrayType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetElementType(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetElementType@LLVMGetElementType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetElementType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsOpaqueStruct(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsOpaqueStruct@LLVMIsOpaqueStruct`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsOpaqueStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsPackedStruct(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsPackedStruct@LLVMIsPackedStruct`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsPackedStruct'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetStructElementTypes(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetStructElementTypes@LLVMGetStructElementTypes`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetStructElementTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCountStructElementTypes(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountStructElementTypes@LLVMCountStructElementTypes`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCountStructElementTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMStructSetBody(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMStructSetBody@LLVMStructSetBody`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMStructSetBody'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetStructName(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetStructName@LLVMGetStructName`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetStructName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMStructCreateNamed(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMStructCreateNamed@LLVMStructCreateNamed`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMStructCreateNamed'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMStructType(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMStructType@LLVMStructType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMStructType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMStructTypeInContext(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMStructTypeInContext@LLVMStructTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMStructTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetParamTypes(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetParamTypes@LLVMGetParamTypes`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetParamTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCountParamTypes(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMCountParamTypes@LLVMCountParamTypes`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCountParamTypes'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetReturnType(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetReturnType@LLVMGetReturnType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetReturnType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIsFunctionVarArg(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMIsFunctionVarArg@LLVMIsFunctionVarArg`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIsFunctionVarArg'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMFunctionType(System.IntPtr,System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `LLVMFunctionType@LLVMFunctionType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMFunctionType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPPCFP128Type">
<summary>
 P/Invoke function for `LLVMPPCFP128Type@LLVMPPCFP128Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPPCFP128Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMFP128Type">
<summary>
 P/Invoke function for `LLVMFP128Type@LLVMFP128Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMFP128Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMX86FP80Type">
<summary>
 P/Invoke function for `LLVMX86FP80Type@LLVMX86FP80Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMX86FP80Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDoubleType">
<summary>
 P/Invoke function for `LLVMDoubleType@LLVMDoubleType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDoubleType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMFloatType">
<summary>
 P/Invoke function for `LLVMFloatType@LLVMFloatType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMFloatType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMHalfType">
<summary>
 P/Invoke function for `LLVMHalfType@LLVMHalfType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMHalfType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPPCFP128TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPPCFP128TypeInContext@LLVMPPCFP128TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPPCFP128TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMFP128TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMFP128TypeInContext@LLVMFP128TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMFP128TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMX86FP80TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMX86FP80TypeInContext@LLVMX86FP80TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMX86FP80TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDoubleTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDoubleTypeInContext@LLVMDoubleTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDoubleTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMFloatTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMFloatTypeInContext@LLVMFloatTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMFloatTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMHalfTypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMHalfTypeInContext@LLVMHalfTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMHalfTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetIntTypeWidth(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetIntTypeWidth@LLVMGetIntTypeWidth`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetIntTypeWidth'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIntType(System.UInt32)">
<summary>
 P/Invoke function for `LLVMIntType@LLVMIntType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIntType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt64Type">
<summary>
 P/Invoke function for `LLVMInt64Type@LLVMInt64Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt64Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt32Type">
<summary>
 P/Invoke function for `LLVMInt32Type@LLVMInt32Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt32Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt16Type">
<summary>
 P/Invoke function for `LLVMInt16Type@LLVMInt16Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt16Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt8Type">
<summary>
 P/Invoke function for `LLVMInt8Type@LLVMInt8Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt8Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt1Type">
<summary>
 P/Invoke function for `LLVMInt1Type@LLVMInt1Type`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt1Type'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMIntTypeInContext(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `LLVMIntTypeInContext@LLVMIntTypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMIntTypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt64TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt64TypeInContext@LLVMInt64TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt64TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt32TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt32TypeInContext@LLVMInt32TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt32TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt16TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt16TypeInContext@LLVMInt16TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt16TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt8TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt8TypeInContext@LLVMInt8TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt8TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInt1TypeInContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInt1TypeInContext@LLVMInt1TypeInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInt1TypeInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPrintTypeToString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPrintTypeToString@LLVMPrintTypeToString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPrintTypeToString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDumpType(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDumpType@LLVMDumpType`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDumpType'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetTypeContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetTypeContext@LLVMGetTypeContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetTypeContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMTypeIsSized(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMTypeIsSized@LLVMTypeIsSized`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMTypeIsSized'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetTypeKind(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetTypeKind@LLVMGetTypeKind`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetTypeKind'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetPreviousFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetPreviousFunction@LLVMGetPreviousFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetPreviousFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNextFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetNextFunction@LLVMGetNextFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNextFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetLastFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetLastFunction@LLVMGetLastFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetLastFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetFirstFunction(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetFirstFunction@LLVMGetFirstFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetFirstFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNamedFunction(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetNamedFunction@LLVMGetNamedFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNamedFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddFunction(System.IntPtr,System.String,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddFunction@LLVMAddFunction`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMAddNamedMetadataOperand(System.IntPtr,System.String,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMAddNamedMetadataOperand@LLVMAddNamedMetadataOperand`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMAddNamedMetadataOperand'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNamedMetadataOperands(System.IntPtr,System.String,System.IntPtr*)">
<summary>
 P/Invoke function for `LLVMGetNamedMetadataOperands@LLVMGetNamedMetadataOperands`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNamedMetadataOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetNamedMetadataNumOperands(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetNamedMetadataNumOperands@LLVMGetNamedMetadataNumOperands`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetNamedMetadataNumOperands'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetTypeByName(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMGetTypeByName@LLVMGetTypeByName`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetTypeByName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetModuleContext(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetModuleContext@LLVMGetModuleContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetModuleContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetModuleInlineAsm(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetModuleInlineAsm@LLVMSetModuleInlineAsm`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetModuleInlineAsm'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPrintModuleToString(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMPrintModuleToString@LLVMPrintModuleToString`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPrintModuleToString'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMPrintModuleToFile(System.IntPtr,System.String,System.SByte**)">
<summary>
 P/Invoke function for `LLVMPrintModuleToFile@LLVMPrintModuleToFile`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMPrintModuleToFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDumpModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDumpModule@LLVMDumpModule`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDumpModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetTarget(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetTarget@LLVMSetTarget`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetTarget'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetTarget(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetTarget@LLVMGetTarget`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetTarget'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMSetDataLayout(System.IntPtr,System.String)">
<summary>
 P/Invoke function for `LLVMSetDataLayout@LLVMSetDataLayout`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMSetDataLayout'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetDataLayout(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMGetDataLayout@LLVMGetDataLayout`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetDataLayout'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDisposeModule(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeModule@LLVMDisposeModule`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDisposeModule'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMModuleCreateWithNameInContext(System.String,System.IntPtr)">
<summary>
 P/Invoke function for `LLVMModuleCreateWithNameInContext@LLVMModuleCreateWithNameInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMModuleCreateWithNameInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMModuleCreateWithName(System.String)">
<summary>
 P/Invoke function for `LLVMModuleCreateWithName@LLVMModuleCreateWithName`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMModuleCreateWithName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetMDKindID(System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetMDKindID@LLVMGetMDKindID`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetMDKindID'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetMDKindIDInContext(System.IntPtr,System.String,System.UInt32)">
<summary>
 P/Invoke function for `LLVMGetMDKindIDInContext@LLVMGetMDKindIDInContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetMDKindIDInContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMContextDispose(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMContextDispose@LLVMContextDispose`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMContextDispose'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMGetGlobalContext">
<summary>
 P/Invoke function for `LLVMGetGlobalContext@LLVMGetGlobalContext`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMGetGlobalContext'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMContextCreate">
<summary>
 P/Invoke function for `LLVMContextCreate@LLVMContextCreate`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMContextCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMEnablePrettyStackTrace">
<summary>
 P/Invoke function for `LLVMEnablePrettyStackTrace@LLVMEnablePrettyStackTrace`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMEnablePrettyStackTrace'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMResetFatalErrorHandler">
<summary>
 P/Invoke function for `LLVMResetFatalErrorHandler@LLVMResetFatalErrorHandler`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMResetFatalErrorHandler'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMDisposeMessage(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMDisposeMessage@LLVMDisposeMessage`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMDisposeMessage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMCreateMessage(System.String)">
<summary>
 P/Invoke function for `LLVMCreateMessage@LLVMCreateMessage`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMCreateMessage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMShutdown">
<summary>
 P/Invoke function for `LLVMShutdown@LLVMShutdown`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMShutdown'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.LLVMInterop.LLVMInitializeCore(System.IntPtr)">
<summary>
 P/Invoke function for `LLVMInitializeCore@LLVMInitializeCore`.
</summary>
</member>
<member name="P:Alea.LLVMInterop.LLVMInitializeCore'">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LLVMInterop">
<summary>
 Raw P/Invoke types and functions for LLVM.
</summary>
</member>
<member name="T:Alea.LLVMInterop1">
<summary>
 Raw P/Invoke types and functions for LLVM.
</summary>
</member>
<member name="T:Alea.LLVMInterop2">
<summary>
 Raw P/Invoke types and functions for LLVM.
</summary>
</member>
<member name="T:Alea.NVVMInterop.nvvmProgram">
<summary>
 P/Invoke alias type `nativeint -&gt; nvvmProgram`.
</summary>
</member>
<member name="T:Alea.NVVMInterop.nvvmResult">
<summary>
 P/Invoke alias type `__nvvmResult__ -&gt; nvvmResult`.
</summary>
</member>
<member name="T:Alea.NVVMInterop.__nvvmResult__">
<summary>
 P/Invoke enum type `__nvvmResult__` (10 enumerators).
</summary>
</member>
<member name="T:Alea.NVVMInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmGetErrorStringEx(Alea.NVVMInterop.__nvvmResult__)">
<summary>
 Gets error string.
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmSafeCall(Alea.NVVMInterop.__nvvmResult__)">
<summary>
 Throws exception when the result is not success.
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmGetProgramLog(System.IntPtr,System.Text.StringBuilder)">
<summary>
 P/Invoke function for `nvvmGetProgramLog@nvvmGetProgramLog`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmGetProgramLog'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmGetProgramLogSize(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmGetProgramLogSize@nvvmGetProgramLogSize`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmGetProgramLogSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmGetCompiledResult(System.IntPtr,System.Byte*)">
<summary>
 P/Invoke function for `nvvmGetCompiledResult@nvvmGetCompiledResult`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmGetCompiledResult'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmGetCompiledResultSize(System.IntPtr,System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmGetCompiledResultSize@nvvmGetCompiledResultSize`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmGetCompiledResultSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmVerifyProgram(System.IntPtr,System.Int32,System.SByte**)">
<summary>
 P/Invoke function for `nvvmVerifyProgram@nvvmVerifyProgram`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmVerifyProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmCompileProgram(System.IntPtr,System.Int32,System.SByte**)">
<summary>
 P/Invoke function for `nvvmCompileProgram@nvvmCompileProgram`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmCompileProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmAddModuleToProgram(System.IntPtr,System.Byte*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `nvvmAddModuleToProgram@nvvmAddModuleToProgram`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmAddModuleToProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmDestroyProgram(System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmDestroyProgram@nvvmDestroyProgram`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmDestroyProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmCreateProgram(System.IntPtr*)">
<summary>
 P/Invoke function for `nvvmCreateProgram@nvvmCreateProgram`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmCreateProgram'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmVersion(System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `nvvmVersion@nvvmVersion`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.NVVMInterop.nvvmGetErrorString(Alea.NVVMInterop.__nvvmResult__)">
<summary>
 P/Invoke function for `nvvmGetErrorString@nvvmGetErrorString`.
</summary>
</member>
<member name="P:Alea.NVVMInterop.nvvmGetErrorString'">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.NVVMInterop.NVVMException">
<summary>
 Exception of P/Invoke result enum.
</summary>
</member>
<member name="T:Alea.NVVMInterop">
<summary>
 Raw P/Invoke types and functions for NVVM.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d11DeviceList">
<summary>
 P/Invoke alias type `CUd3d11DeviceList_enum -&gt; CUd3d11DeviceList`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d11DeviceList_enum">
<summary>
 P/Invoke enum type `CUd3d11DeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUD3D10map_flags">
<summary>
 P/Invoke alias type `CUD3D10map_flags_enum -&gt; CUD3D10map_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUD3D10map_flags_enum">
<summary>
 P/Invoke enum type `CUD3D10map_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUD3D10register_flags">
<summary>
 P/Invoke alias type `CUD3D10register_flags_enum -&gt; CUD3D10register_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUD3D10register_flags_enum">
<summary>
 P/Invoke enum type `CUD3D10register_flags_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d10DeviceList">
<summary>
 P/Invoke alias type `CUd3d10DeviceList_enum -&gt; CUd3d10DeviceList`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d10DeviceList_enum">
<summary>
 P/Invoke enum type `CUd3d10DeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d9map_flags">
<summary>
 P/Invoke alias type `CUd3d9map_flags_enum -&gt; CUd3d9map_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d9map_flags_enum">
<summary>
 P/Invoke enum type `CUd3d9map_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d9register_flags">
<summary>
 P/Invoke alias type `CUd3d9register_flags_enum -&gt; CUd3d9register_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d9register_flags_enum">
<summary>
 P/Invoke enum type `CUd3d9register_flags_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d9DeviceList">
<summary>
 P/Invoke alias type `CUd3d9DeviceList_enum -&gt; CUd3d9DeviceList`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUd3d9DeviceList_enum">
<summary>
 P/Invoke enum type `CUd3d9DeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUGLmap_flags">
<summary>
 P/Invoke alias type `CUGLmap_flags_enum -&gt; CUGLmap_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUGLmap_flags_enum">
<summary>
 P/Invoke enum type `CUGLmap_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUGLDeviceList">
<summary>
 P/Invoke alias type `CUGLDeviceList_enum -&gt; CUGLDeviceList`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUGLDeviceList_enum">
<summary>
 P/Invoke enum type `CUGLDeviceList_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.HGPUNV">
<summary>
 P/Invoke alias type `nativeint -&gt; HGPUNV`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.GLuint">
<summary>
 P/Invoke alias type `uint32 -&gt; GLuint`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.GLenum">
<summary>
 P/Invoke alias type `int -&gt; GLenum`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUoutput_mode">
<summary>
 P/Invoke alias type `CUoutput_mode_enum -&gt; CUoutput_mode`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUoutput_mode_enum">
<summary>
 P/Invoke enum type `CUoutput_mode_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS">
<summary>
 P/Invoke alias type `CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st -&gt; CUDA_POINTER_ATTRIBUTE_P2P_TOKENS`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st">
<summary>
 P/Invoke struct type `CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_RESOURCE_VIEW_DESC">
<summary>
 P/Invoke alias type `CUDA_RESOURCE_VIEW_DESC_st -&gt; CUDA_RESOURCE_VIEW_DESC`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_RESOURCE_VIEW_DESC_st">
<summary>
 P/Invoke struct type `CUDA_RESOURCE_VIEW_DESC_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUresourceViewFormat">
<summary>
 P/Invoke alias type `CUresourceViewFormat_enum -&gt; CUresourceViewFormat`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUresourceViewFormat_enum">
<summary>
 P/Invoke enum type `CUresourceViewFormat_enum` (35 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_TEXTURE_DESC">
<summary>
 P/Invoke alias type `CUDA_TEXTURE_DESC_st -&gt; CUDA_TEXTURE_DESC`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_TEXTURE_DESC_st">
<summary>
 P/Invoke struct type `CUDA_TEXTURE_DESC_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR">
<summary>
 P/Invoke alias type `CUDA_ARRAY3D_DESCRIPTOR_st -&gt; CUDA_ARRAY3D_DESCRIPTOR`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st">
<summary>
 P/Invoke struct type `CUDA_ARRAY3D_DESCRIPTOR_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_ARRAY_DESCRIPTOR">
<summary>
 P/Invoke alias type `CUDA_ARRAY_DESCRIPTOR_st -&gt; CUDA_ARRAY_DESCRIPTOR`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st">
<summary>
 P/Invoke struct type `CUDA_ARRAY_DESCRIPTOR_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_MEMCPY3D_PEER">
<summary>
 P/Invoke alias type `CUDA_MEMCPY3D_PEER_st -&gt; CUDA_MEMCPY3D_PEER`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_MEMCPY3D_PEER_st">
<summary>
 P/Invoke struct type `CUDA_MEMCPY3D_PEER_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_MEMCPY3D">
<summary>
 P/Invoke alias type `CUDA_MEMCPY3D_st -&gt; CUDA_MEMCPY3D`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_MEMCPY3D_st">
<summary>
 P/Invoke struct type `CUDA_MEMCPY3D_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_MEMCPY2D">
<summary>
 P/Invoke alias type `CUDA_MEMCPY2D_st -&gt; CUDA_MEMCPY2D`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUDA_MEMCPY2D_st">
<summary>
 P/Invoke struct type `CUDA_MEMCPY2D_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUresult">
<summary>
 P/Invoke alias type `cudaError_enum -&gt; CUresult`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.cudaError_enum">
<summary>
 P/Invoke enum type `cudaError_enum` (58 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUresourcetype">
<summary>
 P/Invoke alias type `CUresourcetype_enum -&gt; CUresourcetype`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUresourcetype_enum">
<summary>
 P/Invoke enum type `CUresourcetype_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUlimit">
<summary>
 P/Invoke alias type `CUlimit_enum -&gt; CUlimit`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUlimit_enum">
<summary>
 P/Invoke enum type `CUlimit_enum` (6 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUarray_cubemap_face">
<summary>
 P/Invoke alias type `CUarray_cubemap_face_enum -&gt; CUarray_cubemap_face`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUarray_cubemap_face_enum">
<summary>
 P/Invoke enum type `CUarray_cubemap_face_enum` (6 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUgraphicsMapResourceFlags">
<summary>
 P/Invoke alias type `CUgraphicsMapResourceFlags_enum -&gt; CUgraphicsMapResourceFlags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUgraphicsMapResourceFlags_enum">
<summary>
 P/Invoke enum type `CUgraphicsMapResourceFlags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUgraphicsRegisterFlags">
<summary>
 P/Invoke alias type `CUgraphicsRegisterFlags_enum -&gt; CUgraphicsRegisterFlags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUgraphicsRegisterFlags_enum">
<summary>
 P/Invoke enum type `CUgraphicsRegisterFlags_enum` (5 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUlinkState">
<summary>
 P/Invoke alias type `nativeint -&gt; CUlinkState`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjitInputType">
<summary>
 P/Invoke alias type `CUjitInputType_enum -&gt; CUjitInputType`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjitInputType_enum">
<summary>
 P/Invoke enum type `CUjitInputType_enum` (6 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_cacheMode">
<summary>
 P/Invoke alias type `CUjit_cacheMode_enum -&gt; CUjit_cacheMode`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_cacheMode_enum">
<summary>
 P/Invoke enum type `CUjit_cacheMode_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_fallback">
<summary>
 P/Invoke alias type `CUjit_fallback_enum -&gt; CUjit_fallback`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_fallback_enum">
<summary>
 P/Invoke enum type `CUjit_fallback_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_target">
<summary>
 P/Invoke alias type `CUjit_target_enum -&gt; CUjit_target`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_target_enum">
<summary>
 P/Invoke enum type `CUjit_target_enum` (11 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_option">
<summary>
 P/Invoke alias type `CUjit_option_enum -&gt; CUjit_option`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUjit_option_enum">
<summary>
 P/Invoke enum type `CUjit_option_enum` (16 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUcomputemode">
<summary>
 P/Invoke alias type `CUcomputemode_enum -&gt; CUcomputemode`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUcomputemode_enum">
<summary>
 P/Invoke enum type `CUcomputemode_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUmemorytype">
<summary>
 P/Invoke alias type `CUmemorytype_enum -&gt; CUmemorytype`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUmemorytype_enum">
<summary>
 P/Invoke enum type `CUmemorytype_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUsharedconfig">
<summary>
 P/Invoke alias type `CUsharedconfig_enum -&gt; CUsharedconfig`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUsharedconfig_enum">
<summary>
 P/Invoke enum type `CUsharedconfig_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfunc_cache">
<summary>
 P/Invoke alias type `CUfunc_cache_enum -&gt; CUfunc_cache`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfunc_cache_enum">
<summary>
 P/Invoke enum type `CUfunc_cache_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfunction_attribute">
<summary>
 P/Invoke alias type `CUfunction_attribute_enum -&gt; CUfunction_attribute`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfunction_attribute_enum">
<summary>
 P/Invoke enum type `CUfunction_attribute_enum` (9 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUpointer_attribute">
<summary>
 P/Invoke alias type `CUpointer_attribute_enum -&gt; CUpointer_attribute`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUpointer_attribute_enum">
<summary>
 P/Invoke enum type `CUpointer_attribute_enum` (8 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUdevprop">
<summary>
 P/Invoke alias type `CUdevprop_st -&gt; CUdevprop`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUdevprop_st">
<summary>
 P/Invoke struct type `CUdevprop_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUdevice_attribute">
<summary>
 P/Invoke alias type `CUdevice_attribute_enum -&gt; CUdevice_attribute`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUdevice_attribute_enum">
<summary>
 P/Invoke enum type `CUdevice_attribute_enum` (91 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfilter_mode">
<summary>
 P/Invoke alias type `CUfilter_mode_enum -&gt; CUfilter_mode`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfilter_mode_enum">
<summary>
 P/Invoke enum type `CUfilter_mode_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUaddress_mode">
<summary>
 P/Invoke alias type `CUaddress_mode_enum -&gt; CUaddress_mode`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUaddress_mode_enum">
<summary>
 P/Invoke enum type `CUaddress_mode_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUarray_format">
<summary>
 P/Invoke alias type `CUarray_format_enum -&gt; CUarray_format`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUarray_format_enum">
<summary>
 P/Invoke enum type `CUarray_format_enum` (8 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUevent_flags">
<summary>
 P/Invoke alias type `CUevent_flags_enum -&gt; CUevent_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUevent_flags_enum">
<summary>
 P/Invoke enum type `CUevent_flags_enum` (4 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUstream_flags">
<summary>
 P/Invoke alias type `CUstream_flags_enum -&gt; CUstream_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUstream_flags_enum">
<summary>
 P/Invoke enum type `CUstream_flags_enum` (2 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUctx_flags">
<summary>
 P/Invoke alias type `CUctx_flags_enum -&gt; CUctx_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUctx_flags_enum">
<summary>
 P/Invoke enum type `CUctx_flags_enum` (9 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUmemAttach_flags">
<summary>
 P/Invoke alias type `CUmemAttach_flags_enum -&gt; CUmemAttach_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUmemAttach_flags_enum">
<summary>
 P/Invoke enum type `CUmemAttach_flags_enum` (3 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUipcMem_flags">
<summary>
 P/Invoke alias type `CUipcMem_flags_enum -&gt; CUipcMem_flags`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUipcMem_flags_enum">
<summary>
 P/Invoke enum type `CUipcMem_flags_enum` (1 enumerators).
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUipcMemHandle">
<summary>
 P/Invoke alias type `CUipcMemHandle_st -&gt; CUipcMemHandle`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUipcMemHandle_st">
<summary>
 P/Invoke struct type `CUipcMemHandle_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUipcEventHandle">
<summary>
 P/Invoke alias type `CUipcEventHandle_st -&gt; CUipcEventHandle`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUipcEventHandle_st">
<summary>
 P/Invoke struct type `CUipcEventHandle_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUuuid">
<summary>
 P/Invoke alias type `CUuuid_st -&gt; CUuuid`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUuuid_st">
<summary>
 P/Invoke struct type `CUuuid_st`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUsurfObject">
<summary>
 P/Invoke alias type `uint64 -&gt; CUsurfObject`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUtexObject">
<summary>
 P/Invoke alias type `uint64 -&gt; CUtexObject`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUgraphicsResource">
<summary>
 P/Invoke alias type `nativeint -&gt; CUgraphicsResource`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUstream">
<summary>
 P/Invoke alias type `nativeint -&gt; CUstream`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUevent">
<summary>
 P/Invoke alias type `nativeint -&gt; CUevent`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUsurfref">
<summary>
 P/Invoke alias type `nativeint -&gt; CUsurfref`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUtexref">
<summary>
 P/Invoke alias type `nativeint -&gt; CUtexref`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUmipmappedArray">
<summary>
 P/Invoke alias type `nativeint -&gt; CUmipmappedArray`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUarray">
<summary>
 P/Invoke alias type `nativeint -&gt; CUarray`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUfunction">
<summary>
 P/Invoke alias type `nativeint -&gt; CUfunction`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUmodule">
<summary>
 P/Invoke alias type `nativeint -&gt; CUmodule`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUcontext">
<summary>
 P/Invoke alias type `nativeint -&gt; CUcontext`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUdevice">
<summary>
 P/Invoke alias type `int -&gt; CUdevice`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.CUdeviceptr">
<summary>
 P/Invoke alias type `nativeint -&gt; CUdeviceptr`.
</summary>
</member>
<member name="T:Alea.CUDAInterop.size_t">
<summary>
 P/Invoke alias type `nativeint -&gt; size_t`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.initCUDA">
<summary>
 A lazy value of init CUDA environment.
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuSafeCall(Alea.CUDAInterop.cudaError_enum)">
<summary>
 Throws an exception when the result is not successful.
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D11GetDirect3DDevice(System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D11GetDirect3DDevice@cuD3D11GetDirect3DDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D11GetDirect3DDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D11CtxCreateOnDevice(System.IntPtr*,System.UInt32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuD3D11CtxCreateOnDevice@cuD3D11CtxCreateOnDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D11CtxCreateOnDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D11CtxCreate(System.IntPtr*,System.Int32*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D11CtxCreate@cuD3D11CtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D11CtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsD3D11RegisterResource(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsD3D11RegisterResource@cuGraphicsD3D11RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsD3D11RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D11GetDevices(System.UInt32*,System.Int32*,System.UInt32,System.IntPtr,Alea.CUDAInterop.CUd3d11DeviceList_enum)">
<summary>
 P/Invoke function for `cuD3D11GetDevices@cuD3D11GetDevices`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D11GetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D11GetDevice(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D11GetDevice@cuD3D11GetDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D11GetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10ResourceGetSurfaceDimensions(System.IntPtr*,System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetSurfaceDimensions@cuD3D10ResourceGetSurfaceDimensions_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10ResourceGetSurfaceDimensions'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10ResourceGetMappedPitch(System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedPitch@cuD3D10ResourceGetMappedPitch_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10ResourceGetMappedPitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10ResourceGetMappedSize(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedSize@cuD3D10ResourceGetMappedSize_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10ResourceGetMappedSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10ResourceGetMappedPointer(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedPointer@cuD3D10ResourceGetMappedPointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10ResourceGetMappedPointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10ResourceGetMappedArray(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceGetMappedArray@cuD3D10ResourceGetMappedArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10ResourceGetMappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10ResourceSetMapFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10ResourceSetMapFlags@cuD3D10ResourceSetMapFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10ResourceSetMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10UnmapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D10UnmapResources@cuD3D10UnmapResources`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10UnmapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10MapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D10MapResources@cuD3D10MapResources`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10MapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10UnregisterResource(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D10UnregisterResource@cuD3D10UnregisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10UnregisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10RegisterResource(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D10RegisterResource@cuD3D10RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10GetDirect3DDevice(System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D10GetDirect3DDevice@cuD3D10GetDirect3DDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10GetDirect3DDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10CtxCreateOnDevice(System.IntPtr*,System.UInt32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuD3D10CtxCreateOnDevice@cuD3D10CtxCreateOnDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10CtxCreateOnDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10CtxCreate(System.IntPtr*,System.Int32*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D10CtxCreate@cuD3D10CtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10CtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsD3D10RegisterResource(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsD3D10RegisterResource@cuGraphicsD3D10RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsD3D10RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10GetDevices(System.UInt32*,System.Int32*,System.UInt32,System.IntPtr,Alea.CUDAInterop.CUd3d10DeviceList_enum)">
<summary>
 P/Invoke function for `cuD3D10GetDevices@cuD3D10GetDevices`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10GetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D10GetDevice(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D10GetDevice@cuD3D10GetDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D10GetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9UnregisterVertexBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9UnregisterVertexBuffer@cuD3D9UnregisterVertexBuffer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9UnregisterVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9UnmapVertexBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9UnmapVertexBuffer@cuD3D9UnmapVertexBuffer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9UnmapVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9MapVertexBuffer(System.IntPtr*,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9MapVertexBuffer@cuD3D9MapVertexBuffer_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9MapVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9RegisterVertexBuffer(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9RegisterVertexBuffer@cuD3D9RegisterVertexBuffer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9RegisterVertexBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9End">
<summary>
 P/Invoke function for `cuD3D9End@cuD3D9End`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9End'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9Begin(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9Begin@cuD3D9Begin`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9Begin'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9ResourceGetMappedPitch(System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedPitch@cuD3D9ResourceGetMappedPitch_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9ResourceGetMappedPitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9ResourceGetMappedSize(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedSize@cuD3D9ResourceGetMappedSize_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9ResourceGetMappedSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9ResourceGetMappedPointer(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedPointer@cuD3D9ResourceGetMappedPointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9ResourceGetMappedPointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9ResourceGetMappedArray(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetMappedArray@cuD3D9ResourceGetMappedArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9ResourceGetMappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9ResourceGetSurfaceDimensions(System.IntPtr*,System.IntPtr*,System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceGetSurfaceDimensions@cuD3D9ResourceGetSurfaceDimensions_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9ResourceGetSurfaceDimensions'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9ResourceSetMapFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9ResourceSetMapFlags@cuD3D9ResourceSetMapFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9ResourceSetMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9UnmapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D9UnmapResources@cuD3D9UnmapResources`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9UnmapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9MapResources(System.UInt32,System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D9MapResources@cuD3D9MapResources`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9MapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9UnregisterResource(System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9UnregisterResource@cuD3D9UnregisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9UnregisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9RegisterResource(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuD3D9RegisterResource@cuD3D9RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsD3D9RegisterResource(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsD3D9RegisterResource@cuGraphicsD3D9RegisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsD3D9RegisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9GetDirect3DDevice(System.IntPtr*)">
<summary>
 P/Invoke function for `cuD3D9GetDirect3DDevice@cuD3D9GetDirect3DDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9GetDirect3DDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9CtxCreateOnDevice(System.IntPtr*,System.UInt32,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuD3D9CtxCreateOnDevice@cuD3D9CtxCreateOnDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9CtxCreateOnDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9CtxCreate(System.IntPtr*,System.Int32*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuD3D9CtxCreate@cuD3D9CtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9CtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9GetDevices(System.UInt32*,System.Int32*,System.UInt32,System.IntPtr,Alea.CUDAInterop.CUd3d9DeviceList_enum)">
<summary>
 P/Invoke function for `cuD3D9GetDevices@cuD3D9GetDevices`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9GetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuD3D9GetDevice(System.Int32*,System.String)">
<summary>
 P/Invoke function for `cuD3D9GetDevice@cuD3D9GetDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuD3D9GetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLUnmapBufferObjectAsync(System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuGLUnmapBufferObjectAsync@cuGLUnmapBufferObjectAsync`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLUnmapBufferObjectAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLMapBufferObjectAsync(System.IntPtr*,System.IntPtr*,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuGLMapBufferObjectAsync@cuGLMapBufferObjectAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLMapBufferObjectAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLSetBufferObjectMapFlags(System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuGLSetBufferObjectMapFlags@cuGLSetBufferObjectMapFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLSetBufferObjectMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLUnregisterBufferObject(System.UInt32)">
<summary>
 P/Invoke function for `cuGLUnregisterBufferObject@cuGLUnregisterBufferObject`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLUnregisterBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLUnmapBufferObject(System.UInt32)">
<summary>
 P/Invoke function for `cuGLUnmapBufferObject@cuGLUnmapBufferObject`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLUnmapBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLMapBufferObject(System.IntPtr*,System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuGLMapBufferObject@cuGLMapBufferObject_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLMapBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLRegisterBufferObject(System.UInt32)">
<summary>
 P/Invoke function for `cuGLRegisterBufferObject@cuGLRegisterBufferObject`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLRegisterBufferObject'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLInit">
<summary>
 P/Invoke function for `cuGLInit@cuGLInit`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLInit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLCtxCreate(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `cuGLCtxCreate@cuGLCtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLCtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGLGetDevices(System.UInt32*,System.Int32*,System.UInt32,Alea.CUDAInterop.CUGLDeviceList_enum)">
<summary>
 P/Invoke function for `cuGLGetDevices@cuGLGetDevices_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGLGetDevices'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuWGLGetDevice(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuWGLGetDevice@cuWGLGetDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuWGLGetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsGLRegisterImage(System.IntPtr*,System.UInt32,System.Int32,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsGLRegisterImage@cuGraphicsGLRegisterImage`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsGLRegisterImage'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsGLRegisterBuffer(System.IntPtr*,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsGLRegisterBuffer@cuGraphicsGLRegisterBuffer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsGLRegisterBuffer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuProfilerStop">
<summary>
 P/Invoke function for `cuProfilerStop@cuProfilerStop`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuProfilerStop'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuProfilerStart">
<summary>
 P/Invoke function for `cuProfilerStart@cuProfilerStart`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuProfilerStart'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuProfilerInitialize(System.String,System.String,Alea.CUDAInterop.CUoutput_mode_enum)">
<summary>
 P/Invoke function for `cuProfilerInitialize@cuProfilerInitialize`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuProfilerInitialize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGetExportTable(System.IntPtr*,Alea.CUDAInterop.CUuuid_st*)">
<summary>
 P/Invoke function for `cuGetExportTable@cuGetExportTable`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGetExportTable'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsUnmapResources(System.UInt32,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsUnmapResources@cuGraphicsUnmapResources`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsUnmapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsMapResources(System.UInt32,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsMapResources@cuGraphicsMapResources`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsMapResources'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsResourceSetMapFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsResourceSetMapFlags@cuGraphicsResourceSetMapFlags_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsResourceSetMapFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsResourceGetMappedPointer(System.IntPtr*,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsResourceGetMappedPointer@cuGraphicsResourceGetMappedPointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsResourceGetMappedPointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsResourceGetMappedMipmappedArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsResourceGetMappedMipmappedArray@cuGraphicsResourceGetMappedMipmappedArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsResourceGetMappedMipmappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsSubResourceGetMappedArray(System.IntPtr*,System.IntPtr,System.UInt32,System.UInt32)">
<summary>
 P/Invoke function for `cuGraphicsSubResourceGetMappedArray@cuGraphicsSubResourceGetMappedArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsSubResourceGetMappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGraphicsUnregisterResource(System.IntPtr)">
<summary>
 P/Invoke function for `cuGraphicsUnregisterResource@cuGraphicsUnregisterResource`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGraphicsUnregisterResource'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxDisablePeerAccess(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxDisablePeerAccess@cuCtxDisablePeerAccess`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxDisablePeerAccess'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxEnablePeerAccess(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuCtxEnablePeerAccess@cuCtxEnablePeerAccess`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxEnablePeerAccess'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceCanAccessPeer(System.Int32*,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceCanAccessPeer@cuDeviceCanAccessPeer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceCanAccessPeer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuSurfObjectDestroy(System.UInt64)">
<summary>
 P/Invoke function for `cuSurfObjectDestroy@cuSurfObjectDestroy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuSurfObjectDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexObjectGetResourceViewDesc(Alea.CUDAInterop.CUDA_RESOURCE_VIEW_DESC_st*,System.UInt64)">
<summary>
 P/Invoke function for `cuTexObjectGetResourceViewDesc@cuTexObjectGetResourceViewDesc`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexObjectGetResourceViewDesc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexObjectGetTextureDesc(Alea.CUDAInterop.CUDA_TEXTURE_DESC_st*,System.UInt64)">
<summary>
 P/Invoke function for `cuTexObjectGetTextureDesc@cuTexObjectGetTextureDesc`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexObjectGetTextureDesc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexObjectDestroy(System.UInt64)">
<summary>
 P/Invoke function for `cuTexObjectDestroy@cuTexObjectDestroy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexObjectDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuSurfRefGetArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuSurfRefGetArray@cuSurfRefGetArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuSurfRefGetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuSurfRefSetArray(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuSurfRefSetArray@cuSurfRefSetArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuSurfRefSetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefDestroy@cuTexRefDestroy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefCreate(System.IntPtr*)">
<summary>
 P/Invoke function for `cuTexRefCreate@cuTexRefCreate`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetFlags(System.UInt32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetFlags@cuTexRefGetFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetMaxAnisotropy(System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMaxAnisotropy@cuTexRefGetMaxAnisotropy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetMaxAnisotropy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetMipmapLevelClamp(System.Single*,System.Single*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmapLevelClamp@cuTexRefGetMipmapLevelClamp`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetMipmapLevelClamp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetMipmapLevelBias(System.Single*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmapLevelBias@cuTexRefGetMipmapLevelBias`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetMipmapLevelBias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetMipmapFilterMode(Alea.CUDAInterop.CUfilter_mode_enum*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmapFilterMode@cuTexRefGetMipmapFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetMipmapFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetFormat(Alea.CUDAInterop.CUarray_format_enum*,System.Int32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetFormat@cuTexRefGetFormat`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetFormat'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetFilterMode(Alea.CUDAInterop.CUfilter_mode_enum*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetFilterMode@cuTexRefGetFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetAddressMode(Alea.CUDAInterop.CUaddress_mode_enum*,System.IntPtr,System.Int32)">
<summary>
 P/Invoke function for `cuTexRefGetAddressMode@cuTexRefGetAddressMode`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetAddressMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetMipmappedArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetMipmappedArray@cuTexRefGetMipmappedArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetMipmappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetArray(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetArray@cuTexRefGetArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefGetAddress(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefGetAddress@cuTexRefGetAddress_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefGetAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetFlags(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetFlags@cuTexRefSetFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetMaxAnisotropy(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetMaxAnisotropy@cuTexRefSetMaxAnisotropy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetMaxAnisotropy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetMipmapLevelClamp(System.IntPtr,System.Single,System.Single)">
<summary>
 P/Invoke function for `cuTexRefSetMipmapLevelClamp@cuTexRefSetMipmapLevelClamp`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetMipmapLevelClamp'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetMipmapLevelBias(System.IntPtr,System.Single)">
<summary>
 P/Invoke function for `cuTexRefSetMipmapLevelBias@cuTexRefSetMipmapLevelBias`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetMipmapLevelBias'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetMipmapFilterMode(System.IntPtr,Alea.CUDAInterop.CUfilter_mode_enum)">
<summary>
 P/Invoke function for `cuTexRefSetMipmapFilterMode@cuTexRefSetMipmapFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetMipmapFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetFilterMode(System.IntPtr,Alea.CUDAInterop.CUfilter_mode_enum)">
<summary>
 P/Invoke function for `cuTexRefSetFilterMode@cuTexRefSetFilterMode`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetFilterMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetAddressMode(System.IntPtr,System.Int32,Alea.CUDAInterop.CUaddress_mode_enum)">
<summary>
 P/Invoke function for `cuTexRefSetAddressMode@cuTexRefSetAddressMode`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetAddressMode'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetFormat(System.IntPtr,Alea.CUDAInterop.CUarray_format_enum,System.Int32)">
<summary>
 P/Invoke function for `cuTexRefSetFormat@cuTexRefSetFormat`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetFormat'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetAddress2D(System.IntPtr,Alea.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st*,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefSetAddress2D@cuTexRefSetAddress2D_v3`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetAddress2D'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetAddress(System.IntPtr*,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuTexRefSetAddress@cuTexRefSetAddress_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetAddress'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetMipmappedArray(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetMipmappedArray@cuTexRefSetMipmappedArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetMipmappedArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuTexRefSetArray(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuTexRefSetArray@cuTexRefSetArray`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuTexRefSetArray'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuOccupancyMaxActiveBlocksPerMultiprocessor(System.Int32*,System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cuOccupancyMaxActiveBlocksPerMultiprocessor@cuOccupancyMaxActiveBlocksPerMultiprocessor`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuOccupancyMaxActiveBlocksPerMultiprocessor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuParamSetTexRef(System.IntPtr,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cuParamSetTexRef@cuParamSetTexRef`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuParamSetTexRef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLaunchGridAsync(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
<summary>
 P/Invoke function for `cuLaunchGridAsync@cuLaunchGridAsync`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLaunchGridAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLaunchGrid(System.IntPtr,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuLaunchGrid@cuLaunchGrid`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLaunchGrid'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLaunch(System.IntPtr)">
<summary>
 P/Invoke function for `cuLaunch@cuLaunch`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLaunch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuParamSetv(System.IntPtr,System.Int32,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuParamSetv@cuParamSetv`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuParamSetv'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuParamSetf(System.IntPtr,System.Int32,System.Single)">
<summary>
 P/Invoke function for `cuParamSetf@cuParamSetf`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuParamSetf'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuParamSeti(System.IntPtr,System.Int32,System.UInt32)">
<summary>
 P/Invoke function for `cuParamSeti@cuParamSeti`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuParamSeti'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuParamSetSize(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuParamSetSize@cuParamSetSize`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuParamSetSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuFuncSetSharedSize(System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuFuncSetSharedSize@cuFuncSetSharedSize`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuFuncSetSharedSize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuFuncSetBlockShape(System.IntPtr,System.Int32,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuFuncSetBlockShape@cuFuncSetBlockShape`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuFuncSetBlockShape'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLaunchKernel(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLaunchKernel@cuLaunchKernel`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLaunchKernel'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuFuncSetSharedMemConfig(System.IntPtr,Alea.CUDAInterop.CUsharedconfig_enum)">
<summary>
 P/Invoke function for `cuFuncSetSharedMemConfig@cuFuncSetSharedMemConfig`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuFuncSetSharedMemConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuFuncSetCacheConfig(System.IntPtr,Alea.CUDAInterop.CUfunc_cache_enum)">
<summary>
 P/Invoke function for `cuFuncSetCacheConfig@cuFuncSetCacheConfig`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuFuncSetCacheConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuFuncGetAttribute(System.Int32*,Alea.CUDAInterop.CUfunction_attribute_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuFuncGetAttribute@cuFuncGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuFuncGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuEventElapsedTime(System.Single*,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuEventElapsedTime@cuEventElapsedTime`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuEventElapsedTime'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuEventDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuEventDestroy@cuEventDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuEventDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuEventSynchronize(System.IntPtr)">
<summary>
 P/Invoke function for `cuEventSynchronize@cuEventSynchronize`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuEventSynchronize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuEventQuery(System.IntPtr)">
<summary>
 P/Invoke function for `cuEventQuery@cuEventQuery`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuEventQuery'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuEventRecord(System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuEventRecord@cuEventRecord`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuEventRecord'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuEventCreate(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuEventCreate@cuEventCreate`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuEventCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuStreamDestroy@cuStreamDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamSynchronize(System.IntPtr)">
<summary>
 P/Invoke function for `cuStreamSynchronize@cuStreamSynchronize`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamSynchronize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamQuery(System.IntPtr)">
<summary>
 P/Invoke function for `cuStreamQuery@cuStreamQuery`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamQuery'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamAttachMemAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuStreamAttachMemAsync@cuStreamAttachMemAsync`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamAttachMemAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamWaitEvent(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuStreamWaitEvent@cuStreamWaitEvent`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamWaitEvent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamGetFlags(System.IntPtr,System.UInt32*)">
<summary>
 P/Invoke function for `cuStreamGetFlags@cuStreamGetFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamGetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamGetPriority(System.IntPtr,System.Int32*)">
<summary>
 P/Invoke function for `cuStreamGetPriority@cuStreamGetPriority`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamGetPriority'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamCreateWithPriority(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `cuStreamCreateWithPriority@cuStreamCreateWithPriority`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamCreateWithPriority'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuStreamCreate(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuStreamCreate@cuStreamCreate`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuStreamCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuPointerSetAttribute(System.IntPtr,Alea.CUDAInterop.CUpointer_attribute_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuPointerSetAttribute@cuPointerSetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuPointerSetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuPointerGetAttribute(System.IntPtr,Alea.CUDAInterop.CUpointer_attribute_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuPointerGetAttribute@cuPointerGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuPointerGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMipmappedArrayDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuMipmappedArrayDestroy@cuMipmappedArrayDestroy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMipmappedArrayDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMipmappedArrayGetLevel(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMipmappedArrayGetLevel@cuMipmappedArrayGetLevel`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMipmappedArrayGetLevel'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMipmappedArrayCreate(System.IntPtr*,Alea.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st*,System.UInt32)">
<summary>
 P/Invoke function for `cuMipmappedArrayCreate@cuMipmappedArrayCreate`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMipmappedArrayCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuArray3DGetDescriptor(Alea.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuArray3DGetDescriptor@cuArray3DGetDescriptor_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuArray3DGetDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuArray3DCreate(System.IntPtr*,Alea.CUDAInterop.CUDA_ARRAY3D_DESCRIPTOR_st*)">
<summary>
 P/Invoke function for `cuArray3DCreate@cuArray3DCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuArray3DCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuArrayDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuArrayDestroy@cuArrayDestroy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuArrayDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuArrayGetDescriptor(Alea.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuArrayGetDescriptor@cuArrayGetDescriptor_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuArrayGetDescriptor'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuArrayCreate(System.IntPtr*,Alea.CUDAInterop.CUDA_ARRAY_DESCRIPTOR_st*)">
<summary>
 P/Invoke function for `cuArrayCreate@cuArrayCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuArrayCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD2D32Async(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D32Async@cuMemsetD2D32Async`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD2D32Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD2D16Async(System.IntPtr,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D16Async@cuMemsetD2D16Async`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD2D16Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD2D8Async(System.IntPtr,System.IntPtr,System.Byte,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D8Async@cuMemsetD2D8Async`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD2D8Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD32Async(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD32Async@cuMemsetD32Async`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD32Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD16Async(System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD16Async@cuMemsetD16Async`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD16Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD8Async(System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD8Async@cuMemsetD8Async`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD8Async'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD2D32(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D32@cuMemsetD2D32_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD2D32'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD2D16(System.IntPtr,System.IntPtr,System.UInt16,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D16@cuMemsetD2D16_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD2D16'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD2D8(System.IntPtr,System.IntPtr,System.Byte,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD2D8@cuMemsetD2D8_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD2D8'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD32(System.IntPtr,System.UInt32,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD32@cuMemsetD32_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD32'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD16(System.IntPtr,System.UInt16,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD16@cuMemsetD16_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD16'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemsetD8(System.IntPtr,System.Byte,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemsetD8@cuMemsetD8_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemsetD8'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy3DPeerAsync(Alea.CUDAInterop.CUDA_MEMCPY3D_PEER_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy3DPeerAsync@cuMemcpy3DPeerAsync`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy3DPeerAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy3DAsync(Alea.CUDAInterop.CUDA_MEMCPY3D_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy3DAsync@cuMemcpy3DAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy3DAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy2DAsync(Alea.CUDAInterop.CUDA_MEMCPY2D_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy2DAsync@cuMemcpy2DAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy2DAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyAtoHAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoHAsync@cuMemcpyAtoHAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyAtoHAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyHtoAAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoAAsync@cuMemcpyHtoAAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyHtoAAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyDtoDAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoDAsync@cuMemcpyDtoDAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyDtoDAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyDtoHAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoHAsync@cuMemcpyDtoHAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyDtoHAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyHtoDAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoDAsync@cuMemcpyHtoDAsync_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyHtoDAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyPeerAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyPeerAsync@cuMemcpyPeerAsync`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyPeerAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyAsync(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAsync@cuMemcpyAsync`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyAsync'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy3DPeer(Alea.CUDAInterop.CUDA_MEMCPY3D_PEER_st*)">
<summary>
 P/Invoke function for `cuMemcpy3DPeer@cuMemcpy3DPeer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy3DPeer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy3D(Alea.CUDAInterop.CUDA_MEMCPY3D_st*)">
<summary>
 P/Invoke function for `cuMemcpy3D@cuMemcpy3D_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy3D'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy2DUnaligned(Alea.CUDAInterop.CUDA_MEMCPY2D_st*)">
<summary>
 P/Invoke function for `cuMemcpy2DUnaligned@cuMemcpy2DUnaligned_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy2DUnaligned'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy2D(Alea.CUDAInterop.CUDA_MEMCPY2D_st*)">
<summary>
 P/Invoke function for `cuMemcpy2D@cuMemcpy2D_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy2D'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyAtoA(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoA@cuMemcpyAtoA_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyAtoA'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyAtoH(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoH@cuMemcpyAtoH_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyAtoH'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyHtoA(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoA@cuMemcpyHtoA_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyHtoA'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyAtoD(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyAtoD@cuMemcpyAtoD_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyAtoD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyDtoA(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoA@cuMemcpyDtoA_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyDtoA'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyDtoD(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoD@cuMemcpyDtoD_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyDtoD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyDtoH(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyDtoH@cuMemcpyDtoH_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyDtoH'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyHtoD(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyHtoD@cuMemcpyHtoD_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyHtoD'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpyPeer(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpyPeer@cuMemcpyPeer`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpyPeer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemcpy(System.IntPtr,System.IntPtr,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemcpy@cuMemcpy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemcpy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemHostUnregister(System.IntPtr)">
<summary>
 P/Invoke function for `cuMemHostUnregister@cuMemHostUnregister`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemHostUnregister'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemHostRegister(System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemHostRegister@cuMemHostRegister_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemHostRegister'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuIpcCloseMemHandle(System.IntPtr)">
<summary>
 P/Invoke function for `cuIpcCloseMemHandle@cuIpcCloseMemHandle`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuIpcCloseMemHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuIpcOpenMemHandle(System.IntPtr*,Alea.CUDAInterop.CUipcMemHandle_st,System.UInt32)">
<summary>
 P/Invoke function for `cuIpcOpenMemHandle@cuIpcOpenMemHandle`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuIpcOpenMemHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuIpcGetMemHandle(Alea.CUDAInterop.CUipcMemHandle_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuIpcGetMemHandle@cuIpcGetMemHandle`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuIpcGetMemHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuIpcOpenEventHandle(System.IntPtr*,Alea.CUDAInterop.CUipcEventHandle_st)">
<summary>
 P/Invoke function for `cuIpcOpenEventHandle@cuIpcOpenEventHandle`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuIpcOpenEventHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuIpcGetEventHandle(Alea.CUDAInterop.CUipcEventHandle_st*,System.IntPtr)">
<summary>
 P/Invoke function for `cuIpcGetEventHandle@cuIpcGetEventHandle`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuIpcGetEventHandle'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGetPCIBusId(System.Text.StringBuilder,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetPCIBusId@cuDeviceGetPCIBusId`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGetPCIBusId'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGetByPCIBusId(System.Int32*,System.String)">
<summary>
 P/Invoke function for `cuDeviceGetByPCIBusId@cuDeviceGetByPCIBusId`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGetByPCIBusId'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemAllocManaged(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemAllocManaged@cuMemAllocManaged`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemAllocManaged'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemHostGetFlags(System.UInt32*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemHostGetFlags@cuMemHostGetFlags`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemHostGetFlags'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemHostGetDevicePointer(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemHostGetDevicePointer@cuMemHostGetDevicePointer_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemHostGetDevicePointer'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemHostAlloc(System.IntPtr*,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemHostAlloc@cuMemHostAlloc`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemHostAlloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemFreeHost(System.IntPtr)">
<summary>
 P/Invoke function for `cuMemFreeHost@cuMemFreeHost`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemFreeHost'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemAllocHost(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemAllocHost@cuMemAllocHost_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemAllocHost'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemGetAddressRange(System.IntPtr*,System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemGetAddressRange@cuMemGetAddressRange_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemGetAddressRange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemFree(System.IntPtr)">
<summary>
 P/Invoke function for `cuMemFree@cuMemFree_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemFree'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemAllocPitch(System.IntPtr*,System.IntPtr*,System.IntPtr,System.IntPtr,System.UInt32)">
<summary>
 P/Invoke function for `cuMemAllocPitch@cuMemAllocPitch_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemAllocPitch'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemAlloc(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuMemAlloc@cuMemAlloc_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemAlloc'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuMemGetInfo(System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuMemGetInfo@cuMemGetInfo_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuMemGetInfo'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLinkDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuLinkDestroy@cuLinkDestroy`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLinkDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLinkComplete(System.IntPtr,System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkComplete@cuLinkComplete`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLinkComplete'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLinkAddFile(System.IntPtr,Alea.CUDAInterop.CUjitInputType_enum,System.String,System.UInt32,Alea.CUDAInterop.CUjit_option_enum*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkAddFile@cuLinkAddFile_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLinkAddFile'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLinkAddData(System.IntPtr,Alea.CUDAInterop.CUjitInputType_enum,System.IntPtr,System.IntPtr,System.String,System.UInt32,Alea.CUDAInterop.CUjit_option_enum*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkAddData@cuLinkAddData_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLinkAddData'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuLinkCreate(System.UInt32,Alea.CUDAInterop.CUjit_option_enum*,System.IntPtr*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuLinkCreate@cuLinkCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuLinkCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleGetSurfRef(System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetSurfRef@cuModuleGetSurfRef`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleGetSurfRef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleGetTexRef(System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetTexRef@cuModuleGetTexRef`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleGetTexRef'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleGetGlobal(System.IntPtr*,System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetGlobal@cuModuleGetGlobal_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleGetGlobal'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleGetFunction(System.IntPtr*,System.IntPtr,System.String)">
<summary>
 P/Invoke function for `cuModuleGetFunction@cuModuleGetFunction`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleGetFunction'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleUnload(System.IntPtr)">
<summary>
 P/Invoke function for `cuModuleUnload@cuModuleUnload`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleUnload'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleLoadFatBinary(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuModuleLoadFatBinary@cuModuleLoadFatBinary`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleLoadFatBinary'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleLoadDataEx(System.IntPtr*,System.IntPtr,System.UInt32,Alea.CUDAInterop.CUjit_option_enum*,System.IntPtr*)">
<summary>
 P/Invoke function for `cuModuleLoadDataEx@cuModuleLoadDataEx`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleLoadDataEx'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleLoadData(System.IntPtr*,System.IntPtr)">
<summary>
 P/Invoke function for `cuModuleLoadData@cuModuleLoadData`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleLoadData'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuModuleLoad(System.IntPtr*,System.String)">
<summary>
 P/Invoke function for `cuModuleLoad@cuModuleLoad`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuModuleLoad'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxDetach(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxDetach@cuCtxDetach`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxDetach'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxAttach(System.IntPtr*,System.UInt32)">
<summary>
 P/Invoke function for `cuCtxAttach@cuCtxAttach`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxAttach'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetStreamPriorityRange(System.Int32*,System.Int32*)">
<summary>
 P/Invoke function for `cuCtxGetStreamPriorityRange@cuCtxGetStreamPriorityRange`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetStreamPriorityRange'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetApiVersion(System.IntPtr,System.UInt32*)">
<summary>
 P/Invoke function for `cuCtxGetApiVersion@cuCtxGetApiVersion`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetApiVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxSetSharedMemConfig(Alea.CUDAInterop.CUsharedconfig_enum)">
<summary>
 P/Invoke function for `cuCtxSetSharedMemConfig@cuCtxSetSharedMemConfig`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxSetSharedMemConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetSharedMemConfig(Alea.CUDAInterop.CUsharedconfig_enum*)">
<summary>
 P/Invoke function for `cuCtxGetSharedMemConfig@cuCtxGetSharedMemConfig`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetSharedMemConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxSetCacheConfig(Alea.CUDAInterop.CUfunc_cache_enum)">
<summary>
 P/Invoke function for `cuCtxSetCacheConfig@cuCtxSetCacheConfig`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxSetCacheConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetCacheConfig(Alea.CUDAInterop.CUfunc_cache_enum*)">
<summary>
 P/Invoke function for `cuCtxGetCacheConfig@cuCtxGetCacheConfig`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetCacheConfig'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetLimit(System.IntPtr*,Alea.CUDAInterop.CUlimit_enum)">
<summary>
 P/Invoke function for `cuCtxGetLimit@cuCtxGetLimit`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetLimit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxSetLimit(Alea.CUDAInterop.CUlimit_enum,System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxSetLimit@cuCtxSetLimit`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxSetLimit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxSynchronize">
<summary>
 P/Invoke function for `cuCtxSynchronize@cuCtxSynchronize`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxSynchronize'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetDevice(System.Int32*)">
<summary>
 P/Invoke function for `cuCtxGetDevice@cuCtxGetDevice`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetDevice'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxGetCurrent(System.IntPtr*)">
<summary>
 P/Invoke function for `cuCtxGetCurrent@cuCtxGetCurrent`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxGetCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxSetCurrent(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxSetCurrent@cuCtxSetCurrent`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxSetCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxPopCurrent(System.IntPtr*)">
<summary>
 P/Invoke function for `cuCtxPopCurrent@cuCtxPopCurrent_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxPopCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxPushCurrent(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxPushCurrent@cuCtxPushCurrent_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxPushCurrent'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxDestroy(System.IntPtr)">
<summary>
 P/Invoke function for `cuCtxDestroy@cuCtxDestroy_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxDestroy'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuCtxCreate(System.IntPtr*,System.UInt32,System.Int32)">
<summary>
 P/Invoke function for `cuCtxCreate@cuCtxCreate_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuCtxCreate'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceComputeCapability(System.Int32*,System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceComputeCapability@cuDeviceComputeCapability`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceComputeCapability'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGetProperties(Alea.CUDAInterop.CUdevprop_st*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetProperties@cuDeviceGetProperties`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGetProperties'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGetAttribute(System.Int32*,Alea.CUDAInterop.CUdevice_attribute_enum,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetAttribute@cuDeviceGetAttribute`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGetAttribute'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceTotalMem(System.IntPtr*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceTotalMem@cuDeviceTotalMem_v2`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceTotalMem'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGetName(System.Text.StringBuilder,System.Int32,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGetName@cuDeviceGetName`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGetName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGetCount(System.Int32*)">
<summary>
 P/Invoke function for `cuDeviceGetCount@cuDeviceGetCount`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGetCount'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDeviceGet(System.Int32*,System.Int32)">
<summary>
 P/Invoke function for `cuDeviceGet@cuDeviceGet`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDeviceGet'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuDriverGetVersion(System.Int32*)">
<summary>
 P/Invoke function for `cuDriverGetVersion@cuDriverGetVersion`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuDriverGetVersion'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuInit(System.UInt32)">
<summary>
 P/Invoke function for `cuInit@cuInit`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuInit'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGetErrorName(Alea.CUDAInterop.cudaError_enum,System.SByte**)">
<summary>
 P/Invoke function for `cuGetErrorName@cuGetErrorName`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGetErrorName'">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CUDAInterop.cuGetErrorString(Alea.CUDAInterop.cudaError_enum,System.SByte**)">
<summary>
 P/Invoke function for `cuGetErrorString@cuGetErrorString`.
</summary>
</member>
<member name="P:Alea.CUDAInterop.cuGetErrorString'">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.CUDAInterop">
<summary>
 Raw P/Invoke types and functions for CUDA.
</summary>
</member>
<member name="T:Alea.License.DisposableObject">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.License">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.QualifierPatterns.|Const|Mutable|Volatile|(Alea.TypeQualifier)">
<summary>
 Active pattern for qualifier.
</summary>
</member>
<member name="T:Alea.QualifierPatterns">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.DIViz">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.Constructs">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.Builders">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.Intrinsic.DeviceOnlyAttribute">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.Intrinsic.__atomic_cas``1(Alea.deviceptr{``0},``0,``0)">
 <summary>
 Reads the 32-bit or 64-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes <c>(old == compare ? val : old)</c>, and stores the result back to memory at the same address.
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns old (Compare
 And Swap).
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomiccas">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_dec``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes <c><![CDATA[(((old == 0) | (old > val)) ? val : (old-1) )]]></c>, and stores the result back to memory
 at the same address. 
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicdec">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_inc``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes <c><![CDATA[((old >= val) ? 0 : (old+1))]]></c>, and stores the result back to memory at the same address.
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicinc">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_max``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit or 64-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes the maximum of <c>old</c> and <c>val</c>, and stores the result back to memory at the same address.
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicmax">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_min``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit or 64-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes the minimum of <c>old</c> and <c>val</c>, and stores the result back to memory at the same address.
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicmin">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_exch``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit or 64-bit word <c>old</c> located at the address <c>address</c> in global or shared memory
 and stores <c>val</c> back to memory at the same address. 
 </summary>
 <remarks>
 These two operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicexch">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_sub``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit or 64-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes <c>(old - val)</c>, and stores the result back to memory at the same address.
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicsub">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__atomic_add``1(Alea.deviceptr{``0},``0)">
 <summary>
 Reads the 32-bit or 64-bit word <c>old</c> located at the address <c>address</c> in global or shared memory,
 computes <c>(old + val)</c>, and stores the result back to memory at the same address.
 </summary>
 <remarks>
 These three operations are performed in one atomic transaction. The function returns <c>old</c>.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#atomicadd">here</see>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__shfl_xor``1(``0,System.Int32,System.Int32)">
 <summary>
 Exchanges a variable between threads within a warp.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl_down``1(``0,System.Int32,System.Int32)">
 <summary>
 Exchanges a variable between threads within a warp.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl_up``1(``0,System.Int32,System.Int32)">
 <summary>
 Exchanges a variable between threads within a warp.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl``1(``0,System.Int32,System.Int32)">
 <summary>
 Exchanges a variable between threads within a warp.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-shuffle-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl_xor_raw``1(``0,System.Int32,System.Int32)">
 <summary>
 A raw version of ptx code <c>shfl.bfly</c>, where the <c>shflC</c> contains two packed values
 specifying a mask for logically splitting warps into sub-segments and an upper bound
 for clamping the source lane index.
 Read more <see href="http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl_down_raw``1(``0,System.Int32,System.Int32)">
 <summary>
 A raw version of ptx code <c>shfl.down</c>, where the <c>shflC</c> contains two packed values
 specifying a mask for logically splitting warps into sub-segments and an upper bound
 for clamping the source lane index.
 Read more <see href="http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl_up_raw``1(``0,System.Int32,System.Int32)">
 <summary>
 A raw version of ptx code <c>shfl.up</c>, where the <c>shflC</c> contains two packed values
 specifying a mask for logically splitting warps into sub-segments and an upper bound
 for clamping the source lane index.
 Read more <see href="http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__shfl_raw``1(``0,System.Int32,System.Int32)">
 <summary>
 A raw version of ptx code <c>shfl.idx</c>, where the <c>shflC</c> contains two packed values
 specifying a mask for logically splitting warps into sub-segments and an upper bound
 for clamping the source lane index.
 Read more <see href="http://docs.nvidia.com/cuda/parallel-thread-execution/#data-movement-and-conversion-instructions-shfl">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__ballot(System.Int32)">
 <summary>
 Evaluates <c>predicate</c> for all active threads of the warp and return an integer
 whose Nth bit is set if and only if <c>predicate</c> evaluates to non-zero for the
 Nth thread of the warp and the Nth thread is active.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-vote-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__any(System.Int32)">
 <summary>
 Evaluates <c>predicate</c> for all active threads of the warp and return non-zero
 if and only if <c>predicate</c> evaluates to non-zero for any of them.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-vote-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__all(System.Int32)">
 <summary>
 Evaluates <c>predicate</c> for all active threads of the warp and return non-zero
 if and only if <c>predicate</c> evaluates to non-zero for all of them.
 Read more <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#warp-vote-functions">here</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__threadfence_system">
 <summary>
 Memory fence function. For more detail please refer to <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions">CUDA C Programming Guide</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__threadfence">
 <summary>
 Memory fence function. For more detail please refer to <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions">CUDA C Programming Guide</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__threadfence_block">
 <summary>
 Memory fence function. For more detail please refer to <see href="http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#memory-fence-functions">CUDA C Programming Guide</see>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__syncthreads_or(System.Int32)">
 <summary>
 Identical to <c>__syncthreads()</c> with the additional feature that it evaluates predicate for all
 threads of the block and returns non-zero if and only if predicate evaluates to non-zero for any of them.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__syncthreads_and(System.Int32)">
 <summary>
 Identical to <c>__syncthreads()</c> with the additional feature that it evaluates predicate for all
 threads of the block and returns non-zero if and only if predicate evaluates to non-zero for all of them.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__syncthreads_count(System.Int32)">
 <summary>
 Identical to <c>__syncthreads()</c> with the additional feature that it evaluates predicate for all
 threads of the block and returns the number of threads for which predicate evaluates to non-zero.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__syncthreads">
 <summary>
 Wait until all threads in the thread block have reached this pointer.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__lanemask_ge">
<summary>
 Returns the warp lane mask of all lanes greater than or equal to the calling thread.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lanemask_gt">
<summary>
 Returns the warp lane mask of all lanes greater than the calling thread.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lanemask_le">
<summary>
 Returns the warp lane mask of all lanes less than or equal to the calling thread.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lanemask_lt">
<summary>
 Returns the warp lane mask of all lanes less than the calling thread.
</summary>
</member>
<member name="M:Alea.Intrinsic.__warpid">
<summary>
 Returns the warp ID of the calling thread.  Warp ID is guaranteed to be unique among
 warps, but may not correspond to a zero-based ranking within the thread block.
</summary>
</member>
<member name="M:Alea.Intrinsic.__laneid">
<summary>
 Returns the warp lane ID of the calling thread.
</summary>
</member>
<member name="M:Alea.Intrinsic.__linearbid">
<summary>
 Returns linear block index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.Intrinsic.__linearbid3">
<summary>
 Returns linear block index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.Intrinsic.__linearbid2">
<summary>
 Returns linear block index in 2 dimensions.
</summary>
</member>
<member name="M:Alea.Intrinsic.__linearbid1">
<summary>
 Returns linear block index in 1 dimension.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lineartid">
<summary>
 Returns linear thread index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lineartid3">
<summary>
 Returns linear thread index in 3 dimensions.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lineartid2">
<summary>
 Returns linear thread index in 2 dimensions.
</summary>
</member>
<member name="M:Alea.Intrinsic.__lineartid1">
<summary>
 Returns linear thread index in 1 dimension.
</summary>
</member>
<member name="M:Alea.Intrinsic.__warp_size">
<summary>
 Returns number of warp threads.
</summary>
</member>
<member name="M:Alea.Intrinsic.__ref_reinterpret``2(Microsoft.FSharp.Core.FSharpRef{``0})">
 <summary>
 Reinterpret an F# <c><![CDATA[Ref<'T>]]></c> to <c><![CDATA[Ref<'U>]]></c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__obj_reinterpret``2(``0)">
<summary>
 Reinterpret an object of ref type &lt;c&gt;&amp;#39;T&lt;/c&gt; to another ref type &lt;c&gt;&amp;#39;U&lt;/c&gt;. 
</summary>
</member>
<member name="M:Alea.Intrinsic.__ptr_reinterpret``2(Alea.deviceptr{``0})">
 <summary>
 Reinterpret a <c><![CDATA[deviceptr<'T>]]></c> to <c><![CDATA[deviceptr<'U>]]></c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__ptr_volatile``1(Alea.deviceptr{``0})">
<summary>
 Make a pointer volatile.
</summary>
</member>
<member name="M:Alea.Intrinsic.__obj_to_ref``1(``0)">
 <summary>
 Get the F# <c><![CDATA[Ref<'T>]]></c> object which references the object.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__ref_to_obj``1(Microsoft.FSharp.Core.FSharpRef{``0})">
 <summary>
 Get the object of ref type by giving an F# <c><![CDATA[Ref<'T>]]></c> object which references that object.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__ptr_to_obj``1(Alea.deviceptr{``0})">
<summary>
 Get the object of ref type by giving a pointer which points to that object.
</summary>
</member>
<member name="M:Alea.Intrinsic.__obj_to_ptr``1(``0)">
 <summary>
 Get the pointer of an object of ref type.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__ptr_to_ref``1(Alea.deviceptr{``0})">
 <summary>
 Transform a <c><![CDATA[deviceptr<'T>]]></c> pointer to an F# <c><![CDATA[Ref<'T>]]></c> object. 
 </summary>
 <remarks>
 An F# <c><![CDATA[Ref<'T>]]></c> object represents a non-indexable pointer in kernel quotations.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__ref_to_ptr``1(Microsoft.FSharp.Core.FSharpRef{``0})">
 <summary>
 Transform an F# <c><![CDATA[Ref<'T>]]></c> object to a <c><![CDATA[deviceptr<'T>]]></c> pointer. 
 </summary>
 <remarks>
 An F# <c><![CDATA[Ref<'T>]]></c> object represents a non-indexable pointer in kernel quotations.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__address_of_array3d``1(``0[0:,0:,0:])">
 <summary>
 Returns a <c><![CDATA[deviceptr<'T>]]></c> pointing to the first element of the three-dimensional array.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__address_of_array2d``1(``0[0:,0:])">
 <summary>
 Returns a <c><![CDATA[deviceptr<'T>]]></c> pointing to the first element of the two-dimensional array.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__address_of_array``1(``0[])">
 <summary>
 Returns a <c><![CDATA[deviceptr<'T>]]></c> pointing to the first element of the array.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__unbox``1(``0)">
 <summary>
 Unbox a value. In a kernel quotation, an expression might be an <c>IRValue</c>
 or an <c>IRReferenceValue</c>.
 </summary>
 <remarks>
 Unboxing it ensures the expression becomes an <c>IRValue</c>.
 
 An example use case would be when you want to make a copy of a ref type object. You can
 simply do:
 <code language="fsharp"><![CDATA[
     let a = SomeRefType()
     let b = a |> __unbox
 ]]></code>
 In this example, <c>b</c> will not be the reference of <c>a</c>, it is a new reference
 that has an initial value copied from <c>a</c>.
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__box``1(``0)">
 <summary>
 Box a value. In a kernel quotation, an expression might be an <c>IRValue</c>
 or an <c>IRReferenceValue</c>; boxing it ensures the expression becomes an <c>IRReferenceValue</c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__is_static_constant``1(``0)">
 <summary>
 Returns a static <c>bool</c> constant to indicate if the value is a static constant.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__static_assert(System.Boolean)">
 <summary>
 Assertion in kernel compile time. Parameter <c>pred</c> must be a compile time constant.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__eval``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
 <summary>
 Evaluates a quotation expression.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__default_value``1">
 <summary>
 Returns a default value of type <c>&#39;T</c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__undef``1">
 <summary>
 Returns an undefined value of type <c>&#39;T</c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__null``1">
 <summary>
 Returns an instance of <c><![CDATA[deviceptr<'T>]]></c> pointing to 0n, e.g. a null pointer.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__alignof``1">
 <summary>
 Returns the alignment of type <c>T</c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__sizeof``1">
 <summary>
 Returns the size of type <c>T</c>.
 </summary>
</member>
<member name="M:Alea.Intrinsic.__unroll">
 <summary>
 A compile time directive indicating to the compiler that the following integer range 
 loop can be unrolled. 
 </summary>

 <remarks>
 This function works only with F# for loops in quotations
 and the range must be specified by a static constant.

 <code language="fsharp"><![CDATA[
 __static_assert(__is_static_constant(steps))
 __unroll()
 for step = 0 to steps - 1 do
     let offset = 1 <<< step
     __static_assert(__is_static_constant(offset))
         
     // Share input into buffer
     let reduce = tempStorage'.Reduce |> __array_to_ptr
     reduce.VolatileSet(laneId, input)

     // Update input if peerAddend is in range
     if offset < (nextFlag - laneId) then
         let peerAddend = reduce.VolatileGet(laneId + offset)
         input <- reductionOp input peerAddend
 ]]></code>
 </remarks>
</member>
<member name="M:Alea.Intrinsic.__debug``1(``0)">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.Intrinsic.__lab">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.Intrinsic.__device_only_with_message``1(System.String)">
<summary>
 Function to indicate that this code is generated and only runs on the GPU device. On the CPU it fails with message string given by &lt;c&gt;message&lt;/c&gt;.
</summary>
</member>
<member name="M:Alea.Intrinsic.__device_only``1">
<summary>
 Function to indicate that this code is generated and only runs on the GPU device. On the CPU it fails with message &quot;device only&quot;.
</summary>
</member>
<member name="T:Alea.Intrinsic">
 <summary>
 This module contains intrinsic functions for kernel writing,
 such as <c>__syncthreads</c>, <c>__sizeof</c> and various converters.
 </summary>
</member>
<member name="M:Alea.SpecialFunction.bessel_jn(System.Int32,System.Double)">
<summary>
Bessel function of the first kind of order n.
</summary>
</member>
<member name="M:Alea.SpecialFunction.gammai(System.Int32)">
<summary>
Gamma function for integer values.
</summary>
</member>
<member name="M:Alea.SpecialFunction.factorial(System.Int32)">
<summary>
Factorial, used in Bessel functions.
</summary>
</member>
<member name="M:Alea.SpecialFunction.gammapdf_precalc(System.Double,System.Double,System.Double,System.Double)">
<summary>
Evaluates the pdf of a gamma distribution at the point x
with a pre-calculated value of log (gamma alpha).
Both beta and alpha must be positive.
</summary>
</member>
<member name="M:Alea.SpecialFunction.gammapdf(System.Double,System.Double,System.Double)">
<summary>
Evaluates the pdf of a gamma distribution at the point x.
Both beta and alpha must be positive.
</summary>
</member>
<member name="M:Alea.SpecialFunction.gamma(System.Double)">
<summary>
Gamma function for a positive real argument <c>x</c> defined as
</summary>

<remarks> 
<code language="none"><![CDATA[
\begin{equation}
log \Gamma(x) = log \int_0^\infty t^{x-1} e^{-t} dt
\end{equation}
]]></code>

First calculates the log gamma function and then takes the exponential of it.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.lgamma(System.Double)">
<summary>
Log(Gamma) function for a positive real argument <c>x</c> defined as
</summary>
 
<remarks>
<code language="none"><![CDATA[
\begin{equation}
log \Gamma(x) = log \int_0^\infty t^{x-1} e^{-t} dt
\end{equation}

Computation is based on an algorithm outlined in references 1 and 2.
Uses rational functions that theoretically approximate log (gamma) to at least 18 significant decimal digits. 
The approximation for x > 12 is from reference 3, while approximations for x < 12.0 are similar to those in
reference 1, but are unpublished.

Original FORTRAN77 version by William Cody, Laura Stoltz.

Reference:

    William Cody, Kenneth Hillstrom,
    Chebyshev Approximations for the Natural Logarithm of the
    Gamma Function,
    Mathematics of Computation,
    Volume 21, Number 98, April 1967, pages 198-203.

    Kenneth Hillstrom,
    ANL/AMD Program ANLC366S, DGAMMA/DLGAMA,
    May 1969.

    John Hart, Ward Cheney, Charles Lawson, Hans Maehly,
    Charles Mesztenyi, John Rice, Henry Thatcher,
    Christoph Witzgall,
    Computer Approximations,
    Wiley, 1968,
    LC: QA297.C64.

The implementation is tested against Matlab.
]]></code>
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normpdff(System.Single)">
<summary>
Normal probability density function
</summary>

<remarks>
<code language="none"><![CDATA[
\begin{equation} 
\frac{1}{\sqrt{2\pi}} exp\left(-\frac{x^2}{2}\right) 
\end{equation}
]]></code>

The value is set to zero outside [-maxForPdf, maxForPdf]
The value maxForPdf is calculated as follows
 
<code language="none"><![CDATA[
\begin{equation} 
\exp\left\{-\left(\log(\sqrt(2 \pi)) + \frac{x^2}{2} \right) \right\} = \text{DBL_MIN} = 2^{-1021} 
\end{equation}
]]></code>

This results in $ x = \pm 37.5974555739746700 = 37.59667968750000 $ using 52 bit.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normpdf(System.Double)">
<summary>
Normal probability density function
</summary>

<remarks>
<code language="none"><![CDATA[
\begin{equation} 
\frac{1}{\sqrt{2\pi}} exp\left(-\frac{x^2}{2}\right) 
\end{equation}
]]></code>

The value is set to zero outside [-maxForPdf, maxForPdf]
The value maxForPdf is calculated as follows
 
<code language="none"><![CDATA[
\begin{equation} 
\exp\left\{-\left(\log(\sqrt(2 \pi)) + \frac{x^2}{2} \right) \right\} = \text{DBL_MIN} = 2^{-1021} 
\end{equation}
]]></code>

This results in <math> x = \pm 37.5974555739746700 = 37.59667968750000 </math> using 52 bit.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normcdfinv_sb_ex(System.Double)">
<summary>
Inverse normal cumulative distribution function
</summary>
</member>
<member name="M:Alea.SpecialFunction.normcdfinvf_sb(System.Single)">
<summary>
Inverse normal cumulative distribution function (float32).
Implementation based on <see href="http://arxiv.org/pdf/0901.0638v5.pdf">Shaw-Brickman</see>.
</summary>
</member>
<member name="M:Alea.SpecialFunction.normcdfinv_sb(System.Double)">
<summary>
Inverse normal cumulative distribution function.
Implementation based on <see href="http://arxiv.org/pdf/0901.0638v5.pdf">Shaw-Brickman</see>.
</summary>
</member>
<member name="M:Alea.SpecialFunction.normcdfinv_ack(System.Double)">
<summary>
Inverse normal cumulative distribution function.
<see href="http://home.online.no/~pjacklam/notes/invnorm/">Acklam</see>.
</summary>
</member>
<member name="M:Alea.SpecialFunction.normcdff_as(System.Single)">
<summary>
Cumulative normal distribution function. 
</summary>
   
<remarks>
<code language="none">
<![CDATA[
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
]]>
</code>

by a simple rational approximation. It uses the asymptotic expansion (26.2.12)
in <see href="http://www.math.sfu.ca/~cbm/aands/page_932.htm">Abramowitz-Stegun, p. 932</see>.

For most cases this version is accurate enough, in particular for <math> x \in [-6, 6] </math>.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normcdf_as(System.Double)">
<summary>
Cumulative normal distribution function. 
</summary>

<remarks>
<code language="none"><![CDATA[
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
]]></code>

by a simple rational approximation. It uses the asymptotic expansion (26.2.12)
in <see href="http://www.math.sfu.ca/~cbm/aands/page_932.htm">Abramowitz-Stegun, p. 932</see>.

For most cases this version is accurate enough, in particular for <math> x \in [-6, 6] </math>.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normcdf(System.Double)">
<summary>
Cumulative normal distribution function
</summary>

<remarks>
Default implmentation based on error function.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normcdff_erf(System.Single)">
<summary>
Cumulative normal distribution function
</summary>
   
<remarks>

<code language="none">
<![CDATA[
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
]]>
</code>

Implemented with error function.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.normcdf_erf(System.Double)">
<summary>
Cumulative normal distribution function
</summary>
   
<remarks>

<code language="none">
<![CDATA[
\begin{equation} 
\Phi(x) = \int_{-\infty}^x \phi(x) = \int_{-\infty}^x \frac{1}{\sqrt{2\pi}} \exp\left(\frac{-u^2}{2}\right) du
\end{equation}
]]>
</code>

Implemented with error function.
</remarks>
</member>
<member name="P:Alea.SpecialFunction.oneOverSqrt2">
<summary><math>1 / sqrt(2)</math></summary>
</member>
<member name="M:Alea.SpecialFunction.erfcx_jw(System.Double)">
<summary>
Scaled complementary error function 
</summary>

<remarks>
<code language="none">
<![CDATA[
Scaled complementary error function 

$$$
\begin{equation}
\erfcx(x) = e^{x^2} \erfc(x)
\end{equation}
 
Implementation based on C code of [libcerf](http://apps.jcns.fz-juelich.de/libcerf) by
 
- Steven G. Johnson, Massachusetts Institute of Technology, 2012
- Joachim Wuttke, Forschungszentrum Jülich, 2013, package maintainer

This function combines a few different ideas.

First, for x > 50, it uses a continued-fraction expansion (same as
for the Faddeeva function, but with algebraic simplifications for z=i*x).

Second, for 0 <= x <= 50, it uses Chebyshev polynomial approximations,
but with two twists:

a) It maps x to y = 4 / (4+x) in [0,1].  This simple transformation,
inspired by a similar transformation in the octave-forge/specfun
erfcx by Soren Hauberg, results in much faster Chebyshev convergence
than other simple transformations I have examined.
 
b) Instead of using a single Chebyshev polynomial for the entire
[0,1] y interval, we break the interval up into 100 equal
subintervals, with a switch/lookup table, and use much lower
degree Chebyshev polynomials in each subinterval. This greatly
improves performance in my tests.
 
For x < 0, we use the relationship erfcx(-x) = 2 exp(x^2) - erfc(x),
with the usual checks for overflow etcetera.

Performance-wise, it seems to be substantially faster than either
the SLATEC DERFC function [or an erfcx function derived therefrom]
or Cody's CALERF function (from netlib.org/specfun), while
retaining near machine precision in accuracy.
]]>
</code>
</remarks>
</member>
<member name="P:Alea.SpecialFunction.ispi">
 <summary>
 <math>1 / sqrt(pi)</math>
 </summary>
</member>
<member name="M:Alea.SpecialFunction.erfcx_y100(System.Double)">
<summary>
Ported from the C code of Steven G. Johnson, October 2012.
</summary>

<remarks>
Given <c>y100=100*y</c>, where <c>y = 4/(4+x) for x >= 0</c>, compute <c>erfc(x)</c>.

Uses a look-up table of 100 different Chebyshev polynomials
for y intervals <c>[0,0.01], [0.01,0.02], ...., [0.99,1]</c>, generated
with the help of Maple and a little shell script.  This allows
the Chebyshev polynomials to be of significantly lower degree (about 1/4)
compared to fitting the whole [0,1] interval with a single polynomial.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.erfcx(System.Double)">
<summary>
Scaled complementary error function 
</summary>

<remarks>
Scaled complementary error function 

<code language="none">
\begin{equation}
\erfcx(x) = e^{x^2} \erfc(x)
\end{equation}
</code>

Simple implementation giving approximately 12-13 digit accuracy globally.
</remarks>
</member>
<member name="M:Alea.SpecialFunction.erf(System.Double)">
<summary>
Error function
</summary>

<remarks>
<code language="none">
<![CDATA[
Error function

$ \DeclareMathOperator{\erf}{erf} $
$ \DeclareMathOperator{\erfc}{erfc} $
$ \DeclareMathOperator{\sgn}{sgn} $

$$$
\begin{equation}
\erf(x) = \frac{2}{\sqrt{\pi}}\int_0^x \! exp(-t \cdot t) dt
\end{equation}

$$$
\begin{equation}
\erfc(x) =  1-\erf(x)
\end{equation}

Source: Sun FDMLib 5.3

[Original FORTRAN version can be found here](http://www.netlib.org/specfun/erf)
 
Reference:
 
W. J. Cody,
  Rational Chebychev approximations for the
  error function.
  Mathematics of Computations 23 (1969) 631-637
 
W. J. Cody,
  Performance evaluations of programs for the
  error and complementary error function.
  Transactions of the ACM on Mathematical Software,
  16:1 (March 1990) 38-46
 
W. J. Cody,
  SPECFUN - A portable special function package,
  In: New Computing environments;
  Microcomputers in Large-Scale Scientific Computing,
  A. Wouk, SIAM, 1987, 1-12
 
W. J. Cody,
  [Specfun/erf](http://www.netlib.org/specfun/erf)

For calculations with complex arguments see:
 
Walter Gautschi
  "Efficient computation of the complex error function"
  SIAM J. Numer. Anal.
  7:1 (1970), 187-198
 
J.A.C. Weideman
  "Computation of the complex error function"
  SIAM J. Numer. Anal.
  31:5 (1994), 1497-1518
 

Note that:
 
- $ \erf(-x) = -\erf(x) $
- $ \erfc(-x) = 2 - \erfc(x) $

Method 1. 

For $ | x | \in [0, 0.84375] $:

$ \erf(x)  = x + x \cdot R(x^2) $
 
$$$
\begin{equation}        
\erfc(x) = \left\{
    \begin{array}{l l}
        1 - \erf(x) & \quad \text{ if $x \in [-.84375,0.25]$} \\
        0.5 + ((0.5-x)-x \cdot R)  & \quad \text{if $x \in [0.25,0.84375]$}
    \end{array} \right\}
\end{equation}

where $ R = \frac{P}{Q} $ where P is an odd poly of degree 8 and
Q is an odd poly of degree 10.
            
-57.90
$ | R - \frac{\erf(x)-x}{x} | <= 2 $


Remark: 

The formula is derived by noting
 
$$$
\begin{equation}       
- \erf(x) = \frac{2}{\sqrt{\pi}}*(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots)
\end{equation}

and that

$$$
\begin{equation}
\frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
\end{equation}

is close to one. 

The interval is chosen because the fix
point of $ \erf(x) $ is near $ 0.6174 $ (i.e., $ \erf(x) = x $ when $x$ is
near $0.6174$), and by some experiment, $0.84375$ is chosen to
guarantee the error is less than one ulp for $erf$.

Method 2. 

For $ |x| \in [0.84375,1.25]$, let $ s = |x| - 1 $, and $ c = 0.84506291151 $ rounded to single (24 bits)

$$$
\begin{equation}
\erf(x)  = \sgn(x)(c  + \frac{P1(s)}{Q1(s)})
\end{equation}

$$$
\begin{equation}        
\erfc(x) = \left\{
    \begin{array}{l l}
        (1-c)  - \frac{P1(s)}{Q1(s)}        & \quad \text{ if $ x > 0 $} \\
        1 + (c + \frac{P1(s)}{Q1(s)})       & \quad \text{ if $ x < 0 $} \\
        | \frac{P1}{Q1} - (\erf(|x|) - c) | & \quad 2^{-59.06}
    \end{array} \right\}
\end{equation}

Remark: here we use the taylor series expansion at $x = 1$.

$$$
\begin{equation}
\erf(1+s) = \erf(1) + s \cdot Poly(s) = 0.845 \ldots + \frac{P1(s)}{Q1(s)}
\end{equation}

That is, we use rational approximation to approximate

$ \erf(1+s) - (c = (single)0.84506291151) $

Note that $ |\frac{P1}{Q1} |< 0.078 $ for $ x \in [0.84375,1.25] $ where

- $ P1(s) = \text{degree 6 poly in s} $
- $ Q1(s) = \text{degree 6 poly in s} $

Method 3. 

For $ x \in [1.25,\frac{1}{0.35(~2.857143)}] $:

$$$
\begin{equation}
\erfc(x) = (\frac{1}{x}) \cdot \exp(-x \cdot x-0.5625 + \frac{R1}{S1})
\end{equation}

$$$
\begin{equation}
\erf(x)  = 1 - \erfc(x)
\end{equation}

where

- $ R1(z) = \text{degree 7 poly in z,} (z = \frac{1}{x^2}) $
- $ S1(z) = \text{degree 8 poly in z} $



Method 4. 

For $ x \in [\frac{1}{0.35},28] $

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
        (\frac{1}{x})\exp(-x(x-0.5625+\frac{R2}{S2}))           & \quad \text{ if $ x > 0 $} \\
        2.0 - \frac{1}{x}\exp(-x \cdot x-0.5625+\frac{R2}{S2})  & \quad \text{ if $ -6 < x < 0 $} \\
        2.0 - tiny                                              & \quad \text{ if $ x <= -6 $}
    \end{array} \right\}
\end{equation}

$$$
\begin{equation}
\erf(x)  = \left\{
    \begin{array}{l l}
        \sgn(x)(1.0 - \erfc(x))     & \quad \text{ if $ x < 6 $, else} \\
        \sgn(x)*(1.0 - tiny)        & \quad
    \end{array} \right\}
\end{equation}

where

- $ R2(z) = $ degree 6 poly in z, $ z = \frac{1}{x^2} $
- $ S2(z) = $ degree 7 poly in z

Note1:

To compute $ \exp(-x \cdot x-0.5625+\frac{R}{S}) $, let s be a single precision number and $ s := x $ ; then:

- $ -x \cdot x = -s \cdot s + (s-x)(s+x) $
- $ \exp(-x \cdot x-0.5626+\frac{R}{S}) = \exp(-s \cdot s-0.5625)exp((s-x)(s+x)+\frac{R}{S}) $

Note2:

Here 4 and 5 make use of the asymptotic series

$$$
\begin{equation}
\erfc(x) \approx{\frac{\exp(-x \cdot x)}{x \cdot \sqrt{\pi}} \cdot (1 + Poly(\frac{1}{x^2})}
\end{equation}

We use rational approximation to approximate

$$$
\begin{equation}
g(s) = f(\frac{1}{x^2}) = \log(\erfc(x) \cdot x) - x \cdot x + 0.5625
\end{equation}

Here is the error bound for $ \frac{R1}{S1} $ and $ \frac{R2}{S2} $

- $ |\frac{R1}{S1} - f(x)|  < 2^{-62.57} $
- $ |\frac{R2}{S2} - f(x)|  < 2^{-61.52} $

For $ \infty > x >= 28 $:

$$$
\begin{equation}
\erf(x)  = \sgn(x)(1 - tiny)  \text{(raise inexact)}
\end{equation}

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
    tiny \cdot tiny      & \quad \text{(raise underflow) if $ x > 0 $} \\
    2 - tiny            & \quad \text{ if $ x < 0 $}
    \end{array} \right\}
\end{equation}

Special cases:

- $ \erf(0)  = 0 $ 
- $ \erf(\infty) = 1 $ 
- $ \erf(-\infty) = -1 $
- $ \erfc(0) = 1 $
- $ \erfc(\infty) = 0 $
- $ \erfc(-\infty) = 2 $
- $ \erf(NaN) $ is NaN
- $ \erfc(NaN) $ is NaN

`ConstantsErf` contains coefficients for approximation of the following functions 

- $ \erf \in [0,0.84375] $
- $ \erf \in [0.84375, 1.25] $
- $ \erfc \in [1.25, \frac{1}{0.35}] $
- $ \erfc \in [\frac{1}{0.35}, 28] $
]]>
</code>
</remarks>
</member>
<member name="M:Alea.SpecialFunction.erfc(System.Double)">
<summary>
Complementary error function
</summary>

<remarks>
<code language="none">
<![CDATA[
Complementary error function

$ \DeclareMathOperator{\erf}{erf} $
$ \DeclareMathOperator{\erfc}{erfc} $
$ \DeclareMathOperator{\sgn}{sgn} $
    
$$$
\begin{equation}
\erf(x) = \frac{2}{\sqrt{\pi}}\int_0^x \! exp(-t \cdot t) dt
\end{equation}

$$$
\begin{equation}
\erfc(x) =  1-\erf(x)
\end{equation}

Source: Sun FDMLib 5.3

[Original FORTRAN version can be found here](http://www.netlib.org/specfun/erf)
 
Reference:
 
W. J. Cody,
  Rational Chebychev approximations for the
  error function.
  Mathematics of Computations 23 (1969) 631-637
 
W. J. Cody,
  Performance evaluations of programs for the
  error and complementary error function.
  Transactions of the ACM on Mathematical Software,
  16:1 (March 1990) 38-46

W. J. Cody,
  SPECFUN - A portable special function package,
  In: New Computing environments;
  Microcomputers in Large-Scale Scientific Computing,
  A. Wouk, SIAM, 1987, 1-12
 
W. J. Cody,
  [Specfun/erf](http://www.netlib.org/specfun/erf)
 
For calculations with complex arguments see:

Walter Gautschi
  "Efficient computation of the complex error function"
  SIAM J. Numer. Anal.
  7:1 (1970), 187-198

J.A.C. Weideman
  "Computation of the complex error function"
  SIAM J. Numer. Anal.
  31:5 (1994), 1497-1518


Note that:

- $ \erf(-x) = -\erf(x) $
- $ \erfc(-x) = 2 - \erfc(x) $

Method 1. 

For $ | x | \in [0, 0.84375] $:

$ \erf(x)  = x + x \cdot R(x^2) $
 
$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
        1 - \erf(x) & \quad \text{ if $x \in [-.84375,0.25]$} \\
        0.5 + ((0.5-x)-x \cdot R)  & \quad \text{if $x \in [0.25,0.84375]$}
    \end{array} \right\}
\end{equation}

where $ R = \frac{P}{Q} $ where P is an odd poly of degree 8 and
Q is an odd poly of degree 10.
            
-57.90
$ | R - \frac{\erf(x)-x}{x} | <= 2 $


Remark: 

The formula is derived by noting
 
$$$
\begin{equation}
\erf(x) = \frac{2}{\sqrt{\pi}}*(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots)
\end{equation}

and that

$$$
\begin{equation}
\frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
\end{equation}

is close to one. 

The interval is chosen because the fix
point of $ \erf(x) $ is near $ 0.6174 $ (i.e., $ \erf(x) = x $ when $x$ is
near $0.6174$), and by some experiment, $0.84375$ is chosen to
guarantee the error is less than one ulp for $erf$.

Method 2. 

For $ |x| \in [0.84375,1.25]$, let $ s = |x| - 1 $, and $ c = 0.84506291151 $ rounded to single (24 bits)

$$$
\begin{equation}
\erf(x)  = \sgn(x)(c  + \frac{P1(s)}{Q1(s)})
\end{equation}

$$$
\begin{equation}        
\erfc(x) = \left\{
    \begin{array}{l l}
        (1-c)  - \frac{P1(s)}{Q1(s)}        & \quad \text{ if $ x > 0 $} \\
        1 + (c + \frac{P1(s)}{Q1(s)})       & \quad \text{ if $ x < 0 $} \\
        | \frac{P1}{Q1} - (\erf(|x|) - c) | & \quad 2^{-59.06}
    \end{array} \right\}
\end{equation}

Remark: here we use the taylor series expansion at $x = 1$.

$$$
\begin{equation}
\erf(1+s) = \erf(1) + s \cdot Poly(s) = 0.845 \ldots + \frac{P1(s)}{Q1(s)}
\end{equation}

That is, we use rational approximation to approximate

$ \erf(1+s) - (c = (single)0.84506291151) $

Note that $ |\frac{P1}{Q1} |< 0.078 $ for $ x \in [0.84375,1.25] $ where

- $ P1(s) = \text{degree 6 poly in s} $
- $ Q1(s) = \text{degree 6 poly in s} $

Method 3. 

For $ x \in [1.25,\frac{1}{0.35(~2.857143)}] $:

$$$
\begin{equation}
\erfc(x) = (\frac{1}{x}) \cdot \exp(-x \cdot x-0.5625 + \frac{R1}{S1})
\end{equation}

$$$
\begin{equation}
\erf(x)  = 1 - \erfc(x)
\end{equation}

where

- $ R1(z) = \text{degree 7 poly in z,} (z = \frac{1}{x^2}) $
- $ S1(z) = \text{degree 8 poly in z} $



Method 4. 

For $ x \in [\frac{1}{0.35},28] $

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
        (\frac{1}{x})\exp(-x(x-0.5625+\frac{R2}{S2}))           & \quad \text{ if $ x > 0 $} \\
        2.0 - \frac{1}{x}\exp(-x \cdot x-0.5625+\frac{R2}{S2})  & \quad \text{ if $ -6 < x < 0 $} \\
        2.0 - tiny                                              & \quad \text{ if $ x <= -6 $}
    \end{array} \right\}
\end{equation}

$$$
\begin{equation}
\erf(x)  = \left\{
    \begin{array}{l l}
        \sgn(x)(1.0 - \erfc(x))     & \quad \text{ if $ x < 6 $, else} \\
        \sgn(x)*(1.0 - tiny)        & \quad
    \end{array} \right\}
\end{equation}

where

- $ R2(z) = $ degree 6 poly in z, $ z = \frac{1}{x^2} $
- $ S2(z) = $ degree 7 poly in z

Note1:

To compute $ \exp(-x \cdot x-0.5625+\frac{R}{S}) $, let s be a single precision number and $ s := x $ ; then:

- $ -x \cdot x = -s \cdot s + (s-x)(s+x) $
- $ \exp(-x \cdot x-0.5626+\frac{R}{S}) = \exp(-s \cdot s-0.5625)exp((s-x)(s+x)+\frac{R}{S}) $

Note2:

Here 4 and 5 make use of the asymptotic series

$$$
\begin{equation}
\erfc(x) \approx{\frac{\exp(-x \cdot x)}{x \cdot \sqrt{\pi}} \cdot (1 + Poly(\frac{1}{x^2})}
\end{equation}

We use rational approximation to approximate

$$$
\begin{equation}
g(s) = f(\frac{1}{x^2}) = \log(\erfc(x) \cdot x) - x \cdot x + 0.5625
\end{equation}

Here is the error bound for $ \frac{R1}{S1} $ and $ \frac{R2}{S2} $

- $ |\frac{R1}{S1} - f(x)|  < 2^{-62.57} $
- $ |\frac{R2}{S2} - f(x)|  < 2^{-61.52} $

For $ \infty > x >= 28 $:

$$$
\begin{equation}
\erf(x)  = \sgn(x)(1 - tiny)  \text{(raise inexact)}
\end{equation}

$$$
\begin{equation}
\erfc(x) = \left\{
    \begin{array}{l l}
    tiny \cdot tiny      & \quad \text{(raise underflow) if $ x > 0 $} \\
    2 - tiny            & \quad \text{ if $ x < 0 $}
    \end{array} \right\}
\end{equation}

Special cases:

- $ \erf(0)  = 0 $ 
- $ \erf(\infty) = 1 $ 
- $ \erf(-\infty) = -1 $
- $ \erfc(0) = 1 $
- $ \erfc(\infty) = 0 $
- $ \erfc(-\infty) = 2 $
- $ \erf(NaN) $ is NaN
- $ \erfc(NaN) $ is NaN

`ConstantsErf` contains coefficients for approximation of the following functions 

- $ \erf \in [0,0.84375] $
- $ \erf \in [0.84375, 1.25] $
- $ \erfc \in [1.25, \frac{1}{0.35}] $
- $ \erfc \in [\frac{1}{0.35}, 28] $
]]>
</code>
</remarks>
</member>
<member name="T:Alea.SpecialFunction">
<summary>
 Provides some special functions to be used from within kernels.
</summary>
</member>
<member name="M:Alea.LibDevice.__nv_ynf(System.Int32,System.Single)">
 <summary>
 Calculate the value of the Bessel function of the second kind of order n for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ynf.html#__nv_ynf">3.319. __nv_ynf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_yn(System.Int32,System.Double)">
 <summary>
 Calculate the value of the Bessel function of the second kind of order n for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_yn.html#__nv_yn">3.318. __nv_yn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_y1f(System.Single)">
 <summary>
 Calculate the value of the Bessel function of the second kind of order 1 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y1f.html#__nv_y1f">3.317. __nv_y1f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_y1(System.Double)">
 <summary>
 Calculate the value of the Bessel function of the second kind of order 1 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y1.html#__nv_y1">3.316. __nv_y1</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_y0f(System.Single)">
 <summary>
 Calculate the value of the Bessel function of the second kind of order 0 for the input argument x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y0f.html#__nv_y0f">3.315. __nv_y0f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_y0(System.Double)">
 <summary>
 Calculate the value of the Bessel function of the second kind of order 0 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_y0.html#__nv_y0">3.314. __nv_y0</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_usad(System.UInt32,System.UInt32,System.UInt32)">
 <summary>
 Calculate , the 32-bit sum of the third argument z plus and the absolute value of the difference between the first argument, x, and second argument, y. 
 Inputs x, y, and z are unsigned 32-bit integers. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_usad.html#__nv_usad">3.313. __nv_usad</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_urhadd(System.UInt32,System.UInt32)">
 <summary>
 Compute average of unsigned input arguments x and y as ( x + y + 1 ) >> 1, avoiding overflow in the intermediate sum. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_urhadd.html#__nv_urhadd">3.312. __nv_urhadd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_umulhi(System.UInt32,System.UInt32)">
 <summary>
 Calculate the most significant 32 bits of the 64-bit product x * y, where x and y are 32-bit unsigned integers. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umulhi.html#__nv_umulhi">3.311. __nv_umulhi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_umul64hi(System.UInt64,System.UInt64)">
 <summary>
 Calculate the most significant 64 bits of the 128-bit product x * y, where x and y are 64- bit unsigned integers. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umul64hi.html#__nv_umul64hi">3.310. __nv_umul64hi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_umul24(System.UInt32,System.UInt32)">
 <summary>
 Calculate the least significant 32 bits of the product of the least significant 24 bits of x and y. The high order 8 bits of x and y are ignored. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umul24.html#__nv_umul24">3.309. __nv_umul24</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_umin(System.UInt32,System.UInt32)">
 <summary>
 Determine the minimum value of the two 32-bit unsigned integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umin.html#__nv_umin">3.308. __nv_umin</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_umax(System.UInt32,System.UInt32)">
 <summary>
 Determine the maximum value of the two 32-bit unsigned integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_umax.html#__nv_umax">3.307. __nv_umax</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ullmin(System.UInt64,System.UInt64)">
 <summary>
 Determine the minimum value of the two 64-bit unsigned integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ullmin.html#__nv_ullmin">3.306. __nv_ullmin</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ullmax(System.UInt64,System.UInt64)">
 <summary>
 Determine the maximum value of the two 64-bit unsigned integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ullmax.html#__nv_ullmax">3.305. __nv_ullmax</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2float_rz(System.UInt64)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_rz.html#__nv_ull2float_rz">3.304. __nv_ull2floa_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2float_ru(System.UInt64)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in roundup (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_ru.html#__nv_ull2float_ru">3.303. __nv_ull2float_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2float_rn(System.UInt64)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_rn.html#__nv_ull2float_rn">3.302. __nv_ull2float_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2float_rd(System.UInt64)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2float_rd.html#__nv_ull2float_rd">3.301. __nv_ull2float_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2double_rz(System.UInt64)">
 <summary>
 Convert the unsigned 64-bit integer value x to a double-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_rz.html#__nv_ull2double_rz">3.300. __nv_ull2doubl_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2double_ru(System.UInt64)">
 <summary>
 Convert the unsigned 64-bit integer value x to a double-precision floating point value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_ru.html#__nv_ull2double_ru">3.299. __nv_ull2double_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2double_rn(System.UInt64)">
 <summary>
 Convert the unsigned 64-bit integer value x to a double-precision floating point value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_rn.html#__nv_ull2double_rn">3.298. __nv_ull2double_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ull2double_rd(System.UInt64)">
 <summary>
 Convert the unsigned 64-bit integer value x to a double-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ull2double_rd.html#__nv_ull2double_rd">3.297. __nv_ull2double_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uint2float_rz(System.UInt32)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_rz.html#__nv_uint2float_rz">3.296. __nv_uint2floa_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uint2float_ru(System.UInt32)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in roundup (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_ru.html#__nv_uint2float_ru">3.295. __nv_uint2float_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uint2float_rn(System.UInt32)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_rn.html#__nv_uint2float_rn">3.294. __nv_uint2float_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uint2float_rd(System.UInt32)">
 <summary>
 Convert the unsigned integer value x to a single-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2float_rd.html#__nv_uint2float_rd">3.293. __nv_uint2float_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uint2double_rn(System.UInt32)">
 <summary>
 Convert the unsigned integer value x to a double-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uint2double_rn.html#__nv_uint2double_rn">3.292. __nv_uint2double_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uhadd(System.UInt32,System.UInt32)">
 <summary>
 Compute average of unsigned input arguments x and y as ( x + y ) >> 1, avoiding overflow in the intermediate sum. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_uhadd.html#__nv_uhadd">3.291. __nv_uhadd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_truncf(System.Single)">
 <summary>
 Round x to the nearest integer value that does not exceed x in magnitude. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_truncf.html#__nv_truncf">3.290. __nv_truncf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_trunc(System.Double)">
 <summary>
 Round x to the nearest integer value that does not exceed x in magnitude. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_trunc.html#__nv_trunc">3.289. __nv_trunc</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_tgammaf(System.Single)">
 <summary>
 Calculate the gamma function of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tgammaf.html#__nv_tgammaf">3.288. __nv_tgammaf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_tgamma(System.Double)">
 <summary>
 Calculate the gamma function of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tgamma.html#__nv_tgamma">3.287. __nv_tgamma</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_tanhf(System.Single)">
 <summary>
 Calculate the hyperbolic tangent of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tanhf.html#__nv_tanhf">3.286. __nv_tanhf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_tanh(System.Double)">
 <summary>
 Calculate the hyperbolic tangent of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tanh.html#__nv_tanh">3.285. __nv_tanh</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_tanf(System.Single)">
 <summary>
 Calculate the tangent of the input argument x (measured in radians). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tanf.html#__nv_tanf">3.284. __nv_tanf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_tan(System.Double)">
 <summary>
 Calculate the tangent of the input argument x (measured in radians). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_tan.html#__nv_tan">3.283. __nv_tan</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sqrtf(System.Single)">
 <summary>
 Calculate the nonnegative square root of x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sqrtf.html#__nv_sqrtf">3.282. __nv_sqrtf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sqrt(System.Double)">
 <summary>
 Calculate the nonnegative square root of x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sqrt.html#__nv_sqrt">3.281. __nv_sqrt</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sinpif(System.Single)">
 <summary>
 Calculate the sine of x (measured in radians), where x is the input argument. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinpif.html#__nv_sinpif">3.280. __nv_sinpif</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sinpi(System.Double)">
 <summary>
 Calculate the sine of x (measured in radians), where x is the input argument. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinpi.html#__nv_sinpi">3.279. __nv_sinpi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sinhf(System.Single)">
 <summary>
 Calculate the hyperbolic sine of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinhf.html#__nv_sinhf">3.278. __nv_sinhf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sinh(System.Double)">
 <summary>
 Calculate the hyperbolic sine of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinh.html#__nv_sinh">3.277. __nv_sinh</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sinf(System.Single)">
 <summary>
 Calculate the sine of the input argument x (measured in radians). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sinf.html#__nv_sinf">3.276. __nv_sinf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sincospif(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single},Microsoft.FSharp.Core.FSharpRef{System.Single})">
 <summary>
 Calculate the sine and cosine of the first input argument, x (measured in radians). 
 The results for sine and cosine are written into the second argument sptr, and, respectively, third argument zptr. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincospif.html#__nv_sincospif">3.275. __nv_sincospif</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sincospi(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Double},Microsoft.FSharp.Core.FSharpRef{System.Double})">
 <summary>
 Calculate the sine and cosine of the first input argument, x (measured in radians). 
 The results for sine and cosine are written into the second argument sptr, and, respectively, third argument zptr. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincospi.html#__nv_sincospi">3.274. __nv_sincospi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sincosf(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single},Microsoft.FSharp.Core.FSharpRef{System.Single})">
 <summary>
 Calculate the sine and cosine of the first input argument x (measured in radians). 
 The results for sine and cosine are written into the second argument sptr, and, respectively, third argument zptr. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincosf.html#__nv_sincosf">3.273. __nv_sincosf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sincos(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Double},Microsoft.FSharp.Core.FSharpRef{System.Double})">
 <summary>
 Calculate the sine and cosine of the first input argument x (measured in radians). 
 The results for sine and cosine are written into the second argument sptr, and, respectively, third argument zptr. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sincos.html#__nv_sincos">3.272. __nv_sincos</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sin(System.Double)">
 <summary>
 Calculate the sine of the input argument x (measured in radians). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sin.html#__nv_sin">3.271. __nv_sin</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_signbitf(System.Single)">
 <summary>
 Determine whether the floating-point value x is negative. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_signbitf.html#__nv_signbitf">3.270. __nv_signbitf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_signbitd(System.Double)">
 <summary>
 Determine whether the floating-point value x is negative. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_signbitd.html#__nv_signbitd">3.269. __nv_signbitd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_scalbnf(System.Single,System.Int32)">
 <summary>
 Scale x by efficient manipulation of the floating-point exponent. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_scalbnf.html#__nv_scalbnf">3.268. __nv_scalbnf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_scalbn(System.Double,System.Int32)">
 <summary>
 Scale x by efficient manipulation of the floating-point exponent. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_scalbn.html#__nv_scalbn">3.267. __nv_scalbn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_saturatef(System.Single)">
 <summary>
 Clamp the input argument x to be within the interval [+0.0, 1.0]. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_saturatef.html#__nv_saturatef">3.266. __nv_saturatef</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_sad(System.Int32,System.Int32,System.Int32)">
 <summary>
 Calculate , the 32-bit sum of the third argument z plus and the absolute value of the difference between the first argument x, and second argument y. 
 Inputs x and y are signed 32-bit integers, input z is a 32-bit unsigned integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_sad.html#__nv_sad">3.265. __nv_sad</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rsqrtf(System.Single)">
 <summary>
 Calculate the reciprocal of the nonnegative square root of x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rsqrtf.html#__nv_rsqrtf">3.264. __nv_rsqrtf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rsqrt(System.Double)">
 <summary>
 Calculate the reciprocal of the nonnegative square root of x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rsqrt.html#__nv_rsqrt">3.263. __nv_rsqrt</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_roundf(System.Single)">
 <summary>
 Round x to the nearest integer value in floating-point format, with halfway cases rounded away from zero. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_roundf.html#__nv_roundf">3.262. __nv_roundf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_round(System.Double)">
 <summary>
 Round x to the nearest integer value in floating-point format, with halfway cases rounded away from zero. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_round.html#__nv_round">3.261. __nv_round</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rintf(System.Single)">
 <summary>
 Round x to the nearest integer value in floating-point format, with halfway cases rounded to the nearest even integer value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rintf.html#__nv_rintf">3.260. __nv_rintf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rint(System.Double)">
 <summary>
 Round x to the nearest integer value in floating-point format, with halfway cases rounded to the nearest even integer value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rint.html#__nv_rint">3.259. __nv_rint</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rhadd(System.Int32,System.Int32)">
 <summary>
 Compute average of signed input arguments x and y as ( x + y + 1 ) >> 1, avoiding overflow in the intermediate sum. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rhadd.html#__nv_rhadd">3.258. __nv_rhadd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_remquof(System.Single,System.Single,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>
 Compute a double-precision floating-point remainder in the same way as the remainder() function. Argument quo returns part of quotient upon division of x by y. 
 Value quo has the same sign as and may not be the exact quotient but agrees with the exact quotient in the low order 3 bits. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remquof.html#__nv_remquof">3.257. __nv_remquof</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_remquo(System.Double,System.Double,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>
 Compute a double-precision floating-point remainder in the same way as the remainder() function. Argument quo returns part of quotient upon division of x by y. 
 Value quo has the same sign as and may not be the exact quotient but agrees with the exact quotient in the low order 3 bits. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remquo.html#__nv_remquo">3.256. __nv_remquo</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_remainderf(System.Single,System.Single)">
 <summary>
 Compute double-precision floating-point remainder r of dividing x by y for nonzero y. Thus . The value n is the integer value nearest . In the case when, the even n value is chosen. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remainderf.html#__nv_remainderf">3.255. __nv_remainderf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_remainder(System.Double,System.Double)">
 <summary>
 Compute double-precision floating-point remainder r of dividing x by y for nonzero y. Thus . The value n is the integer value nearest . In the case when, the even n value is chosen. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_remainder.html#__nv_remainder">3.254. __nv_remainder</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rcbrtf(System.Single)">
 <summary>
 Calculate reciprocal cube root function of x 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rcbrtf.html#__nv_rcbrtf">3.253. __nv_rcbrtf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_rcbrt(System.Double)">
 <summary>
 Calculate reciprocal cube root function of x 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rcbrt.html#__nv_rcbrt">3.252. __nv_rcbrt</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_powif(System.Single,System.Int32)">
 <summary>
 Calculate the value of x to the power of y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_powif.html#__nv_powif">3.251. __nv_powif</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_powi(System.Double,System.Int32)">
 <summary>
 Calculate the value of x to the power of y.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_powi.html#__nv_powi">3.250. __nv_powi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_powf(System.Single,System.Single)">
 <summary>
 Calculate the value of x to the power of y.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_powf.html#__nv_powf">3.249. __nv_powf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_pow(System.Double,System.Double)">
 <summary>
 Calculate the value of x to the power of y.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_pow.html#__nv_pow">3.248. __nv_pow</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_popcll(System.Int64)">
 <summary>
 Count the number of bits that are set to 1 in x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_popcll.html#__nv_popcll">3.247. __nv_popcll</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_popc(System.Int32)">
 <summary>
 Count the number of bits that are set to 1 in x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_popc.html#__nv_popc">3.246. __nv_popc</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_normcdfinvf(System.Single)">
 <summary>
 Calculate the inverse of the standard normal cumulative distribution function for input argument y. The function is defined for input values in the interval . 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdfinvf.html#__nv_normcdfinvf">3.245. __nv_normcdfinvf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_normcdfinv(System.Double)">
 <summary>
 Calculate the inverse cumulative normal distribution function for input argument x. The function is defined for input values in the interval . 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdfinv.html#__nv_normcdfinv">3.244. __nv_normcdfinv</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_normcdff(System.Single)">
 <summary>
 Calculate the cumulative normal distribution function for input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdff.html#__nv_normcdff">3.243. __nv_normcdff</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_normcdf(System.Double)">
 <summary>
 Calculate the cumulative normal distribution function for input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdf.html#__nv_normcdf">3.242. __nv_normcdf</see>.

 <code>
 Phi(x) = integral(-infinity, x, phi(u) du) = integral(-infinity, x, 1/sqrt(2*pi) exp(-u*u/2) du)  
 </code>

 The implementation is based on the erf implementation of the Sun FDMLib version 5.3 and <see href="http://www.netlib.org/specfun/erf">Netlib</see>.
 It is more accurate than the versions of Abramowitz-Stegun.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_nextafterf(System.Single,System.Single)">
 <summary>
 Calculate the next representable double-precision floating-point value following x in the direction of y. 
 For example, if y is greater than x, nextafter() returns the smallest representable number greater than x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nextafterf.html#__nv_nextafterf">3.241. __nv_nextafterf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_nextafter(System.Double,System.Double)">
 <summary>
 Calculate the next representable double-precision floating-point value following x in the direction of y. 
 For example, if y is greater than x, nextafter() returns the smallest representable number greater than x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nextafter.html#__nv_nextafter">3.240. __nv_nextafter</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_nearbyintf(System.Single)">
 <summary>
 Round argument x to an integer value in double precision floating-point format. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nearbyintf.html#__nv_nearbyintf">3.239. __nv_nearbyintf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_nearbyint(System.Double)">
 <summary>
 Round argument x to an integer value in double precision floating-point format. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nearbyint.html#__nv_nearbyint">3.238. __nv_nearbyint</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_nanf(System.String)">
 <summary>
 Return a representation of a quiet NaN. Argument tagp selects one of the possible representations. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nanf.html#__nv_nanf">3.237. __nv_nanf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_nan(System.String)">
 <summary>
 Return a representation of a quiet NaN. Argument tagp selects one of the possible representations. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_nan.html#__nv_nan">3.236. __nv_nan</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_mulhi(System.Int32,System.Int32)">
 <summary>
 Calculate the most significant 32 bits of the 64-bit product x * y, where x and y are 32-bit integers. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_mulhi.html#__nv_mulhi">3.235. __nv_mulhi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_mul64hi(System.Int64,System.Int64)">
 <summary>
 Calculate the most significant 64 bits of the 128-bit product x * y, where x and y are 64- bit integers. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_mul64hi.html#__nv_mul64hi">3.234. __nv_mul64hi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_mul24(System.Int32,System.Int32)">
 <summary>
 Calculate the least significant 32 bits of the product of the least significant 24 bits of x and y. The high order 8 bits of x and y are ignored. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_mul24.html#__nv_mul24">3.233. __nv_mul24</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_modff(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single})">
 <summary>
 Break down the argument x into fractional and integral parts. The integral part is stored in the argument iptr. 
 Fractional and integral parts are given the same sign as the argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_modff.html#__nv_modff">3.232. __nv_modff</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_modf(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Double})">
 <summary>
 Break down the argument x into fractional and integral parts. The integral part is stored in the argument iptr. 
 Fractional and integral parts are given the same sign as the argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_modf.html#__nv_modf">3.231. __nv_modf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_min(System.Int32,System.Int32)">
 <summary>
 Determine the minimum value of the two 32-bit signed integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_min.html#__nv_min">3.230. __nv_min</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_max(System.Int32,System.Int32)">
 <summary>
 Determine the maximum value of the two 32-bit signed integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_max.html#__nv_max">3.229. __nv_max</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ulonglong_as_double(System.UInt64)">
 <summary>
 Reinterpret the bits in the 64-bit unsigned integer value x as a double-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_longlong_as_double.html#__nv_longlong_as_double">3.228. __nv_longlong_as_double</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_longlong_as_double(System.Int64)">
 <summary>
 Reinterpret the bits in the 64-bit signed integer value x as a double-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_longlong_as_double.html#__nv_longlong_as_double">3.228. __nv_longlong_as_double</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_logf(System.Single)">
 <summary>
 Calculate the base logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_logf.html#__nv_logf">3.227. __nv_logf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_logbf(System.Single)">
 <summary>
 Calculate the floating point representation of the exponent of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_logbf.html#__nv_logbf">3.226. __nv_logbf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_logb(System.Double)">
 <summary>
 Calculate the floating point representation of the exponent of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_logb.html#__nv_logb">3.225. __nv_logb</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log2f(System.Single)">
 <summary>
 Calculate the base 2 logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log2f.html#__nv_log2f">3.224. __nv_log2f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log2(System.Double)">
 <summary>
 Calculate the base 2 logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log2.html#__nv_log2">3.223. __nv_log2</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log1pf(System.Single)">
 <summary>
 Calculate the value of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log1pf.html#__nv_log1pf">3.222. __nv_log1pf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log1p(System.Double)">
 <summary>
 Calculate the value of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log1p.html#__nv_log1p">3.221. __nv_log1p</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log10f(System.Single)">
 <summary>
 Calculate the base 10 logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log10f.html#__nv_log10f">3.220. __nv_log10f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log10(System.Double)">
 <summary>
 Calculate the base 10 logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log10.html#__nv_log10">3.219. __nv_log10</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_log(System.Double)">
 <summary>
 Calculate the base logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_log.html#__nv_log">3.218. __nv_log</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llroundf(System.Single)">
 <summary>
 Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the result is undefined. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llroundf.html#__nv_llroundf">3.217. __nv_llroundf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llround(System.Double)">
 <summary>
 Round x to the nearest integer value, with halfway cases rounded away from zero. If the result is outside the range of the return type, the result is undefined. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llround.html#__nv_llround">3.216. __nv_llround</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llrintf(System.Single)">
 <summary>
 Round x to the nearest integer value, with halfway cases rounded towards zero. If the result is outside the range of the return type, the result is undefined. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llrintf.html#__nv_llrintf">3.215. __nv_llrintf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llrint(System.Double)">
 <summary>
 Round x to the nearest integer value, with halfway cases rounded towards zero. If the result is outside the range of the return type, the result is undefined. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llrint.html#__nv_llrint">3.214. __nv_llrint</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llmin(System.Int64,System.Int64)">
 <summary>
 Determine the minimum value of the two 64-bit signed integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llmin.html#__nv_llmin">3.213. __nv_llmin</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llmax(System.Int64,System.Int64)">
 <summary>
 Determine the maximum value of the two 64-bit signed integers x and y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llmax.html#__nv_llmax">3.212. __nv_llmax</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_llabs(System.Int64)">
 <summary>
 Determine the absolute value of the 64-bit signed integer x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_llabs.html#__nv_llabs">3.211. __nv_llabs</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2float_rz(System.Int64)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_rz.html#__nv_ll2float_rz">3.210. __nv_ll2floa_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2float_ru(System.Int64)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_ru.html#__nv_ll2float_ru">3.209. __nv_ll2float_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2float_rn(System.Int64)">
 <summary>
 Convert the signed 64-bit integer value x to a single-precision floating point value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_rn.html#__nv_ll2float_rn">3.208. __nv_ll2float_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2float_rd(System.Int64)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2float_rd.html#__nv_ll2float_rd">3.207. __nv_ll2float_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2double_rz(System.Int64)">
 <summary>
 Convert the signed 64-bit integer value x to a double-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_rz.html#__nv_ll2double_rz">3.206. __nv_ll2doubl_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2double_ru(System.Int64)">
 <summary>
 Convert the signed 64-bit integer value x to a double-precision floating point value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_ru.html#__nv_ll2double_ru">3.205. __nv_ll2double_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2double_rn(System.Int64)">
 <summary>
 Convert the signed 64-bit integer value x to a double-precision floating point value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_rn.html#__nv_ll2double_rn">3.204. __nv_ll2double_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ll2double_rd(System.Int64)">
 <summary>
 Convert the signed 64-bit integer value x to a double-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ll2double_rd.html#__nv_ll2double_rd">3.203. __nv_ll2double_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_lgammaf(System.Single)">
 <summary>
 Calculate the natural logarithm of the absolute value of the gamma function of the input argument x, namely the value of 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_lgammaf.html#__nv_lgammaf">3.202. __nv_lgammaf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_lgamma(System.Double)">
 <summary>
 Calculate the natural logarithm of the absolute value of the gamma function of the input argument x, namely the value of 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_lgamma.html#__nv_lgamma">3.201. __nv_lgamma</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ldexpf(System.Single,System.Int32)">
 <summary>
 Calculate the value of of the input arguments x and exp. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ldexpf.html#__nv_ldexpf">3.200. __nv_ldexpf</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ldexp(System.Double,System.Int32)">
 <summary>
 Calculate the value of of the input arguments x and exp. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ldexp.html#__nv_ldexp">3.199. __nv_ldexp</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_jnf(System.Int32,System.Single)">
 <summary>
 Calculate the value of the Bessel function of the first kind of order n for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_jnf.html#__nv_jnf">3.198. __nv_jnf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_jn(System.Int32,System.Double)">
 <summary>
 Calculate the value of the Bessel function of the first kind of order n for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_jn.html#__nv_jn">3.197. __nv_jn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_j1f(System.Single)">
 <summary>
 Calculate the value of the Bessel function of the first kind of order 1 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j1f.html#__nv_j1f">3.196. __nv_j1f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_j1(System.Double)">
 <summary>
 Calculate the value of the Bessel function of the first kind of order 1 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j1.html#__nv_j1">3.195. __nv_j1</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_j0f(System.Single)">
 <summary>
 Calculate the value of the Bessel function of the first kind of order 0 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j0f.html#__nv_j0f">3.194. __nv_j0f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_j0(System.Double)">
 <summary>
 Calculate the value of the Bessel function of the first kind of order 0 for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_j0.html#__nv_j0">3.193. __nv_j0</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_isnanf(System.Single)">
 <summary>
 Determine whether the floating-point value x is a NaN. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isnanf.html#__nv_isnanf">3.192. __nv_isnanf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_isnand(System.Double)">
 <summary>
 Determine whether the floating-point value x is a NaN. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isnand.html#__nv_isnand">3.191. __nv_isnand</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_isinff(System.Single)">
 <summary>
 Determine whether the floating-point value x is an infinite value (positive or negative). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isinff.html#__nv_isinff">3.190. __nv_isinff</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_isinfd(System.Double)">
 <summary>
 Determine whether the floating-point value x is an infinite value (positive or negative). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isinfd.html#__nv_isinfd">3.189. __nv_isinfd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_isfinited(System.Double)">
 <summary>
 Determine whether the floating-point value x is a finite value (zero, subnormal, or normal and not infinity or NaN). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_isfinited.html#__nv_isfinited">3.188. __nv_isfinited</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_uint_as_float(System.UInt32)">
 <summary>
 Reinterpret the bits in the unsigned integer value x as a single-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int_as_float.html#__nv_int_as_float">3.187. __nv_int_as_float</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_int_as_float(System.Int32)">
 <summary>
 Reinterpret the bits in the signed integer value x as a single-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int_as_float.html#__nv_int_as_float">3.187. __nv_int_as_float</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_int2float_rz(System.Int32)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_rz.html#__nv_int2float_rz">3.186. __nv_int2floa_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_int2float_ru(System.Int32)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_ru.html#__nv_int2float_ru">3.185. __nv_int2float_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_int2float_rn(System.Int32)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_rn.html#__nv_int2float_rn">3.184. __nv_int2float_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_int2float_rd(System.Int32)">
 <summary>
 Convert the signed integer value x to a single-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2float_rd.html#__nv_int2float_rd">3.183. __nv_int2float_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_int2double_rn(System.Int32)">
 <summary>
 Convert the signed integer value x to a double-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_int2double_rn.html#__nv_int2double_rn">3.182. __nv_int2double_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ilogbf(System.Single)">
 <summary>
 Calculates the unbiased integer exponent of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ilogbf.html#__nv_ilogbf">3.181. __nv_ilogbf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ilogb(System.Double)">
 <summary>
 Calculates the unbiased integer exponent of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ilogb.html#__nv_ilogb">3.180. __nv_ilogb</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_hypotf(System.Single,System.Single)">
 <summary>
 Calculate the length of the hypotenuse of a right triangle whose two sides have lengths x and y without undue overflow or underflow. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hypotf.html#__nv_hypotf">3.179. __nv_hypotf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_hypot(System.Double,System.Double)">
 <summary>
 Calculate the length of the hypotenuse of a right triangle whose two sides have lengths x and y without undue overflow or underflow. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hypot.html#__nv_hypot">3.178. __nv_hypot</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_hiloint2double(System.Int32,System.Int32)">
 <summary>
 Reinterpret the integer value of hi as the high 32 bits of a double-precision floating point value and the integer value of lo as the low 32 bits of the same double-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hiloint2double.html#__nv_hiloint2double">3.177. __nv_hiloint2double</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_half2float(System.Int16)">
 <summary>
 Convert the half-precision floating point value x represented in unsigned short format to a single-precision floating point value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_half2float.html#__nv_half2float">3.176. __nv_half2float</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_hadd(System.Int32,System.Int32)">
 <summary>
 Compute average of signed input arguments x and y as ( x + y ) >> 1, avoiding overflow in the intermediate sum. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_hadd.html#__nv_hadd">3.175. __nv_hadd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsub_rz(System.Single,System.Single)">
 <summary>
 Compute the difference of x and y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_rz.html#__nv_fsub_rz">3.174. __nv_fsu_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsub_ru(System.Single,System.Single)">
 <summary>
 Compute the difference of x and y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_ru.html#__nv_fsub_ru">3.173. __nv_fsub_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsub_rn(System.Single,System.Single)">
 <summary>
 Compute the difference of x and y in round-to-nearest-even rounding mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_rn.html#__nv_fsub_rn">3.172. __nv_fsub_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsub_rd(System.Single,System.Single)">
 <summary>
 Compute the difference of x and y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsub_rd.html#__nv_fsub_rd">3.171. __nv_fsub_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsqrt_rz(System.Single)">
 <summary>
 Compute the square root of x in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_rz.html#__nv_fsqrt_rz">3.170. __nv_fsqr_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsqrt_ru(System.Single)">
 <summary>
 Compute the square root of x in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_ru.html#__nv_fsqrt_ru">3.169. __nv_fsqrt_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsqrt_rn(System.Single)">
 <summary>
 Compute the square root of x in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_rn.html#__nv_fsqrt_rn">3.168. __nv_fsqrt_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fsqrt_rd(System.Single)">
 <summary>
 Compute the square root of x in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fsqrt_rd.html#__nv_fsqrt_rd">3.167. __nv_fsqrt_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frsqrt_rn(System.Single)">
 <summary>
 Compute the reciprocal square root of x in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frsqrt_rn.html#__nv_frsqrt_rn">3.166. __nv_frsqrt_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frexpf(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>
 Decompose the floating-point value x into a component m for the normalized fraction element and another term n for the exponent. 
 The absolute value of m will be greater than or equal to 0.5 and less than 1.0 or it will be equal to 0. 
 The integer exponent n will be stored in the location to which nptr points. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frexpf.html#__nv_frexpf">3.165. __nv_frexpf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frexp(System.Double,Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>
 Decompose the floating-point value x into a component m for the normalized fraction element and another term n for the exponent. 
 The absolute value of m will be greater than or equal to 0.5 and less than 1.0 or it will be equal to 0. 
 The integer exponent n will be stored in the location to which nptr points. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frexp.html#__nv_frexp">3.164. __nv_frexp</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frcp_rz(System.Single)">
 <summary>
 Compute the reciprocal of x in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_rz.html#__nv_frcp_rz">3.163. __nv_frc_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frcp_ru(System.Single)">
 <summary>
 Compute the reciprocal of x in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_ru.html#__nv_frcp_ru">3.162. __nv_frcp_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frcp_rn(System.Single)">
 <summary>
 Compute the reciprocal of x in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_rn.html#__nv_frcp_rn">3.161. __nv_frcp_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_frcp_rd(System.Single)">
 <summary>
 Compute the reciprocal of x in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_frcp_rd.html#__nv_frcp_rd">3.160. __nv_frcp_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmul_rz(System.Single,System.Single)">
 <summary>
 Compute the product of x and y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_rz.html#__nv_fmul_rz">3.159. __nv_fmu_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmul_ru(System.Single,System.Single)">
 <summary>
 Compute the product of x and y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_ru.html#__nv_fmul_ru">3.158. __nv_fmul_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmul_rn(System.Single,System.Single)">
 <summary>
 Compute the product of x and y in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_rn.html#__nv_fmul_rn">3.157. __nv_fmul_rn</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmul_rd(System.Single,System.Single)">
 <summary>
 Compute the product of x and y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmul_rd.html#__nv_fmul_rd">3.156. __nv_fmul_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmodf(System.Single,System.Single)">
 <summary>
 Calculate the floating-point remainder of $x / y$. The absolute value of the computed value is always less than y's absolute value and will have the same sign as x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmodf.html#__nv_fmodf">3.155. __nv_fmodf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmod(System.Double,System.Double)">
 <summary>
 Calculate the floating-point remainder of $x / y$. The absolute value of the computed value is always less than y's absolute value and will have the same sign as x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmod.html#__nv_fmod">3.154. __nv_fmod</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fminf(System.Single,System.Single)">
 <summary>
 Determines the minimum numeric value of the arguments x and y. Treats NaN arguments as missing data. 
 If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fminf.html#__nv_fminf">3.153. __nv_fminf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmin(System.Double,System.Double)">
 <summary>
 Determines the minimum numeric value of the arguments x and y. Treats NaN arguments as missing data. 
 If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmin.html#__nv_fmin">3.152. __nv_fmin</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmaxf(System.Single,System.Single)">
 <summary>
 Determines the maximum numeric value of the arguments x and y. Treats NaN arguments as missing data. 
 If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaxf.html#__nv_fmaxf">3.151. __nv_fmaxf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmax(System.Double,System.Double)">
 <summary>
 Determines the maximum numeric value of the arguments x and y. Treats NaN arguments as missing data. 
 If one argument is a NaN and the other is legitimate numeric value, the numeric value is chosen. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmax.html#__nv_fmax">3.150. __nv_fmax</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmaf_rz(System.Single,System.Single,System.Single)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_rz.html#__nv_fmaf_rz">3.149. __nv_fma_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmaf_ru(System.Single,System.Single,System.Single)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_ru.html#__nv_fmaf_ru">3.148. __nv_fmaf_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmaf_rn(System.Single,System.Single,System.Single)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_rn.html#__nv_fmaf_rn">3.147. __nv_fmaf_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmaf_rd(System.Single,System.Single,System.Single)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf_rd.html#__nv_fmaf_rd">3.146. __nv_fmaf_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fmaf(System.Single,System.Single,System.Single)">
 <summary>
 Compute the value of as a single ternary operation. After computing the value to infinite precision, the value is rounded once. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fmaf.html#__nv_fmaf">3.145. __nv_fmaf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fma_rz(System.Double,System.Double,System.Double)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_rz.html#__nv_fma_rz">3.144. __nv_fm_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fma_ru(System.Double,System.Double,System.Double)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_ru.html#__nv_fma_ru">3.143. __nv_fma_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fma_rn(System.Double,System.Double,System.Double)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_rn.html#__nv_fma_rn">3.142. __nv_fma_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fma_rd(System.Double,System.Double,System.Double)">
 <summary>
 Computes the value of as a single ternary operation, rounding the result once in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma_rd.html#__nv_fma_rd">3.141. __nv_fma_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fma(System.Double,System.Double,System.Double)">
 <summary>
 Compute the value of $x * y + z$ as a single ternary operation. After computing the value to infinite precision, the value is rounded once. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma.html#__nv_fma">3.140. __nv_fma</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_floorf(System.Single)">
 <summary>
 Calculates the largest integer value which is less than or equal to x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_floorf.html#__nv_floorf">3.139. __nv_floorf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_floor(System.Double)">
 <summary>
 Calculates the largest integer value which is less than or equal to x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_floor.html#__nv_floor">3.138. __nv_floor</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float_as_uint(System.Single)">
 <summary>
 Reinterpret the bits in the single-precision floating point value x as a unsigned integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float_as_int.html#__nv_float_as_int">3.137. __nv_float_as_int</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float_as_int(System.Single)">
 <summary>
 Reinterpret the bits in the single-precision floating point value x as a signed integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float_as_int.html#__nv_float_as_int">3.137. __nv_float_as_int</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ull_rz(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned 64-bit integer in round-towards_zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_rz.html#__nv_float2ull_rz">3.136. __nv_float2ul_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ull_ru(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned 64-bit integer in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_ru.html#__nv_float2ull_ru">3.135. __nv_float2ull_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ull_rn(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned 64-bit integer in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_rn.html#__nv_float2ull_rn">3.134. __nv_float2ull_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ull_rd(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned 64-bit integer in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ull_rd.html#__nv_float2ull_rd">3.133. __nv_float2ull_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2uint_rz(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned integer in round towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_rz.html#__nv_float2uint_rz">3.132. __nv_float2uin_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2uint_ru(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned integer in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_ru.html#__nv_float2uint_ru">3.131. __nv_float2uint_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2uint_rn(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned integer in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_rn.html#__nv_float2uint_rn">3.130. __nv_float2uint_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2uint_rd(System.Single)">
 <summary>
 Convert the single-precision floating point value x to an unsigned integer in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2uint_rd.html#__nv_float2uint_rd">3.129. __nv_float2uint_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ll_rz(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed 64-bit integer in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_rz.html#__nv_float2ll_rz">3.128. __nv_float2l_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ll_ru(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed 64-bit integer in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_ru.html#__nv_float2ll_ru">3.127. __nv_float2ll_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ll_rn(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed 64-bit integer in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_rn.html#__nv_float2ll_rn">3.126. __nv_float2ll_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2ll_rd(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed 64-bit integer in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2ll_rd.html#__nv_float2ll_rd">3.125. __nv_float2ll_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2int_rz(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed integer in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_rz.html#__nv_float2int_rz">3.124. __nv_float2in_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2int_ru(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed integer in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_ru.html#__nv_float2int_ru">3.123. __nv_float2int_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2int_rn(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed integer in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_rn.html#__nv_float2int_rn">3.122. __nv_float2int_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2int_rd(System.Single)">
 <summary>
 Convert the single-precision floating point value x to a signed integer in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2int_rd.html#__nv_float2int_rd">3.121. __nv_float2int_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_float2half_rn(System.Single)">
 <summary>
 Convert the single-precision float value x to a half-precision floating point value represented in unsigned short format, in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_float2half_rn.html#__nv_float2half_rn">3.120. __nv_float2half_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_finitef(System.Single)">
 <summary>
 Determine whether the floating-point value x is a finite value. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_finitef.html#__nv_finitef">3.119. __nv_finitef</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ffsll(System.Int64)">
 <summary>
 Find the position of the first (least significant) bit set to 1 in x, where the least significant bit position is 1. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ffsll.html#__nv_ffsll">3.118. __nv_ffsll</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ffs(System.Int32)">
 <summary>
 Find the position of the first (least significant) bit set to 1 in x, where the least significant bit position is 1. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ffs.html#__nv_ffs">3.117. __nv_ffs</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fdiv_rz(System.Single,System.Single)">
 <summary>
 Divide two floating point values x by y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_rz.html#__nv_fdiv_rz">3.116. __nv_fdi_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fdiv_ru(System.Single,System.Single)">
 <summary>
 Divide two floating point values x by y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_ru.html#__nv_fdiv_ru">3.115. __nv_fdiv_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fdiv_rn(System.Single,System.Single)">
 <summary>
 Divide two floating point values x by y in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_rn.html#__nv_fdiv_rn">3.114. __nv_fdiv_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fdiv_rd(System.Single,System.Single)">
 <summary>
 Divide two floating point values x by y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdiv_rd.html#__nv_fdiv_rd">3.113. __nv_fdiv_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fdimf(System.Single,System.Single)">
 <summary>
 Compute the positive difference between x and y. The positive difference is x - y when x > y and +0 otherwise. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdimf.html#__nv_fdimf">3.112. __nv_fdimf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fdim(System.Double,System.Double)">
 <summary>
 Compute the positive difference between x and y. The positive difference is x - y when x > y and +0 otherwise. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fdim.html#__nv_fdim">3.111. __nv_fdim</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_tanf(System.Single)">
 <summary>
 Calculate the fast approximate tangent of the input argument x, measured in radians. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_tanf.html#__nv_fast_tanf">3.110. __nv_fast_tanf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_sinf(System.Single)">
 <summary>
 Calculate the fast approximate sine of the input argument x, measured in radians. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_sinf.html#__nv_fast_sinf">3.109. __nv_fast_sinf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_sincosf(System.Single,Microsoft.FSharp.Core.FSharpRef{System.Single},Microsoft.FSharp.Core.FSharpRef{System.Single})">
 <summary>
 Calculate the fast approximate of sine and cosine of the first input argument x (measured in radians). 
 The results for sine and cosine are written into the second argument, sptr, and, respectively, third argument, zptr. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_sincosf.html#__nv_fast_sincosf">3.108. __nv_fast_sincosf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_powf(System.Single,System.Single)">
 <summary>
 Calculate the fast approximate of x, the first input argument, raised to the power of y. the second input argument. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_powf.html#__nv_fast_powf">3.107. __nv_fast_powf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_logf(System.Single)">
 <summary>
 Calculate the fast approximate base logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_logf.html#__nv_fast_logf">3.106. __nv_fast_logf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_log2f(System.Single)">
 <summary>
 Calculate the fast approximate base 2 logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_log2f.html#__nv_fast_log2f">3.105. __nv_fast_log2f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_log10f(System.Single)">
 <summary>
 Calculate the fast approximate base 10 logarithm of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_log10f.html#__nv_fast_log10f">3.104. __nv_fast_log10f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_fdividef(System.Single,System.Single)">
 <summary>
 Calculate the fast approximate division of x by y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_fdividef.html#__nv_fast_fdividef">3.103. __nv_fast_fdividef</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_expf(System.Single)">
 <summary>
 Calculate the fast approximate base exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_expf.html#__nv_fast_expf">3.102. __nv_fast_expf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_exp10f(System.Single)">
 <summary>
 Calculate the fast approximate base 10 exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_exp10f.html#__nv_fast_exp10f">3.101. __nv_fast_exp10f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fast_cosf(System.Single)">
 <summary>
 Calculate the fast approximate cosine of the input argument x, measured in radians. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fast_cosf.html#__nv_fast_cosf">3.100. __nv_fast_cosf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fadd_rz(System.Single,System.Single)">
 <summary>
 Compute the sum of x and y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_rz.html#__nv_fadd_rz">3.99. __nv_fad_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fadd_ru(System.Single,System.Single)">
 <summary>
 Compute the sum of x and y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_ru.html#__nv_fadd_ru">3.98. __nv_fadd_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fadd_rn(System.Single,System.Single)">
 <summary>
 Compute the sum of x and y in round-to-nearest-even rounding mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_rn.html#__nv_fadd_rn">3.97. __nv_fadd_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fadd_rd(System.Single,System.Single)">
 <summary>
 Compute the sum of x and y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fadd_rd.html#__nv_fadd_rd">3.96. __nv_fadd_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fabsf(System.Single)">
 <summary>
 Calculate the absolute value of the input argument x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fabsf.html#__nv_fabsf">3.95. __nv_fabsf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_fabs(System.Double)">
 <summary>
 Calculate the absolute value of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fabs.html#__nv_fabs">3.94. __nv_fabs</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_expm1f(System.Single)">
 <summary>
 Calculate the base exponential of the input argument x, minus 1. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_expm1f.html#__nv_expm1f">3.93. __nv_expm1f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_expm1(System.Double)">
 <summary>
 Calculate the base exponential of the input argument x, minus 1. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_expm1.html#__nv_expm1">3.92. __nv_expm1</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_expf(System.Single)">
 <summary>
 Calculate the base exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_expf.html#__nv_expf">3.91. __nv_expf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_exp2f(System.Single)">
 <summary>
 Calculate the base 2 exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp2f.html#__nv_exp2f">3.90. __nv_exp2f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_exp2(System.Double)">
 <summary>
 Calculate the base 2 exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp2.html#__nv_exp2">3.89. __nv_exp2</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_exp10f(System.Single)">
 <summary>
 Calculate the base 10 exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp10f.html#__nv_exp10f">3.88. __nv_exp10f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_exp10(System.Double)">
 <summary>
 Calculate the base 10 exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp10.html#__nv_exp10">3.87. __nv_exp10</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_exp(System.Double)">
 <summary>
 Calculate the base exponential of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_exp.html#__nv_exp">3.86. __nv_exp</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfinvf(System.Single)">
 <summary>
 Calculate the inverse error function of the input argument y, for y in the interval [-1, 1]. 
 The inverse error function finds the value x that satisfies the equation y = erf(x), for y in [-1, -1], and x in [-infinity, infinity]. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfinvf.html#__nv_erfinvf">3.85. __nv_erfinvf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfinv(System.Double)">
 <summary>
 Calculate the inverse error function of the input argument y, for y in the interval [-1, 1]. The inverse error function finds the value x that satisfies the equation y = erf(x). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfinv.html#__nv_erfinv">3.84. __nv_erfinv</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erff(System.Single)">
 <summary>
 Calculate the value of the error function for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erff.html#__nv_erff">3.83. __nv_erff</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfcxf(System.Single)">
 <summary>
 Calculate the scaled complementary error function of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcxf.html#__nv_erfcxf">3.82. __nv_erfcxf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfcx(System.Double)">
 <summary>
 Calculate the scaled complementary error function of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcx.html#__nv_erfcx">3.81. __nv_erfcx</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfcinvf(System.Single)">
 <summary>
 Calculate the inverse complementary error function of the input argument y, for y in [0, 2]. 
 The inverse complementary error function find the value x that satisfies the equation y = erfc(x), for y in [0, 2] and x in [-infinity, infinity]. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcinvf.html#__nv_erfcinvf">3.80. __nv_erfcinvf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfcinv(System.Double)">
 <summary>
 Calculate the inverse complementary error function of the input argument y, for y in [0, 2]. 
 The inverse complementary error function find the value x that satisfies the equation y = erfc(x), for y in [0, 2] and x in [-infinity, infinity]. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcinv.html#__nv_erfcinv">3.79. __nv_erfcinv</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfcf(System.Single)">
 <summary>
 Calculate the complementary error function of the input argument x, 1 - erf(x).

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfcf.html#__nv_erfcf">3.78. __nv_erfcf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erfc(System.Double)">
 <summary>
 Calculate the complementary error function of the input argument x, 1 - erf(x). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erfc.html#__nv_erfc">3.77. __nv_erfc</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_erf(System.Double)">
 <summary>
 Calculate the value of the error function for the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_erf.html#__nv_erf">3.76. __nv_erf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dsqrt_rz(System.Double)">
 <summary>
 Compute the square root of x in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_rz.html#__nv_dsqrt_rz">3.75. __nv_dsqrt_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dsqrt_ru(System.Double)">
 <summary>
 Compute the square root of x in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_ru.html#__nv_dsqrt_ru">3.74. __nv_dsqrt_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dsqrt_rn(System.Double)">
 <summary>
 Compute the square root of x in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_rn.html#__nv_dsqrt_rn">3.73. __nv_dsqrt_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dsqrt_rd(System.Double)">
 <summary>
 Compute the square root of x in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dsqrt_rd.html#__nv_dsqrt_rd">3.72. __nv_dsqrt_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_drcp_rz(System.Double)">
 <summary>
 Compute the reciprocal of x in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_rz.html#__nv_drcp_rz">3.71. __nv_drcp_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_drcp_ru(System.Double)">
 <summary>
 Compute the reciprocal of x in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_ru.html#__nv_drcp_ru">3.70. __nv_drcp_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_drcp_rn(System.Double)">
 <summary>
 Compute the reciprocal of x in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_rn.html#__nv_drcp_rn">3.69. __nv_drcp_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_drcp_rd(System.Double)">
 <summary>
 Compute the reciprocal of x in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_drcp_rd.html#__nv_drcp_rd">3.68. __nv_drcp_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double_as_ulonglong(System.Double)">
 <summary>
 Reinterpret the bits in the double-precision floating point value x as a unsigned 64-bit integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double_as_longlong.html#__nv_double_as_longlong">3.67. __nv_double_as_longlong</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double_as_longlong(System.Double)">
 <summary>
 Reinterpret the bits in the double-precision floating point value x as a signed 64-bit integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double_as_longlong.html#__nv_double_as_longlong">3.67. __nv_double_as_longlong</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ull_rz(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned 64-bit integer value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_rz.html#__nv_double2ull_rz">3.66. __nv_double2ull_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ull_ru(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned 64-bit integer value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_ru.html#__nv_double2ull_ru">3.65. __nv_double2ull_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ull_rn(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned 64-bit integer value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_rn.html#__nv_double2ull_rn">3.64. __nv_double2ull_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ull_rd(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned 64-bit integer value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ull_rd.html#__nv_double2ull_rd">3.63. __nv_double2ull_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2uint_rz(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned integer value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_rz.html#__nv_double2uint_rz">3.62. __nv_double2uint_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2uint_ru(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned integer value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_ru.html#__nv_double2uint_ru">3.61. __nv_double2uint_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2uint_rn(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned integer value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_rn.html#__nv_double2uint_rn">3.60. __nv_double2uint_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2uint_rd(System.Double)">
 <summary>
 Convert the double-precision floating point value x to an unsigned integer value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2uint_rd.html#__nv_double2uint_rd">3.59. __nv_double2uint_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2loint(System.Double)">
 <summary>
 Reinterpret the low 32 bits in the double-precision floating point value x as a signed integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2loint.html#__nv_double2loint">3.58. __nv_double2loint</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ll_rz(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed 64-bit integer value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_rz.html#__nv_double2ll_rz">3.57. __nv_double2ll_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ll_ru(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed 64-bit integer value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_ru.html#__nv_double2ll_ru">3.56. __nv_double2ll_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ll_rn(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed 64-bit integer value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_rn.html#__nv_double2ll_rn">3.55. __nv_double2ll_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2ll_rd(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed 64-bit integer value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2ll_rd.html#__nv_double2ll_rd">3.54. __nv_double2ll_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2int_rz(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed integer value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_rz.html#__nv_double2int_rz">3.53. __nv_double2in_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2int_ru(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed integer value in roundup (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_ru.html#__nv_double2int_ru">3.52. __nv_double2int_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2int_rn(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed integer value in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_rn.html#__nv_double2int_rn">3.51. __nv_double2int_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2int_rd(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a signed integer value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2int_rd.html#__nv_double2int_rd">3.50. __nv_double2int_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2hiint(System.Double)">
 <summary>
 Reinterpret the high 32 bits in the double-precision floating point value x as a signed integer. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2hiint.html#__nv_double2hiint">3.49. __nv_double2hiint</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2float_rz(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a single-precision floating point value in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_rz.html#__nv_double2float_rz">3.48. __nv_double2floa_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2float_ru(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a single-precision floating point value in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_ru.html#__nv_double2float_ru">3.47. __nv_double2float_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2float_rn(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a single-precision floating point value in round-to-nearest-even mode.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_rn.html#__nv_double2float_rn">3.46. __nv_double2float_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_double2float_rd(System.Double)">
 <summary>
 Convert the double-precision floating point value x to a single-precision floating point value in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_double2float_rd.html#__nv_double2float_rd">3.45. __nv_double2float_rd</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dmul_rz(System.Double,System.Double)">
 <summary>
 Multiplies two floating point values x and y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_rz.html#__nv_dmul_rz">3.44. __nv_dmu_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dmul_ru(System.Double,System.Double)">
 <summary>
 Multiplies two floating point values x and y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_ru.html#__nv_dmul_ru">3.43. __nv_dmul_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dmul_rn(System.Double,System.Double)">
 <summary>
 Multiplies two floating point values x and y in round-to-nearest-even mode.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_rn.html#__nv_dmul_rn">3.42. __nv_dmul_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dmul_rd(System.Double,System.Double)">
 <summary>
 Multiplies two floating point values x and y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dmul_rd.html#__nv_dmul_rd">3.41. __nv_dmul_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ddiv_rz(System.Double,System.Double)">
 <summary>
 Divides two floating point values x by y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_rz.html#__nv_ddiv_rz">3.40. __nv_ddi_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ddiv_ru(System.Double,System.Double)">
 <summary>
 Divides two floating point values x by y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_ru.html#__nv_ddiv_ru">3.39. __nv_ddiv_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ddiv_rn(System.Double,System.Double)">
 <summary>
 Divides two floating point values x by y in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_rn.html#__nv_ddiv_rn">3.38. __nv_ddiv_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ddiv_rd(System.Double,System.Double)">
 <summary>
 Divides two floating point values x by y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ddiv_rd.html#__nv_ddiv_rd">3.37. __nv_ddiv_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dadd_rz(System.Double,System.Double)">
 <summary>
 Adds two floating point values x and y in round-towards-zero mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_rz.html#__nv_dadd_rz">3.36. __nv_dad_rz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dadd_ru(System.Double,System.Double)">
 <summary>
 Adds two floating point values x and y in round-up (to positive infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_ru.html#__nv_dadd_ru">3.35. __nv_dadd_ru</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dadd_rn(System.Double,System.Double)">
 <summary>
 Adds two floating point values x and y in round-to-nearest-even mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_rn.html#__nv_dadd_rn">3.34. __nv_dadd_rn</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_dadd_rd(System.Double,System.Double)">
 <summary>
 Adds two floating point values x and y in round-down (to negative infinity) mode. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_dadd_rd.html#__nv_dadd_rd">3.33. __nv_dadd_rd</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cospif(System.Single)">
 <summary>
 Calculate the cosine of x (measured in radians), where x is the input argument. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cospif.html#__nv_cospif">3.32. __nv_cospif</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cospi(System.Double)">
 <summary>
 Calculate the cosine of x (measured in radians), where x is the input argument. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cospi.html#__nv_cospi">3.31. __nv_cospi</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_coshf(System.Single)">
 <summary>
 Calculate the hyperbolic cosine of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_coshf.html#__nv_coshf">3.30. __nv_coshf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cosh(System.Double)">
 <summary>
 Calculate the hyperbolic cosine of the input argument x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cosh.html#__nv_cosh">3.29. __nv_cosh</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cosf(System.Single)">
 <summary>
 Calculate the cosine of the input argument x (measured in radians). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cosf.html#__nv_cosf">3.28. __nv_cosf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cos(System.Double)">
 <summary>
 Calculate the cosine of the input argument x (measured in radians). 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cos.html#__nv_cos">3.27. __nv_cos</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_copysignf(System.Single,System.Single)">
 <summary>
 Create a floating-point value with the magnitude x and the sign of y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_copysignf.html#__nv_copysignf">3.26. __nv_copysignf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_copysign(System.Double,System.Double)">
 <summary>
 Create a floating-point value with the magnitude x and the sign of y. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_copysign.html#__nv_copysign">3.25. __nv_copysign</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_clzll(System.Int64)">
 <summary>
 Count the number of consecutive leading zero bits, starting at the most significant bit (bit 63) of x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_clzll.html#__nv_clzll">3.24. __nv_clzll</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_clz(System.Int32)">
 <summary>
 Count the number of consecutive leading zero bits, starting at the most significant bit (bit 31) of x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_clz.html#__nv_clz">3.23. __nv_clz</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ceilf(System.Single)">
 <summary>
 Compute the smallest integer value not less than x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ceilf.html#__nv_ceilf">3.22. __nv_ceilf</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_ceil(System.Double)">
 <summary>
 Compute the smallest integer value not less than x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_ceil.html#__nv_ceil">3.21. __nv_ceil</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cbrtf(System.Single)">
 <summary>
 Calculate the cube root of x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cbrtf.html#__nv_cbrtf">3.20. __nv_cbrtf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_cbrt(System.Double)">
 <summary>
 Calculate the cube root of x. 

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_cbrt.html#__nv_cbrt">3.19. __nv_cbrt</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_byte_perm(System.Int32,System.Int32,System.Int32)">
 <summary>
 Returns a 32-bit integer consisting of four bytes from eight input bytes provided in the two input integers x and y, 
 as specified by a selector, s. 

 The input bytes are indexed as follows: 

 <code>
 input[0] = x(7:0)
 input[1] = x(15:8)
 input[2] = x(23:16>)
 input[3] = x(31:24)
 input[4] = y(7:0) 
 input[5] = y(15:8) 
 input[6] = y(23:16) 
 input[7] = y(31:24) 
 </code>

 The selector indices are as follows (the upper 16-bits of the selector are not used): 

 <code>
 selector[0] = s(2:0)
 selector[1] = s(6:4) 
 selector[2] = s(10:8) 
 selector[3] = s(14:12)
 </code>

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_byte_perm.html#__nv_byte_perm">3.18. __nv_byte_perm</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_brevll(System.UInt64)">
 <summary> 
 Reverses the bit order of the 64 bit unsigned integer x.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_brevll.html#__nv_brevll">3.17. __nv_brevll</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_brev(System.UInt32)">
 <summary>
 Reverses the bit order of the 32 bit unsigned integer x.
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_brev.html#__nv_brev">3.16. __nv_brev</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_atanhf(System.Single)">
 <summary>
 Calculate the arc hyperbolic tangent of the input argument x.
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atanhf.html#__nv_atanhf">3.15. __nv_atanhf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_atanh(System.Double)">
 <summary>
 Calculate the arc hyperbolic tangent of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atanh.html#__nv_atanh">3.14. __nv_atanh</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_atanf(System.Single)">
 <summary>
 Calculate the principal value of the arc tangent of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atanf.html#__nv_atanf">3.13. __nv_atanf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_atan2f(System.Single,System.Single)">
 <summary>
 Calculate the principal value of the arc tangent of the ratio of first and second input arguments x/y. The quadrant of the result is determined by the signs of inputs x and y. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atan2f.html#__nv_atan2f">3.12. __nv_atan2f</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_atan2(System.Double,System.Double)">
 <summary>
 Calculate the principal value of the arc tangent of the ratio of first and second input arguments x/y. The quadrant of the result is determined by the signs of inputs x and y. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atan2.html#__nv_atan2">3.11. __nv_atan2</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_atan(System.Double)">
 <summary>
 Calculate the principal value of the arc tangent of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_atan.html#__nv_atan">3.10. __nv_atan</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_asinhf(System.Single)">
 <summary>
 Calculate the arc hyperbolic sine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinhf.html#__nv_asinhf">3.9. __nv_asinhf</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_asinh(System.Double)">
 <summary>
 Calculate the arc hyperbolic sine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinh.html#__nv_asinh">3.8. __nv_asinh</see>
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_asinf(System.Single)">
 <summary>
 Calculate the principal value of the arc sine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinf.html#__nv_asinf">3.7. __nv_asinf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_asin(System.Double)">
 <summary>
 Calculate the principal value of the arc sine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asin.html#__nv_asin">3.6. __nv_asin</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_acoshf(System.Single)">
 <summary>
 Calculate the nonnegative arc hyperbolic cosine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acoshf.html#__nv_acoshf">3.5. __nv_acoshf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_acosh(System.Double)">
 <summary>
 Calculate the nonnegative arc hyperbolic cosine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acosh.html#__nv_acosh">3.4. __nv_acosh</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_acosf(System.Single)">
 <summary>
 Calculate the principal value of the arc cosine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acosf.html#__nv_acosf">3.3. __nv_acosf</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_acos(System.Double)">
 <summary>
 Calculate the principal value of the arc cosine of the input argument x. 
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_acos.html#__nv_acos">3.2. __nv_acos</see>.
 </summary>
</member>
<member name="M:Alea.LibDevice.__nv_abs(System.Int32)">
 <summary>
 Determine the absolute value of the 32-bit signed integer x.
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_abs.html#__nv_abs">3.1. __nv_abs</see>.
 </summary>
</member>
<member name="T:Alea.LibDevice">
 <summary>
 Provides basic library for kernel authoring. 
 Please refer to <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/index.html">LibDevice User's Guide</see>
 for more detail.
 </summary>
</member>
<member name="T:Alea.Overrides">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Uint32ToFloatNormalized">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Uint32ToFloatNormalizedAttribute">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCdfAS">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCdfASAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCdfInvSBEx">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCdfInvSBExAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCdfInvSB">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCdfInvSBAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCDF">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NormCDFAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Asinh">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.AsinhAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Rsqrt">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.RsqrtAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Fma">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.FmaAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Pow">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.PowAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.SinCos">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.SinCosAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.IsNan">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.IsNanAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Nan">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NanAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Quarter">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.QuarterAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Half">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.HalfAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Sqrt2">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Sqrt2Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.EulerE">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.EulerEAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.OneOver2To32MinusOne">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.OneOver2To32MinusOneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.OneOver2To32">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.OneOver2To32Attribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Sqrt2Pi">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Sqrt2PiAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Pi">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.PiAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MinusTwo">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MinusTwoAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Two">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.TwoAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MinusOne">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MinusOneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.One">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.OneAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MinVal">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MinValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MaxVal">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.MaxValAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.Epsilon">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.EpsilonAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NegInfinity">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.NegInfinityAttribute">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.PosInfinity">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.PosInfinityAttribute">
<summary>
Binary search. The function returns the index i, in the sequence v, of the __left__
value in the sub-interval `[v[i], v[i+1]]` to which the value x belongs such that we have `v[i] &lt;= x &lt;= v[i+1]`.
If `x &lt; v[0]`, then `0` is returned, and if `x &gt;= v[n-1]`, then `n-2` is still returned. 

See &lt;see href=&quot;http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html&quot;&gt;this link&lt;/see&gt;
for some tricky parts of the algorithm. 
 
#### Args

* `n` the sequence length
* `v` the sequence to search in 
* `x` the value to search for

#### Returns 

* Index `i`, in the array `v`, so that `v[i] &lt;= x &lt;= v[i+1]`
Linear interpolation.
 
#### Args

* `n` - number of x-coordinates and function values
* `x` - x-coordinates
* `f` - function values at the x-coordinates
* `xi` - the x-coordinate where to interpolate 
* `index` - the index of xi in x
Linear interpolation.

#### Args

* `n` - number of x-coordinates and function values
* `x` - x-coordinates
* `f` - function values at the x-coordinates
* `xi` - the x-coordinate where to interpolate 
Bilinear interpolation.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values at the (x, y)-coordinates in a matrix of row major storage order
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate 
* `rowIndex` - index from binary search of colCoord
* `colIndex` - index from binary search of colCoord
Bilinear interpolation.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values at the (x, y)-coordinates in a matrix of row major storage order
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate 
Bilinear interpolation by row.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values iterated by row e.g. v(i,j) = values.[i * numCols + j]
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate
Bilinear interpolation by column.

#### Args

* `numRows` - number of y-coordinates corresponding to rows of data matrix
* `numCols` - number of x-coordinates corresponding to columns of data matrix
* `rowCoords` - y-coordinates
* `colCoords` - x-coordinates
* `values` - values iterated by column e.g. v(i,j) = values.[j * numRows + i]
* `rowCoord` - the y-coordinate where to interpolate
* `colCoord` - the x-coordinate where to interpolate
 [omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GOfInt64">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GOfInt32">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GUInt2Int">
<summary>
[omit]        
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GInt2UInt">
<summary>
[omit]        
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GFloat2UInt">
<summary>
[omit]        
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GUInt2Float">
<summary>
[omit]        
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GFloat2Int">
<summary>
[omit]        
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GInt2Float">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GUInt">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GInt">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GFloat">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GConv">
<summary>
[omit]
</summary>
</member>
<member name="T:Alea.LibDeviceEx.GConvAttribute">
<summary>
[omit]
</summary>
</member>
<member name="M:Alea.LibDeviceEx.__uint32_to_float_normalized``1(System.UInt32)">
 <summary>
 Converts an uint32 value to a float or float32 value on the interval [0, 1). 
 The maximal value 0u - 1u = 4294967295u is thereby mapped to 1.0 - __epsilon(), the largest value strictly smaller than 1.0, not equal to 1.0.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.uint32ToFloatNormalized(System.UInt32)">
 <summary>
 Converts an uint32 value to a float value on the interval [0, 1). 
 The maximal value 0u - 1u = 4294967295u is thereby mapped to 1.0 - __epsilon(), the largest value strictly smaller than 1.0, not equal to 1.0.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.uint64ToFloatNormalized(System.UInt64)">
 <summary>
 Converts an uint64 value to a float value on the interval [0, 1). 
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.uint32ToFloat32Normalized(System.UInt32)">
 <summary>
 Converts an uint32 value to a float32 value on the interval [0, 1). 
 The maximal value 0u - 1u = 4294967295u is thereby mapped to 1.0 - __epsilon(), the largest value strictly smaller than 1.0, not equal to 1.0.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__normcdf_as``1(``0)">
 <summary>
 Cumulative normal distribution function. x can be float or float32
   
 <code>
 Phi(x) = integral(-infinity, x, phi(u) du) = integral(-infinity, x, 1/sqrt(2*pi) exp(-u*u/2) du) 
 </code>
 
 by a simple rational approximation. It uses the asymptotic expansion (26.2.12)
 in <see href="http://www.math.sfu.ca/~cbm/aands/page_932.htm">Abramowitz-Stegun p. 932</see>.

 For most cases this version is accurate enough, in particular for x in [-6, 6].
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__normcdfinv_sbex``1(``0)">
 <summary>
 Inverse cumulative normal distribution function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__normcdfinv_sb``1(``0)">
 <summary>
 Inverse cumulative normal distribution function.
 Implementation based on <see href="http://arxiv.org/pdf/0901.0638v5.pdf">Shaw-Brickman</see>. x can be either float or float32.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__normcdf``1(``0)">
 <summary>
 Calculate the cumulative normal distribution function for input argument x. x can be either float or float32.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_normcdf.html#__nv_normcdf">3.242.__nv_normcdf</see>.

 <code>
 Phi(x) = integral(-infinity, x, phi(u) du) = integral(-infinity, x, 1/sqrt(2*pi) exp(-u*u/2) du)
 </code>

 based on the erf implementation of the Sun FDMLib version 5.3 and <see href="http://www.netlib.org/specfun/erf">Netlib</see>.
 It is more accurate than the versions of Abramowitz-Stegun.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__asinh``1(``0)">
 <summary>
 Calculate the arc hyperbolic sine of the input argument x. x can be either float or float32.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_asinh.html#__nv_asinh">3.8.__nv_asinh</see>.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__rsqrt``1(``0)">
 <summary>
 Calculate the reciprocal of the nonnegative square root 1/sqrt(x) of x. x can be float or float32.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_rsqrt.html#__nv_rsqrt">3.263.__nv_rsqrt</see>.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__fma``1(``0,``0,``0)">
 <summary>
 Compute the value of x*y + z as a single ternary operation. After computing the value to infinite precision, the value is rounded once. 
 x, y, and z can be float or float32.
 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_fma.html#__nv_fma">3.140.__nv_fma</see>.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__pow``1(``0,``0)">
 <summary>
 Calculate the value of x to the power of y. x and y can either be float or float32.

 See <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/__nv_pow.html#__nv_pow">3.248.__nv_pow</see> for more information.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__sincos``1(``0,Microsoft.FSharp.Core.FSharpRef{``0},Microsoft.FSharp.Core.FSharpRef{``0})">
 <summary>
 Calculate the sine and cosine of the first input argument x (measured in radians). The results for sine and cosine are
 written into sref and cref, respectively. x can be either a float or float32.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__isnan``1(``0)">
 <summary>
 Returns true if x is nan. x can be a float or float32.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__nan``1">
 <summary>
 Returns nan or nanf depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__quarter``1">
 <summary>
 Returns 0.25 or 0.25f depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__half``1">
 <summary>
 Returns 0.5 or 0.5f depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__sqrt2``1">
 <summary>
 Returns the constant sqrt(2) as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__e``1">
 <summary>
 Returns the Euler constant e as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__oneover2to32minus1``1">
 <summary>
 Returns the constant 1 / (2^(-32)-1) 
 as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__oneover2to32``1">
 <summary>
 Returns the constant 2^(-32) 
 as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__sqrt2pi``1">
 <summary>
 Returns the constant sqrt(2*pi) as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__pi``1">
 <summary>
 Returns pi as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__minus_two``1">
 <summary>
 Returns -2.0 or -2.0f depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__two``1">
 <summary>
 Returns 2.0 or 2.0f depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__minus_one``1">
 <summary>
 Returns -1.0 or -1.0f depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__one``1">
 <summary>
 Returns 1.0 or 1.0f depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__minval``1">
 <summary>
 Generic function for minimum value.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__maxval``1">
 <summary>
 Generic function for maximum value.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__epsilon``1">
 <summary>
 Gives the difference between 1.0 and the next-nearest number representable as a machine-precision number. 
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__neginf``1">
 <summary>
 Returns negitive infinity as a float or float32, depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__posinf``1">
 <summary>
 Returns positive infinity as a float or float32 depending on the type interpreted at kernel compile time.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gofint64``1(System.Int64)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gofint32``1(System.Int32)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__guint2int``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gint2uint``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gfloat2uint``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__guint2float``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gfloat2int``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gint2float``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__guint``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gint``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gfloat``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="M:Alea.LibDeviceEx.__gconv``2(``0)">
 <summary>
 Generic inline F# converter function.
 </summary>
</member>
<member name="T:Alea.LibDeviceEx">
 <summary>
 Provides basic library for kernel authoring. 
 Please refer to <see href="http://docs.nvidia.com/cuda/libdevice-users-guide/index.html">LibDevice User's Guide</see>
 for more detail.
 </summary>
</member>
<member name="T:Alea.ILCommon">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.ILAnalyzer">
<summary>
 [omit]
</summary>
</member>
<member name="T:Alea.ILBuilders">
<summary>
 [omit]
</summary>
</member>
<member name="P:Alea.Compilation.gpumodule">
<summary>
The template workflow; used to build resources.
</summary>
</member>
<member name="T:Alea.Compilation">
<summary>
This module provides a work flow to create template.
</summary>
</member>
<member name="M:Alea.cuDNN.SpatialTransformerDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.RNNDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.DropoutDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.LRNDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.ActivationDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.PoolingDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.ConvolutionDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.FilterDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.TensorDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.cuDNN.OpTensorDescriptor.Dispose(System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``16(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``15(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``14(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``13(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``12(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``11(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``10(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``9(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``8(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``7(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5,``6},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``6(Alea.Session,System.Action{``0,``1,``2,``3,``4,``5},Alea.LaunchParam,``0,``1,``2,``3,``4,``5)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``5(Alea.Session,System.Action{``0,``1,``2,``3,``4},Alea.LaunchParam,``0,``1,``2,``3,``4)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``4(Alea.Session,System.Action{``0,``1,``2,``3},Alea.LaunchParam,``0,``1,``2,``3)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``3(Alea.Session,System.Action{``0,``1,``2},Alea.LaunchParam,``0,``1,``2)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``2(Alea.Session,System.Action{``0,``1},Alea.LaunchParam,``0,``1)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch``1(Alea.Session,System.Action{``0},Alea.LaunchParam,``0)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.SessionExtensions.Launch(Alea.Session,System.Action,Alea.LaunchParam)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``16(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``15(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``14(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``13(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``12(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``11(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``10(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``9(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``8(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``7(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5,``6},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``6(Alea.Stream,System.Action{``0,``1,``2,``3,``4,``5},Alea.LaunchParam,``0,``1,``2,``3,``4,``5)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``5(Alea.Stream,System.Action{``0,``1,``2,``3,``4},Alea.LaunchParam,``0,``1,``2,``3,``4)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``4(Alea.Stream,System.Action{``0,``1,``2,``3},Alea.LaunchParam,``0,``1,``2,``3)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``3(Alea.Stream,System.Action{``0,``1,``2},Alea.LaunchParam,``0,``1,``2)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``2(Alea.Stream,System.Action{``0,``1},Alea.LaunchParam,``0,``1)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch``1(Alea.Stream,System.Action{``0},Alea.LaunchParam,``0)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.StreamExtensions.Launch(Alea.Stream,System.Action,Alea.LaunchParam)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``16(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``15(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``14(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``13(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``12(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``11(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``10(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``9(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7,``8)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``8(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6,``7)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``7(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6},Alea.LaunchParam,``0,``1,``2,``3,``4,``5,``6)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``6(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5},Alea.LaunchParam,``0,``1,``2,``3,``4,``5)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``5(Alea.Gpu,System.Action{``0,``1,``2,``3,``4},Alea.LaunchParam,``0,``1,``2,``3,``4)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``4(Alea.Gpu,System.Action{``0,``1,``2,``3},Alea.LaunchParam,``0,``1,``2,``3)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``3(Alea.Gpu,System.Action{``0,``1,``2},Alea.LaunchParam,``0,``1,``2)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``2(Alea.Gpu,System.Action{``0,``1},Alea.LaunchParam,``0,``1)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch``1(Alea.Gpu,System.Action{``0},Alea.LaunchParam,``0)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.Launch(Alea.Gpu,System.Action,Alea.LaunchParam)">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetStaticKernel(Alea.Gpu,System.Delegate)">
 <summary>
 Get or load a kernel which doesn't contain compile-time constant argument.
 </summary>
 <param name="this">The Gpu to load the kernel.</param>
 <param name="kernel">The delegate of the kernel function.</param>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetStaticKernel(Alea.Gpu,System.Reflection.MethodInfo)">
 <summary>
 Get or load a kernel which doesn't contain compile-time constant argument.
 </summary>
 <param name="this">The Gpu to load the kernel.</param>
 <param name="kernelMethodInfo">The reflected information of the kernel function.</param>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``16(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``15(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``14(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``13(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``12(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``11(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``10(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``9(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``8(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``7(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``6(Alea.Gpu,System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``5(Alea.Gpu,System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``4(Alea.Gpu,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``3(Alea.Gpu,System.Action{``0,``1,``2},``0,``1,``2)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``2(Alea.Gpu,System.Action{``0,``1},``0,``1)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.CSharp.GpuExtensions.GetKernel``1(Alea.Gpu,System.Action{``0},``0)">
<summary>
Get or load a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.FSharp.SessionExtensions.Launch``1(Alea.Session,Alea.FSharp.KernelDef{``0})">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.FSharp.StreamExtensions.Launch``1(Alea.Stream,Alea.FSharp.KernelDef{``0})">
<summary>
Launch a kernel specified via action delegate.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.loadWithOptionsAndLibraries``1(Alea.CompileOptions,Microsoft.FSharp.Collections.FSharpList{Alea.IRModule},Alea.Gpu,Alea.Template{Alea.Entry{``0}})">
<summary>
 Load template with libraries and specified compiling options.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.loadWithLibraries``1(Microsoft.FSharp.Collections.FSharpList{Alea.IRModule},Alea.Gpu,Alea.Template{Alea.Entry{``0}})">
<summary>
 Load template with libraries.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.loadWithOptions``1(Alea.CompileOptions,Alea.Gpu,Alea.Template{Alea.Entry{``0}})">
<summary>
 Load template with specified compiling options.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.load``1(Alea.Gpu,Alea.Template{Alea.Entry{``0}})">
<summary>
 Load template.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.link``1(Alea.IRModule{``0})">
<summary>
 Link `IRModule`
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.linkWithArch``1(Alea.DeviceArch,Alea.IRModule{``0})">
<summary>
 Link `IRModule` with specified device arch.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.linkWithLibraries``1(Microsoft.FSharp.Collections.FSharpList{Alea.IRModule},Alea.IRModule{``0})">
<summary>
 Link `IRModule` with libraries.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.linkWithLibrariesAndArch``1(Microsoft.FSharp.Collections.FSharpList{Alea.IRModule},Alea.DeviceArch,Alea.IRModule{``0})">
<summary>
 Link `IRModule` with libraries and specified device arch.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.compile``1(Alea.Template{``0})">
<summary>
 Compile template.
</summary>
</member>
<member name="M:Alea.FSharp.Compiler.compileWithOptions``1(Alea.CompileOptions,Alea.Template{``0})">
<summary>
 Compile template with specified compiling options.
</summary>
</member>
<member name="T:Alea.FSharp.Compiler">
<summary>
 Some compiler helper functions.
</summary>
</member>
<member name="T:Alea.FSharp.NumericLiteralG">
<summary>
 F# literal definition for a generic number. This helps you to write generic inline functions in F#.
</summary>
</member>
<member name="M:Alea.Experiment.KernelSymbolExtensions.Foo(Alea.Gpu,System.Reflection.MethodInfo)">
 <summary>
 Get or load a kernel which doesn't contain compile-time constant argument.
 </summary>
 <param name="this">The Gpu to load the kernel.</param>
 <param name="kernelMethodInfo">The reflected information of the kernel function.</param>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.ToLinqExpression(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Convert the quotation expression to LINQ expression trees

 This operation will only succeed for a subset of quotation expressions.

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.EvaluateUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.Evaluate``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.CompileUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.Compile``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluator">
<summary>
 [omit]
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.LinqExpressionHelper``1(``0)">
<summary>
 This function should not be called directly. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr`1.Eval``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr`1.Compile``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr.EvalUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr.CompileUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.Expr.ToLinqExpression(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Convert the quotation expression to LINQ expression trees

 This operation will only succeed for a subset of quotation expressions.

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation.HelperTypes">
<summary>
 A set of types used for implementing quotation conversions.
 These are public only because targets of Linq Lambda expressions require them to be so
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation">
<summary>
 [omit]
 This module provides Compile and Eval extension members
 for F# quotation values, implemented by translating to LINQ
 expression trees and using the LINQ dynamic compiler.
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.ExtraHashCompare.GenericNotEqualIntrinsic``1(``0,``0)">
<summary>
 An intrinsic for compiling &lt;c&gt;&amp;lt;@ x &lt;&gt; y @&amp;gt;&lt;/c&gt; to expression trees
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.ExtraHashCompare">
<summary>
 [omit]
</summary>
</member>
</members>
</doc>
